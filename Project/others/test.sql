/*
Navicat MySQL Data Transfer

Source Server         : localhost_3306
Source Server Version : 50724
Source Host           : localhost:3306
Source Database       : test

Target Server Type    : MYSQL
Target Server Version : 50724
File Encoding         : 65001

Date: 2022-12-08 23:27:12
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for answers
-- ----------------------------
DROP TABLE IF EXISTS `answers`;
CREATE TABLE `answers` (
  `begintime` datetime NOT NULL,
  `endtime` datetime NOT NULL,
  `answer` text NOT NULL,
  `judge` char(10) DEFAULT NULL,
  `CHAPTER` int(11) NOT NULL,
  `TYPE` char(20) NOT NULL,
  `NUMBER` int(11) NOT NULL,
  `USERNAME` char(10) NOT NULL,
  PRIMARY KEY (`begintime`,`endtime`,`CHAPTER`,`TYPE`,`NUMBER`,`USERNAME`),
  KEY `CHAPTER` (`CHAPTER`,`TYPE`,`NUMBER`),
  KEY `USERNAME` (`USERNAME`),
  CONSTRAINT `answers_ibfk_1` FOREIGN KEY (`CHAPTER`, `TYPE`, `NUMBER`) REFERENCES `questions` (`CHAPTER`, `TYPE`, `NUMBER`),
  CONSTRAINT `answers_ibfk_2` FOREIGN KEY (`USERNAME`) REFERENCES `users` (`USERNAME`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of answers
-- ----------------------------
INSERT INTO `answers` VALUES ('2022-12-06 23:35:43', '2022-12-06 23:37:33', '啦啦啦', 'F', '1', '填空题', '11', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:35:43', '2022-12-06 23:37:33', '啦啦啦', 'F', '1', '填空题', '12', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:35:43', '2022-12-06 23:37:33', '啦啦啦', 'F', '1', '填空题', '13', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:35:43', '2022-12-06 23:37:33', '啦啦啦', 'F', '1', '填空题', '14', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:35:43', '2022-12-06 23:37:33', '啦啦啦', 'F', '1', '填空题', '15', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:35:43', '2022-12-06 23:37:33', '啦啦啦', 'F', '1', '填空题', '16', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:35:43', '2022-12-06 23:37:33', '啦啦啦', 'F', '1', '填空题', '17', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:35:43', '2022-12-06 23:37:33', '啦啦啦', 'F', '1', '填空题', '18', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:35:43', '2022-12-06 23:37:33', '啦啦啦', 'F', '1', '填空题', '19', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:35:43', '2022-12-06 23:37:33', '啦啦啦', 'F', '1', '填空题', '20', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:35:43', '2022-12-06 23:37:33', 'A', 'T', '1', '选择题', '1', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:35:43', '2022-12-06 23:37:33', 'A', 'T', '1', '选择题', '2', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:35:43', '2022-12-06 23:37:33', 'A', 'T', '1', '选择题', '3', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:35:43', '2022-12-06 23:37:33', 'A', 'T', '1', '选择题', '4', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:35:43', '2022-12-06 23:37:33', 'A', 'T', '1', '选择题', '5', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:35:43', '2022-12-06 23:37:33', 'A', 'T', '1', '选择题', '6', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:35:43', '2022-12-06 23:37:33', 'A', 'T', '1', '选择题', '7', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:35:43', '2022-12-06 23:37:33', 'A', 'T', '1', '选择题', '8', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:35:43', '2022-12-06 23:37:33', 'A', 'T', '1', '选择题', '9', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:35:43', '2022-12-06 23:37:33', 'A', 'T', '1', '选择题', '10', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:47:53', '2022-12-06 23:48:33', 'F', 'F', '1', '判断题', '16', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:47:53', '2022-12-06 23:48:33', 'F', 'F', '1', '判断题', '17', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:47:53', '2022-12-06 23:48:33', 'F', 'F', '1', '判断题', '18', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:47:53', '2022-12-06 23:48:33', 'F', 'F', '1', '判断题', '19', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:47:53', '2022-12-06 23:48:33', 'F', 'F', '1', '判断题', '20', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:47:53', '2022-12-06 23:48:33', 'C', 'T', '1', '选择题', '1', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:47:53', '2022-12-06 23:48:33', 'C', 'T', '1', '选择题', '2', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:47:53', '2022-12-06 23:48:33', 'C', 'T', '1', '选择题', '3', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:47:53', '2022-12-06 23:48:33', 'C', 'T', '1', '选择题', '4', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:47:53', '2022-12-06 23:48:33', 'C', 'T', '1', '选择题', '5', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:47:53', '2022-12-06 23:48:33', 'C', 'T', '1', '选择题', '6', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:47:53', '2022-12-06 23:48:33', 'C', 'T', '1', '选择题', '7', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:47:53', '2022-12-06 23:48:33', 'C', 'T', '1', '选择题', '8', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:47:53', '2022-12-06 23:48:33', 'C', 'T', '1', '选择题', '9', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:47:53', '2022-12-06 23:48:33', 'C', 'T', '1', '选择题', '10', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:47:53', '2022-12-06 23:48:33', 'C', 'T', '1', '选择题', '11', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:47:53', '2022-12-06 23:48:33', 'C', 'T', '1', '选择题', '12', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:47:53', '2022-12-06 23:48:33', 'C', 'T', '1', '选择题', '13', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:47:53', '2022-12-06 23:48:33', 'C', 'T', '1', '选择题', '14', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:47:53', '2022-12-06 23:48:33', 'C', 'T', '1', '选择题', '15', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:51:53', '2022-12-06 23:52:33', '力量', 'T', '1', '填空题', '1', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:51:53', '2022-12-06 23:52:33', '力量', 'T', '1', '填空题', '2', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:51:53', '2022-12-06 23:52:33', '力量', 'T', '1', '填空题', '3', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:51:53', '2022-12-06 23:52:33', '力量', 'T', '1', '填空题', '4', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:51:53', '2022-12-06 23:52:33', '力量', 'T', '1', '填空题', '5', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:51:53', '2022-12-06 23:52:33', '力量', 'T', '1', '填空题', '6', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:51:53', '2022-12-06 23:52:33', '力量', 'T', '1', '填空题', '7', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:51:53', '2022-12-06 23:52:33', '力量', 'T', '1', '填空题', '8', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:51:53', '2022-12-06 23:52:33', '力量', 'T', '1', '填空题', '9', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:51:53', '2022-12-06 23:52:33', '力量', 'T', '1', '填空题', '10', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:51:53', '2022-12-06 23:52:33', '力量', 'T', '1', '填空题', '11', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:51:53', '2022-12-06 23:52:33', '力量', 'T', '1', '填空题', '12', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:51:53', '2022-12-06 23:52:33', '力量', 'T', '1', '填空题', '13', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:51:53', '2022-12-06 23:52:33', '力量', 'T', '1', '填空题', '14', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:51:53', '2022-12-06 23:52:33', '力量', 'T', '1', '填空题', '15', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:51:53', '2022-12-06 23:52:33', '力量', 'T', '1', '填空题', '16', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:51:53', '2022-12-06 23:52:33', '力量', 'T', '1', '填空题', '17', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:51:53', '2022-12-06 23:52:33', '力量', 'T', '1', '填空题', '18', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:51:53', '2022-12-06 23:52:33', '力量', 'T', '1', '填空题', '19', 'wst');
INSERT INTO `answers` VALUES ('2022-12-06 23:51:53', '2022-12-06 23:52:33', '力量', 'T', '1', '填空题', '20', 'wst');

-- ----------------------------
-- Table structure for chapterfiles
-- ----------------------------
DROP TABLE IF EXISTS `chapterfiles`;
CREATE TABLE `chapterfiles` (
  `CHAPTER` int(11) NOT NULL,
  `SUBCHAPTER` int(11) NOT NULL,
  `FILEPATH` char(100) NOT NULL,
  PRIMARY KEY (`CHAPTER`,`SUBCHAPTER`,`FILEPATH`),
  KEY `sc` (`SUBCHAPTER`),
  CONSTRAINT `c` FOREIGN KEY (`CHAPTER`) REFERENCES `knowledge` (`CHAPTER`),
  CONSTRAINT `sc` FOREIGN KEY (`SUBCHAPTER`) REFERENCES `knowledge` (`SUBCHAPTER`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of chapterfiles
-- ----------------------------
INSERT INTO `chapterfiles` VALUES ('1', '1', 'chapterfiles\\1\\1.1\\1_1_1.png');
INSERT INTO `chapterfiles` VALUES ('1', '1', 'chapterfiles\\1\\1.1\\1_1_2.png');
INSERT INTO `chapterfiles` VALUES ('1', '1', 'chapterfiles\\1\\1.1\\1_1_3.png');
INSERT INTO `chapterfiles` VALUES ('2', '1', 'chapterfiles\\2\\2.1\\2_1_1.png');
INSERT INTO `chapterfiles` VALUES ('2', '1', 'chapterfiles\\2\\2.1\\2_1_2.png');
INSERT INTO `chapterfiles` VALUES ('2', '1', 'chapterfiles\\2\\2.1\\2_1_3.png');
INSERT INTO `chapterfiles` VALUES ('2', '1', 'chapterfiles\\2\\2.1\\2_1_4.png');
INSERT INTO `chapterfiles` VALUES ('2', '1', 'chapterfiles\\2\\2.1\\2_1_5.png');
INSERT INTO `chapterfiles` VALUES ('2', '1', 'chapterfiles\\2\\2.1\\2_1_6.png');
INSERT INTO `chapterfiles` VALUES ('3', '1', 'chapterfiles\\3\\3.1\\3_1_1.png');
INSERT INTO `chapterfiles` VALUES ('3', '1', 'chapterfiles\\3\\3.1\\3_1_2.png');
INSERT INTO `chapterfiles` VALUES ('4', '1', 'chapterfiles\\4\\4.1\\4_1_1.png');
INSERT INTO `chapterfiles` VALUES ('4', '1', 'chapterfiles\\4\\4.1\\4_1_2.png');
INSERT INTO `chapterfiles` VALUES ('4', '1', 'chapterfiles\\4\\4.1\\4_1_3.png');
INSERT INTO `chapterfiles` VALUES ('4', '1', 'chapterfiles\\4\\4.1\\4_1_4.png');
INSERT INTO `chapterfiles` VALUES ('4', '1', 'chapterfiles\\4\\4.1\\4_1_5.png');
INSERT INTO `chapterfiles` VALUES ('4', '1', 'chapterfiles\\4\\4.1\\4_1_6.png');
INSERT INTO `chapterfiles` VALUES ('5', '1', 'chapterfiles\\5\\5.1\\5_1_1.png');
INSERT INTO `chapterfiles` VALUES ('5', '1', 'chapterfiles\\5\\5.1\\5_1_2.png');
INSERT INTO `chapterfiles` VALUES ('6', '1', 'chapterfiles\\6\\6.1\\6_1_1.png');
INSERT INTO `chapterfiles` VALUES ('6', '1', 'chapterfiles\\6\\6.1\\6_1_2.png');
INSERT INTO `chapterfiles` VALUES ('7', '1', 'chapterfiles\\7\\7.1\\7_1_1.png');
INSERT INTO `chapterfiles` VALUES ('7', '1', 'chapterfiles\\7\\7.1\\7_1_2.png');
INSERT INTO `chapterfiles` VALUES ('8', '1', 'chapterfiles\\8\\8.1\\8_1_1.png');
INSERT INTO `chapterfiles` VALUES ('8', '1', 'chapterfiles\\8\\8.1\\8_1_2.png');
INSERT INTO `chapterfiles` VALUES ('8', '1', 'chapterfiles\\8\\8.1\\8_1_3.png');
INSERT INTO `chapterfiles` VALUES ('8', '1', 'chapterfiles\\8\\8.1\\8_1_4.png');
INSERT INTO `chapterfiles` VALUES ('9', '1', 'chapterfiles\\9\\9.1\\9_1_1.png');
INSERT INTO `chapterfiles` VALUES ('9', '1', 'chapterfiles\\9\\9.1\\9_1_2.png');
INSERT INTO `chapterfiles` VALUES ('9', '1', 'chapterfiles\\9\\9.1\\9_1_3.png');
INSERT INTO `chapterfiles` VALUES ('10', '1', 'chapterfiles\\10\\10.1\\10_1_1.png');
INSERT INTO `chapterfiles` VALUES ('10', '1', 'chapterfiles\\10\\10.1\\10_1_2.png');
INSERT INTO `chapterfiles` VALUES ('11', '1', 'chapterfiles\\11\\11.1\\11_1_1.png');
INSERT INTO `chapterfiles` VALUES ('11', '1', 'chapterfiles\\11\\11.1\\11_1_2.png');
INSERT INTO `chapterfiles` VALUES ('11', '1', 'chapterfiles\\11\\11.1\\11_1_3.png');
INSERT INTO `chapterfiles` VALUES ('11', '1', 'chapterfiles\\11\\11.1\\11_1_4.png');
INSERT INTO `chapterfiles` VALUES ('11', '1', 'chapterfiles\\11\\11.1\\11_1_5.png');
INSERT INTO `chapterfiles` VALUES ('11', '1', 'chapterfiles\\11\\11.1\\11_1_6.png');
INSERT INTO `chapterfiles` VALUES ('1', '2', 'chapterfiles\\1\\1.2\\1_2_1.png');
INSERT INTO `chapterfiles` VALUES ('1', '2', 'chapterfiles\\1\\1.2\\1_2_2.png');
INSERT INTO `chapterfiles` VALUES ('1', '2', 'chapterfiles\\1\\1.2\\1_2_3.png');
INSERT INTO `chapterfiles` VALUES ('2', '2', 'chapterfiles\\2\\2.2\\2_2_1.png');
INSERT INTO `chapterfiles` VALUES ('2', '2', 'chapterfiles\\2\\2.2\\2_2_2.png');
INSERT INTO `chapterfiles` VALUES ('2', '2', 'chapterfiles\\2\\2.2\\2_2_3.png');
INSERT INTO `chapterfiles` VALUES ('2', '2', 'chapterfiles\\2\\2.2\\2_2_4.png');
INSERT INTO `chapterfiles` VALUES ('2', '2', 'chapterfiles\\2\\2.2\\2_2_5.png');
INSERT INTO `chapterfiles` VALUES ('2', '2', 'chapterfiles\\2\\2.2\\2_2_6.png');
INSERT INTO `chapterfiles` VALUES ('4', '2', 'chapterfiles\\4\\4.2\\4_2_1.png');
INSERT INTO `chapterfiles` VALUES ('4', '2', 'chapterfiles\\4\\4.2\\4_2_2.png');
INSERT INTO `chapterfiles` VALUES ('4', '2', 'chapterfiles\\4\\4.2\\4_2_3.png');
INSERT INTO `chapterfiles` VALUES ('5', '2', 'chapterfiles\\5\\5.2\\5_2_1.png');
INSERT INTO `chapterfiles` VALUES ('5', '2', 'chapterfiles\\5\\5.2\\5_2_2.png');
INSERT INTO `chapterfiles` VALUES ('5', '2', 'chapterfiles\\5\\5.2\\5_2_3.png');
INSERT INTO `chapterfiles` VALUES ('5', '2', 'chapterfiles\\5\\5.2\\5_2_4.png');
INSERT INTO `chapterfiles` VALUES ('5', '2', 'chapterfiles\\5\\5.2\\5_2_5.png');
INSERT INTO `chapterfiles` VALUES ('6', '2', 'chapterfiles\\6\\6.2\\6_2_1.png');
INSERT INTO `chapterfiles` VALUES ('6', '2', 'chapterfiles\\6\\6.2\\6_2_10.png');
INSERT INTO `chapterfiles` VALUES ('6', '2', 'chapterfiles\\6\\6.2\\6_2_11.png');
INSERT INTO `chapterfiles` VALUES ('6', '2', 'chapterfiles\\6\\6.2\\6_2_2.png');
INSERT INTO `chapterfiles` VALUES ('6', '2', 'chapterfiles\\6\\6.2\\6_2_3.png');
INSERT INTO `chapterfiles` VALUES ('6', '2', 'chapterfiles\\6\\6.2\\6_2_4.png');
INSERT INTO `chapterfiles` VALUES ('6', '2', 'chapterfiles\\6\\6.2\\6_2_5.png');
INSERT INTO `chapterfiles` VALUES ('6', '2', 'chapterfiles\\6\\6.2\\6_2_6.png');
INSERT INTO `chapterfiles` VALUES ('6', '2', 'chapterfiles\\6\\6.2\\6_2_7.png');
INSERT INTO `chapterfiles` VALUES ('6', '2', 'chapterfiles\\6\\6.2\\6_2_8.png');
INSERT INTO `chapterfiles` VALUES ('6', '2', 'chapterfiles\\6\\6.2\\6_2_9.png');
INSERT INTO `chapterfiles` VALUES ('7', '2', 'chapterfiles\\7\\7.2\\7_2_1.png');
INSERT INTO `chapterfiles` VALUES ('7', '2', 'chapterfiles\\7\\7.2\\7_2_10.png');
INSERT INTO `chapterfiles` VALUES ('7', '2', 'chapterfiles\\7\\7.2\\7_2_2.png');
INSERT INTO `chapterfiles` VALUES ('7', '2', 'chapterfiles\\7\\7.2\\7_2_3.png');
INSERT INTO `chapterfiles` VALUES ('7', '2', 'chapterfiles\\7\\7.2\\7_2_4.png');
INSERT INTO `chapterfiles` VALUES ('7', '2', 'chapterfiles\\7\\7.2\\7_2_5.png');
INSERT INTO `chapterfiles` VALUES ('7', '2', 'chapterfiles\\7\\7.2\\7_2_6.png');
INSERT INTO `chapterfiles` VALUES ('7', '2', 'chapterfiles\\7\\7.2\\7_2_7.png');
INSERT INTO `chapterfiles` VALUES ('7', '2', 'chapterfiles\\7\\7.2\\7_2_8.png');
INSERT INTO `chapterfiles` VALUES ('7', '2', 'chapterfiles\\7\\7.2\\7_2_9.png');
INSERT INTO `chapterfiles` VALUES ('8', '2', 'chapterfiles\\8\\8.2\\8_2_1.png');
INSERT INTO `chapterfiles` VALUES ('8', '2', 'chapterfiles\\8\\8.2\\8_2_2.png');
INSERT INTO `chapterfiles` VALUES ('8', '2', 'chapterfiles\\8\\8.2\\8_2_3.png');
INSERT INTO `chapterfiles` VALUES ('9', '2', 'chapterfiles\\9\\9.2\\9_2_1.png');
INSERT INTO `chapterfiles` VALUES ('9', '2', 'chapterfiles\\9\\9.2\\9_2_10.png');
INSERT INTO `chapterfiles` VALUES ('9', '2', 'chapterfiles\\9\\9.2\\9_2_11.png');
INSERT INTO `chapterfiles` VALUES ('9', '2', 'chapterfiles\\9\\9.2\\9_2_12.png');
INSERT INTO `chapterfiles` VALUES ('9', '2', 'chapterfiles\\9\\9.2\\9_2_2.png');
INSERT INTO `chapterfiles` VALUES ('9', '2', 'chapterfiles\\9\\9.2\\9_2_3.png');
INSERT INTO `chapterfiles` VALUES ('9', '2', 'chapterfiles\\9\\9.2\\9_2_4.png');
INSERT INTO `chapterfiles` VALUES ('9', '2', 'chapterfiles\\9\\9.2\\9_2_5.png');
INSERT INTO `chapterfiles` VALUES ('9', '2', 'chapterfiles\\9\\9.2\\9_2_6.png');
INSERT INTO `chapterfiles` VALUES ('9', '2', 'chapterfiles\\9\\9.2\\9_2_7.png');
INSERT INTO `chapterfiles` VALUES ('9', '2', 'chapterfiles\\9\\9.2\\9_2_8.png');
INSERT INTO `chapterfiles` VALUES ('9', '2', 'chapterfiles\\9\\9.2\\9_2_9.png');
INSERT INTO `chapterfiles` VALUES ('10', '2', 'chapterfiles\\10\\10.2\\10_2_1.png');
INSERT INTO `chapterfiles` VALUES ('10', '2', 'chapterfiles\\10\\10.2\\10_2_2.png');
INSERT INTO `chapterfiles` VALUES ('10', '2', 'chapterfiles\\10\\10.2\\10_2_3.png');
INSERT INTO `chapterfiles` VALUES ('10', '2', 'chapterfiles\\10\\10.2\\10_2_4.png');
INSERT INTO `chapterfiles` VALUES ('10', '2', 'chapterfiles\\10\\10.2\\10_2_5.png');
INSERT INTO `chapterfiles` VALUES ('11', '2', 'chapterfiles\\11\\11.2\\11_2_1.png');
INSERT INTO `chapterfiles` VALUES ('11', '2', 'chapterfiles\\11\\11.2\\11_2_2.png');
INSERT INTO `chapterfiles` VALUES ('11', '2', 'chapterfiles\\11\\11.2\\11_2_3.png');
INSERT INTO `chapterfiles` VALUES ('1', '3', 'chapterfiles\\1\\1.3\\1_3_1.png');
INSERT INTO `chapterfiles` VALUES ('1', '3', 'chapterfiles\\1\\1.3\\1_3_2.png');
INSERT INTO `chapterfiles` VALUES ('1', '3', 'chapterfiles\\1\\1.3\\1_3_3.png');
INSERT INTO `chapterfiles` VALUES ('1', '3', 'chapterfiles\\1\\1.3\\1_3_4.png');
INSERT INTO `chapterfiles` VALUES ('1', '3', 'chapterfiles\\1\\1.3\\1_3_5.png');
INSERT INTO `chapterfiles` VALUES ('2', '3', 'chapterfiles\\2\\2.3\\2_3_1.png');
INSERT INTO `chapterfiles` VALUES ('2', '3', 'chapterfiles\\2\\2.3\\2_3_2.png');
INSERT INTO `chapterfiles` VALUES ('2', '3', 'chapterfiles\\2\\2.3\\2_3_3.png');
INSERT INTO `chapterfiles` VALUES ('4', '3', 'chapterfiles\\4\\4.3\\4_3_1.png');
INSERT INTO `chapterfiles` VALUES ('4', '3', 'chapterfiles\\4\\4.3\\4_3_2.png');
INSERT INTO `chapterfiles` VALUES ('4', '3', 'chapterfiles\\4\\4.3\\4_3_3.png');
INSERT INTO `chapterfiles` VALUES ('5', '3', 'chapterfiles\\5\\5.3\\5_3_1.png');
INSERT INTO `chapterfiles` VALUES ('5', '3', 'chapterfiles\\5\\5.3\\5_3_2.png');
INSERT INTO `chapterfiles` VALUES ('5', '3', 'chapterfiles\\5\\5.3\\5_3_3.png');
INSERT INTO `chapterfiles` VALUES ('5', '3', 'chapterfiles\\5\\5.3\\5_3_4.png');
INSERT INTO `chapterfiles` VALUES ('5', '3', 'chapterfiles\\5\\5.3\\5_3_5.png');
INSERT INTO `chapterfiles` VALUES ('5', '3', 'chapterfiles\\5\\5.3\\5_3_6.png');
INSERT INTO `chapterfiles` VALUES ('5', '3', 'chapterfiles\\5\\5.3\\5_3_7.png');
INSERT INTO `chapterfiles` VALUES ('5', '3', 'chapterfiles\\5\\5.3\\5_3_8.png');
INSERT INTO `chapterfiles` VALUES ('6', '3', 'chapterfiles\\6\\6.3\\6_3_1.png');
INSERT INTO `chapterfiles` VALUES ('6', '3', 'chapterfiles\\6\\6.3\\6_3_2.png');
INSERT INTO `chapterfiles` VALUES ('6', '3', 'chapterfiles\\6\\6.3\\6_3_3.png');
INSERT INTO `chapterfiles` VALUES ('7', '3', 'chapterfiles\\7\\7.3\\7_3_1.png');
INSERT INTO `chapterfiles` VALUES ('7', '3', 'chapterfiles\\7\\7.3\\7_3_2.png');
INSERT INTO `chapterfiles` VALUES ('7', '3', 'chapterfiles\\7\\7.3\\7_3_3.png');
INSERT INTO `chapterfiles` VALUES ('8', '3', 'chapterfiles\\8\\8.3\\8_3_1.png');
INSERT INTO `chapterfiles` VALUES ('8', '3', 'chapterfiles\\8\\8.3\\8_3_2.png');
INSERT INTO `chapterfiles` VALUES ('8', '3', 'chapterfiles\\8\\8.3\\8_3_3.png');
INSERT INTO `chapterfiles` VALUES ('8', '3', 'chapterfiles\\8\\8.3\\8_3_4.png');
INSERT INTO `chapterfiles` VALUES ('8', '3', 'chapterfiles\\8\\8.3\\8_3_5.png');
INSERT INTO `chapterfiles` VALUES ('9', '3', 'chapterfiles\\9\\9.3\\9_3_1.png');
INSERT INTO `chapterfiles` VALUES ('9', '3', 'chapterfiles\\9\\9.3\\9_3_2.png');
INSERT INTO `chapterfiles` VALUES ('9', '3', 'chapterfiles\\9\\9.3\\9_3_3.png');
INSERT INTO `chapterfiles` VALUES ('9', '3', 'chapterfiles\\9\\9.3\\9_3_4.png');
INSERT INTO `chapterfiles` VALUES ('10', '3', 'chapterfiles\\10\\10.3\\10_3_1.png');
INSERT INTO `chapterfiles` VALUES ('10', '3', 'chapterfiles\\10\\10.3\\10_3_2.png');
INSERT INTO `chapterfiles` VALUES ('10', '3', 'chapterfiles\\10\\10.3\\10_3_3.png');
INSERT INTO `chapterfiles` VALUES ('10', '3', 'chapterfiles\\10\\10.3\\10_3_4.png');
INSERT INTO `chapterfiles` VALUES ('10', '3', 'chapterfiles\\10\\10.3\\10_3_5.png');
INSERT INTO `chapterfiles` VALUES ('10', '3', 'chapterfiles\\10\\10.3\\10_3_6.png');
INSERT INTO `chapterfiles` VALUES ('11', '3', 'chapterfiles\\11\\11.3\\11_3_1.png');
INSERT INTO `chapterfiles` VALUES ('11', '3', 'chapterfiles\\11\\11.3\\11_3_10.png');
INSERT INTO `chapterfiles` VALUES ('11', '3', 'chapterfiles\\11\\11.3\\11_3_11.png');
INSERT INTO `chapterfiles` VALUES ('11', '3', 'chapterfiles\\11\\11.3\\11_3_12.png');
INSERT INTO `chapterfiles` VALUES ('11', '3', 'chapterfiles\\11\\11.3\\11_3_2.png');
INSERT INTO `chapterfiles` VALUES ('11', '3', 'chapterfiles\\11\\11.3\\11_3_3.png');
INSERT INTO `chapterfiles` VALUES ('11', '3', 'chapterfiles\\11\\11.3\\11_3_4.png');
INSERT INTO `chapterfiles` VALUES ('11', '3', 'chapterfiles\\11\\11.3\\11_3_5.png');
INSERT INTO `chapterfiles` VALUES ('11', '3', 'chapterfiles\\11\\11.3\\11_3_6.png');
INSERT INTO `chapterfiles` VALUES ('11', '3', 'chapterfiles\\11\\11.3\\11_3_7.png');
INSERT INTO `chapterfiles` VALUES ('11', '3', 'chapterfiles\\11\\11.3\\11_3_8.png');
INSERT INTO `chapterfiles` VALUES ('11', '3', 'chapterfiles\\11\\11.3\\11_3_9.png');
INSERT INTO `chapterfiles` VALUES ('1', '4', 'chapterfiles\\1\\1.4\\1_4_1.png');
INSERT INTO `chapterfiles` VALUES ('1', '4', 'chapterfiles\\1\\1.4\\1_4_2.png');
INSERT INTO `chapterfiles` VALUES ('1', '4', 'chapterfiles\\1\\1.4\\1_4_3.png');
INSERT INTO `chapterfiles` VALUES ('1', '4', 'chapterfiles\\1\\1.4\\1_4_4.png');
INSERT INTO `chapterfiles` VALUES ('1', '4', 'chapterfiles\\1\\1.4\\1_4_5.png');
INSERT INTO `chapterfiles` VALUES ('5', '4', 'chapterfiles\\5\\5.4\\5_4_1.png');
INSERT INTO `chapterfiles` VALUES ('5', '4', 'chapterfiles\\5\\5.4\\5_4_2.png');
INSERT INTO `chapterfiles` VALUES ('5', '4', 'chapterfiles\\5\\5.4\\5_4_3.png');
INSERT INTO `chapterfiles` VALUES ('5', '4', 'chapterfiles\\5\\5.4\\5_4_4.png');
INSERT INTO `chapterfiles` VALUES ('5', '4', 'chapterfiles\\5\\5.4\\5_4_5.png');
INSERT INTO `chapterfiles` VALUES ('5', '4', 'chapterfiles\\5\\5.4\\5_4_6.png');
INSERT INTO `chapterfiles` VALUES ('5', '4', 'chapterfiles\\5\\5.4\\5_4_7.png');
INSERT INTO `chapterfiles` VALUES ('5', '4', 'chapterfiles\\5\\5.4\\5_4_8.png');
INSERT INTO `chapterfiles` VALUES ('6', '4', 'chapterfiles\\6\\6.4\\6_4_1.png');
INSERT INTO `chapterfiles` VALUES ('6', '4', 'chapterfiles\\6\\6.4\\6_4_2.png');
INSERT INTO `chapterfiles` VALUES ('6', '4', 'chapterfiles\\6\\6.4\\6_4_3.png');
INSERT INTO `chapterfiles` VALUES ('6', '4', 'chapterfiles\\6\\6.4\\6_4_4.png');
INSERT INTO `chapterfiles` VALUES ('7', '4', 'chapterfiles\\7\\7.4\\7_4_1.png');
INSERT INTO `chapterfiles` VALUES ('7', '4', 'chapterfiles\\7\\7.4\\7_4_2.png');
INSERT INTO `chapterfiles` VALUES ('7', '4', 'chapterfiles\\7\\7.4\\7_4_3.png');
INSERT INTO `chapterfiles` VALUES ('7', '4', 'chapterfiles\\7\\7.4\\7_4_4.png');
INSERT INTO `chapterfiles` VALUES ('7', '4', 'chapterfiles\\7\\7.4\\7_4_5.png');
INSERT INTO `chapterfiles` VALUES ('8', '4', 'chapterfiles\\8\\8.4\\8_4_1.png');
INSERT INTO `chapterfiles` VALUES ('8', '4', 'chapterfiles\\8\\8.4\\8_4_2.png');
INSERT INTO `chapterfiles` VALUES ('8', '4', 'chapterfiles\\8\\8.4\\8_4_3.png');
INSERT INTO `chapterfiles` VALUES ('8', '4', 'chapterfiles\\8\\8.4\\8_4_4.png');
INSERT INTO `chapterfiles` VALUES ('9', '4', 'chapterfiles\\9\\9.4\\9_4_1.png');
INSERT INTO `chapterfiles` VALUES ('9', '4', 'chapterfiles\\9\\9.4\\9_4_2.png');
INSERT INTO `chapterfiles` VALUES ('9', '4', 'chapterfiles\\9\\9.4\\9_4_3.png');
INSERT INTO `chapterfiles` VALUES ('9', '4', 'chapterfiles\\9\\9.4\\9_4_4.png');
INSERT INTO `chapterfiles` VALUES ('9', '4', 'chapterfiles\\9\\9.4\\9_4_5.png');
INSERT INTO `chapterfiles` VALUES ('9', '4', 'chapterfiles\\9\\9.4\\9_4_6.png');
INSERT INTO `chapterfiles` VALUES ('10', '4', 'chapterfiles\\10\\10.4\\10_4_1.png');
INSERT INTO `chapterfiles` VALUES ('10', '4', 'chapterfiles\\10\\10.4\\10_4_2.png');
INSERT INTO `chapterfiles` VALUES ('10', '4', 'chapterfiles\\10\\10.4\\10_4_3.png');
INSERT INTO `chapterfiles` VALUES ('10', '4', 'chapterfiles\\10\\10.4\\10_4_4.png');
INSERT INTO `chapterfiles` VALUES ('10', '4', 'chapterfiles\\10\\10.4\\10_4_5.png');
INSERT INTO `chapterfiles` VALUES ('10', '4', 'chapterfiles\\10\\10.4\\10_4_6.png');
INSERT INTO `chapterfiles` VALUES ('1', '5', 'chapterfiles\\1\\1.5\\1_5_1.png');
INSERT INTO `chapterfiles` VALUES ('1', '5', 'chapterfiles\\1\\1.5\\1_5_2.png');
INSERT INTO `chapterfiles` VALUES ('5', '5', 'chapterfiles\\5\\5.5\\5_5_1.png');
INSERT INTO `chapterfiles` VALUES ('5', '5', 'chapterfiles\\5\\5.5\\5_5_2.png');
INSERT INTO `chapterfiles` VALUES ('7', '5', 'chapterfiles\\7\\7.5\\7_5_1.png');
INSERT INTO `chapterfiles` VALUES ('7', '5', 'chapterfiles\\7\\7.5\\7_5_2.png');
INSERT INTO `chapterfiles` VALUES ('7', '5', 'chapterfiles\\7\\7.5\\7_5_3.png');
INSERT INTO `chapterfiles` VALUES ('7', '5', 'chapterfiles\\7\\7.5\\7_5_4.png');
INSERT INTO `chapterfiles` VALUES ('7', '5', 'chapterfiles\\7\\7.5\\7_5_5.png');
INSERT INTO `chapterfiles` VALUES ('8', '5', 'chapterfiles\\8\\8.5\\8_5_1.png');
INSERT INTO `chapterfiles` VALUES ('8', '5', 'chapterfiles\\8\\8.5\\8_5_2.png');
INSERT INTO `chapterfiles` VALUES ('10', '5', 'chapterfiles\\10\\10.5\\10_5_1.png');
INSERT INTO `chapterfiles` VALUES ('10', '5', 'chapterfiles\\10\\10.5\\10_5_2.png');
INSERT INTO `chapterfiles` VALUES ('10', '5', 'chapterfiles\\10\\10.5\\10_5_3.png');
INSERT INTO `chapterfiles` VALUES ('10', '5', 'chapterfiles\\10\\10.5\\10_5_4.png');
INSERT INTO `chapterfiles` VALUES ('10', '5', 'chapterfiles\\10\\10.5\\10_5_5.png');
INSERT INTO `chapterfiles` VALUES ('10', '5', 'chapterfiles\\10\\10.5\\10_5_6.png');
INSERT INTO `chapterfiles` VALUES ('10', '5', 'chapterfiles\\10\\10.5\\10_5_7.png');
INSERT INTO `chapterfiles` VALUES ('1', '6', 'chapterfiles\\1\\1.6\\1_6_1.png');
INSERT INTO `chapterfiles` VALUES ('1', '6', 'chapterfiles\\1\\1.6\\1_6_2.png');
INSERT INTO `chapterfiles` VALUES ('5', '6', 'chapterfiles\\5\\5.6\\5_6_1.png');
INSERT INTO `chapterfiles` VALUES ('5', '6', 'chapterfiles\\5\\5.6\\5_6_2.png');
INSERT INTO `chapterfiles` VALUES ('7', '6', 'chapterfiles\\7\\7.6\\7_6_1.png');
INSERT INTO `chapterfiles` VALUES ('7', '6', 'chapterfiles\\7\\7.6\\7_6_2.png');
INSERT INTO `chapterfiles` VALUES ('7', '6', 'chapterfiles\\7\\7.6\\7_6_3.png');
INSERT INTO `chapterfiles` VALUES ('7', '6', 'chapterfiles\\7\\7.6\\7_6_4.png');
INSERT INTO `chapterfiles` VALUES ('7', '6', 'chapterfiles\\7\\7.6\\7_6_5.png');
INSERT INTO `chapterfiles` VALUES ('7', '6', 'chapterfiles\\7\\7.6\\7_6_6.png');
INSERT INTO `chapterfiles` VALUES ('7', '6', 'chapterfiles\\7\\7.6\\7_6_7.png');
INSERT INTO `chapterfiles` VALUES ('7', '6', 'chapterfiles\\7\\7.6\\7_6_8.png');
INSERT INTO `chapterfiles` VALUES ('7', '6', 'chapterfiles\\7\\7.6\\7_6_9.png');
INSERT INTO `chapterfiles` VALUES ('10', '6', 'chapterfiles\\10\\10.6\\10_6_1.png');
INSERT INTO `chapterfiles` VALUES ('10', '6', 'chapterfiles\\10\\10.6\\10_6_2.png');
INSERT INTO `chapterfiles` VALUES ('10', '6', 'chapterfiles\\10\\10.6\\10_6_3.png');
INSERT INTO `chapterfiles` VALUES ('10', '6', 'chapterfiles\\10\\10.6\\10_6_4.png');
INSERT INTO `chapterfiles` VALUES ('1', '7', 'chapterfiles\\1\\1.7\\1_7_1.png');
INSERT INTO `chapterfiles` VALUES ('1', '7', 'chapterfiles\\1\\1.7\\1_7_2.png');
INSERT INTO `chapterfiles` VALUES ('1', '7', 'chapterfiles\\1\\1.7\\1_7_3.png');
INSERT INTO `chapterfiles` VALUES ('5', '7', 'chapterfiles\\5\\5.7\\5_7_1.png');
INSERT INTO `chapterfiles` VALUES ('5', '7', 'chapterfiles\\5\\5.7\\5_7_2.png');
INSERT INTO `chapterfiles` VALUES ('5', '7', 'chapterfiles\\5\\5.7\\5_7_3.png');
INSERT INTO `chapterfiles` VALUES ('5', '7', 'chapterfiles\\5\\5.7\\5_7_4.png');
INSERT INTO `chapterfiles` VALUES ('7', '7', 'chapterfiles\\7\\7.7\\7_7_1.png');
INSERT INTO `chapterfiles` VALUES ('7', '7', 'chapterfiles\\7\\7.7\\7_7_2.png');
INSERT INTO `chapterfiles` VALUES ('7', '7', 'chapterfiles\\7\\7.7\\7_7_3.png');
INSERT INTO `chapterfiles` VALUES ('7', '7', 'chapterfiles\\7\\7.7\\7_7_4.png');
INSERT INTO `chapterfiles` VALUES ('7', '7', 'chapterfiles\\7\\7.7\\7_7_5.png');
INSERT INTO `chapterfiles` VALUES ('1', '8', 'chapterfiles\\1\\1.8\\1_8_1.png');
INSERT INTO `chapterfiles` VALUES ('1', '8', 'chapterfiles\\1\\1.8\\1_8_2.png');
INSERT INTO `chapterfiles` VALUES ('1', '9', 'chapterfiles\\1\\1.9\\1_9_1.png');
INSERT INTO `chapterfiles` VALUES ('1', '9', 'chapterfiles\\1\\1.9\\1_9_2.png');
INSERT INTO `chapterfiles` VALUES ('1', '9', 'chapterfiles\\1\\1.9\\1_9_3.png');
INSERT INTO `chapterfiles` VALUES ('1', '9', 'chapterfiles\\1\\1.9\\1_9_4.png');
INSERT INTO `chapterfiles` VALUES ('1', '9', 'chapterfiles\\1\\1.9\\1_9_5.png');
INSERT INTO `chapterfiles` VALUES ('1', '9', 'chapterfiles\\1\\1.9\\1_9_6.png');
INSERT INTO `chapterfiles` VALUES ('1', '9', 'chapterfiles\\1\\1.9\\1_9_7.png');

-- ----------------------------
-- Table structure for fillquestions
-- ----------------------------
DROP TABLE IF EXISTS `fillquestions`;
CREATE TABLE `fillquestions` (
  `CHAPTER` int(11) NOT NULL,
  `TYPE` char(20) NOT NULL,
  `NUMBER` int(11) NOT NULL,
  `answer` char(255) DEFAULT NULL,
  PRIMARY KEY (`CHAPTER`,`TYPE`,`NUMBER`),
  CONSTRAINT `fillquestions_ibfk_1` FOREIGN KEY (`CHAPTER`, `TYPE`, `NUMBER`) REFERENCES `questions` (`CHAPTER`, `TYPE`, `NUMBER`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of fillquestions
-- ----------------------------
INSERT INTO `fillquestions` VALUES ('1', '填空题', '1', '标识符');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '2', '大小写');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '3', '字母 下划线 美元符号');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '4', '关键字');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '5', '基本');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '6', 'j2se  j2me  j2ee');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '7', 'java虚拟机  java开发工具');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '8', '布尔类型 boolean');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '9', 'false  true');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '10', 'byte  short  int  long');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '11', '8  16  32  64');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '12', '八  十六');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '13', 'float  double');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '14', '32  64');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '15', '数字 小数点');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '16', '浮点数');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '17', '加法  减法  乘法  除法');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '18', '+');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '19', '%');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '20', '++   --  =');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '21', '前');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '22', 'new .');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '23', 'boolean');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '24', 'true  false');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '25', '大于  小于  等于 大于等于 小于等于  不等于');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '26', '等于 不等于');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '27', '逻辑');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '28', '实际');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '29', '&&  ||  ！');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '30', '逻辑与   逻辑或   逻辑非');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '31', '包  import语句  类  方法  语句');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '32', '逻辑与和逻辑或');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '33', 'path1.path2.path3');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '34', '开始，应用，结束');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '35', '/** */  /* */   //');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '36', 'double');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '37', '简单数据类型   符合数据类型');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '38', 'true');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '39', '0---1   double');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '40', 'true  false');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '41', 'N');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '42', '真');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '43', 'true');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '44', 'false');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '45', 'false  true');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '46', 'boolean');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '47', '二');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '48', '&  |   ^');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '49', '逻辑');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '50', 'false   true');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '51', '1  0');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '52', '1');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '53', '0');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '54', '0   1');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '55', '<<   >>');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '56', '5  7');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '57', '3  -3');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '58', '3  class');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '59', '16');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '60', 'double');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '61', '等于');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '62', '右  左');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '63', '变量');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '64', '变量');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '65', 'main');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '66', '编译字节码');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '67', 'java Application   java Applet');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '69', 'public static void  main (String [] args)');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '70', '自动转换');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '71', '编译、解释、执行');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '72', 'false  true');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '73', '20');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '74', '十进制整数  十六进制  八进制');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '75', 'public');
INSERT INTO `fillquestions` VALUES ('1', '填空题', '76', '第一行');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '1', '顺序结构  选择结构  循环结构');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '2', 'if语句   switch语句');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '3', 'for语句   while语句   do-while语句');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '4', '选择结构');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '5', '循环结构');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '6', '选择语句');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '7', '条件语句  多分支语句');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '8', 'if语句  if-else');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '9', '布尔类型');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '10', 'do-while语句');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '11', 'break语句');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '12', 'continue语句');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '13', 'do-while语句');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '14', '布尔类型');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '15', '常量或变量  关系表达式  逻辑表达式');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '16', '单选   双选   多选');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '17', 'if选择语句  switch选择语句');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '18', '顺序结构');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '19', '循环体  循环条件');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '20', '控制转移');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '21', 'break  continue  return');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '22', '开关语句  循环语句');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '23', '逻辑表达式');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '24', '布尔值');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '25', 'false');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '26', 'while   do-while   for循环');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '27', '多重循环');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '28', '二重循环   三重循环');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '29', '双重循环');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '30', '三重循环');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '31', '双重循环结构');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '32', '多重循环结构');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '33', '多重循环');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '34', '循环体内');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '35', '跳转语句');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '36', 'continue语句');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '37', 'rerurn语句');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '38', '语句');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '39', 'while语句  for语句  空');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '40', '先判断后执行');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '41', '先执行后判断');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '42', '初始化部分    false      true');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '43', 'for循环');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '44', 'goto');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '45', 'continue  break');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '46', 'break outer');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '47', '从上到下');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '48', '选择性语句');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '49', 'for');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '50', '重复');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '51', 'if-else   for    while   do-while   switch');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '52', 'boolean');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '53', '最近');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '54', 'for');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '55', 'while');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '56', 'while');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '57', 'switch');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '58', 'class    （c++）+’	’');
INSERT INTO `fillquestions` VALUES ('2', '填空题', '59', 'class    i');
INSERT INTO `fillquestions` VALUES ('3', '填空题', '1', 'String StringBuffer');
INSERT INTO `fillquestions` VALUES ('3', '填空题', '2', 'true false');
INSERT INTO `fillquestions` VALUES ('3', '填空题', '3', 'true  true');
INSERT INTO `fillquestions` VALUES ('3', '填空题', '4', '-25  4');
INSERT INTO `fillquestions` VALUES ('3', '填空题', '5', 'String  a=\"a\";  String  a =new String(\"a\");');
INSERT INTO `fillquestions` VALUES ('3', '填空题', '6', 'String类  StringBuffer类');
INSERT INTO `fillquestions` VALUES ('3', '填空题', '7', '\"Hello\"   \"Hello word !\"');
INSERT INTO `fillquestions` VALUES ('3', '填空题', '8', '\"hello word\"');
INSERT INTO `fillquestions` VALUES ('3', '填空题', '9', 's1+=s2');
INSERT INTO `fillquestions` VALUES ('3', '填空题', '10', 'sq.equal(s2)');
INSERT INTO `fillquestions` VALUES ('3', '填空题', '11', '\"edcba\"');
INSERT INTO `fillquestions` VALUES ('3', '填空题', '12', '\"acde\"');
INSERT INTO `fillquestions` VALUES ('4', '填空题', '1', '45');
INSERT INTO `fillquestions` VALUES ('4', '填空题', '2', '3');
INSERT INTO `fillquestions` VALUES ('4', '填空题', '3', '4');
INSERT INTO `fillquestions` VALUES ('4', '填空题', '4', 'new  int');
INSERT INTO `fillquestions` VALUES ('4', '填空题', '5', '56');
INSERT INTO `fillquestions` VALUES ('4', '填空题', '6', '5');
INSERT INTO `fillquestions` VALUES ('4', '填空题', '7', '书java');
INSERT INTO `fillquestions` VALUES ('4', '填空题', '8', '69');
INSERT INTO `fillquestions` VALUES ('4', '填空题', '9', '3');
INSERT INTO `fillquestions` VALUES ('4', '填空题', '10', '0');
INSERT INTO `fillquestions` VALUES ('4', '填空题', '13', '4');
INSERT INTO `fillquestions` VALUES ('4', '填空题', '14', 'finaly');
INSERT INTO `fillquestions` VALUES ('4', '填空题', '15', '5');
INSERT INTO `fillquestions` VALUES ('4', '填空题', '16', '0   0');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '1', 'new      类名 对象名=new 构造方法名（）');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '2', 'MyClass obj = new MyClass()');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '3', '封装   继承   多态');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '4', '初始化');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '5', '成员变量    成员方法');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '6', 'static');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '7', 'java.io      java.awt     java.applet');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '8', 'Object');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '9', 'public');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '10', 'private');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '11', '类');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '12', 'class');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '13', '成员变量');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '14', '方法头     方法体');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '15', '名字     类型     返回值');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '16', '方法体');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '17', '修饰符      关键字     类名     花括号');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '18', '对象');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '19', '编辑窗口');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '20', '类');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '21', '成员变量     方法');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '22', '类');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '23', '类   对象');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '24', '实例化类');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '25', '对象的声明     对象的实例化      对象的初始化');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '26', '对象');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '27', '初始化');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '28', '构造方法');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '29', '对象');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '30', '构造方法');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '31', '构造方法');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '32', '类同名');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '33', '包');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '34', '.');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '35', 'public   abstract   final');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '36', '[修饰符] [static][final][transient][volatile]<变量类型><变量名>');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '37', '创建   使用   清除');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '38', '默认  protected    public');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '39', 'Object  java.awt.Panel   java.applet');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '40', '类变量');
INSERT INTO `fillquestions` VALUES ('5', '填空题', '41', '多重');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '1', '参数的个数    、   参数的类型   、  参数的顺序');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '2', '单');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '3', '方法头   ，  方法体');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '4', '封装   、  继承    多态');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '5', 'new');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '6', 'protected   ，  finaly    public');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '7', 'private');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '8', 'new');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '9', 'java.lang.Object');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '10', '类');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '11', '抽象方法');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '12', 'super');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '13', 'import');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '14', 'abstract     final');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '15', '单  多');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '16', 'default');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '17', '属性   方法');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '18', '多个    一     多');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '19', '重载      覆盖');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '20', 'class   implements');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '21', 'implements');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '22', '一些抽象方法和常量');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '23', '使用包名、类名做前缀    使用import语句');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '24', '捕获异常   、  声明异常  、  自定义异常');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '25', 'public    、   static          final   。');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '26', '对象');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '27', 'object');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '28', '一个程序中有多个同名的不同方法');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '29', '隐藏');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '30', '变量');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '31', '参数列表');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '32', '属性     方法');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '33', 'final');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '34', 'final 抽象');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '35', 'methodA()');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '36', '抽象');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '37', '多');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '38', '抽象');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '39', 'extends');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '40', 'final');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '41', 'new');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '42', '参数类型个数');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '43', 'MyClass obj=new obj()');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '44', '常量       抽象方法');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '45', '属性  、  方法');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '46', '一');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '47', '该类本身     、  该类的所有子类');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '48', 'private');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '49', 'abstract');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '50', '简单数据类型');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '51', '除空行     注释行');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '52', '第一个');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '53', '抽象     abstract');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '54', 'public static   final              public abstract');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '55', '抽象方法');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '56', 'static  void  method( )');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '57', 'interface     final      abstract');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '58', 'public');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '59', 'private');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '60', 'public');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '61', '采用不同的形式参数列表');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '62', 'stop( )');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '63', '抽象类   接口');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '64', 'f inal修饰符');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '65', '一');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '66', 'super    this');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '67', '队列');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '68', '线性表');
INSERT INTO `fillquestions` VALUES ('6', '填空题', '69', '双向的链式');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '1', 'FlowLayout、BorderLayout、CardLayout、CridLayout、GridBagLayout');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '2', 'BoxLayout、ScrollPanelLayout、ViewportLayoutr、Overlayout');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '3', 'FlowLayout');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '5', 'KeyEvent');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '6', 'MouseListener、MouseMotionListener、MouseApdapter');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '7', 'MouseListener、MouseMotionListener');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '8', 'JMenuBar、JMenu、JMenuItem');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '9', '创建一个JMenuBer对象并将其加入到JFrame中  创建JMenu对象  创建JMenuIten对象并将33其添加到JMenu对象中    将JMenu对象添加到JMenuBar中');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '10', 'Panel、Swing');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '11', 'JPanel');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '12', 'Swing');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '13', 'FlowLayout');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '14', '复选框、当选按钮、列表、下拉列表、标签、文本编辑区、按钮、菜单');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '15', 'JComponent');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '16', 'GUI');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '17', 'java.awt');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '18', 'Swing');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '19', 'AWT 、Swing、SWT/JFace');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '20', '容器类组件、布局类组件、普通组件类');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '21', 'JOptionPane');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '22', 'JOptionPane');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '23', 'Java');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '24', 'JOptionPane');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '25', 'JDialog');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '26', 'JFileChooser');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '27', 'ProgressMonitor');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '28', '下拉式菜单、弹出式菜单');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '29', '复选框、单选按钮、列表框、组合框');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '30', '非模式（non-modal）、模式（modal）');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '31', '低级事件');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '32', '低级事件、高级事件');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '33', 'AWT');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '34', 'AWT组件');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '35', 'Swing');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '36', 'AWT');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '37', 'Swing');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '38', 'Application、或Frame、主窗口、或Applet、主窗口');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '39', 'lowLayout、BorderLayout、CardLayout、GridLayout');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '40', '框架');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '41', 'AWT、Swing、JFC');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '42', '按钮(Button)、单选按钮(CheckboxGroup)、复选框(Checkbox)、下拉列表框(Choice)、画板（Canvas）、列表框(List)、标签(Label)、文本组件(Textfield和TextArea)、滚动条(Scrollbar)、菜单(Menu)');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '43', '事件');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '44', 'Javax.swing');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '45', 'Window类、panel类、scrollpane类');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '46', 'add()');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '47', 'getIconImage()');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '48', 'setTitle()');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '49', 'setVisible()');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '50', 'getText()');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '51', 'getEchoChar()');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '52', 'Label()');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '53', '3');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '54', 'LEFT、CENTER、RIGHT');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '55', '显示标题');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '56', '修饰符、返回值类型、方法名、方法体');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '57', 'JpasswordField');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '58', 'list');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '59', '标签、状态');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '60', 'Checkbox()');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '61', '组件');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '62', '选中、未选中');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '63', 'Checkbox');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '64', '高度');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '65', '是否允许复选');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '66', 'boolean');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '67', 'Menubar');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '68', 'awt');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '69', '快');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '70', 'setSize()');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '71', 'AbstractButton');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '72', '按钮的图标');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '73', 'String getText()');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '74', 'setEnabled()、是否禁用');
INSERT INTO `fillquestions` VALUES ('7', '填空题', '75', 'isSelected()');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '1', '例外   程序运行   正常执行');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '2', 'throws');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '3', 'try-catch-finally   throw/throws');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '4', 'finally');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '5', '异常处理');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '6', 'Exception');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '7', '抛出异常方法');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '8', 'catch');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '9', '抛弃');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '10', '捕获');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '11', 'public String toString（） public String getMessage（）  public void  printStackTrace（）');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '12', 'NullPointException');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '13', 'catch   catch   finally');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '14', 'Throwable');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '15', 'throw');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '16', 'try    多个');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '17', 'catch');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '18', '多个   catch');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '19', 'finally');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '20', 'finally');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '21', 'Exception');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '22', 'ClassNotFoundException   运行时异常    NullPointException ArithmeticException ClassCastException ArrayIndexOutOfBoundException');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '23', 'Exception      两');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '24', '调用栈');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '25', '抛出');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '26', '参数内容   空值.');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '27', '匹配');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '28', '异常');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '29', 'try-catch-finally');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '30', 'finally');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '31', 'Error   Excetion');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '32', '对象');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '33', '捕获异常');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '34', '抛出');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '35', '异常抛出     异常捕获');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '36', '数组下标越界');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '37', '编译器');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '38', 'ChecKedException');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '39', 'Exception');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '40', 'throws');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '41', 'try、catch、finally、throw   、  throws');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '42', '覆盖');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '43', 'Exception');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '44', '捕获');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '45', 'catch');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '46', '异常  错误');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '47', 'catch');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '48', 'try');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '49', '不同方式');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '50', 'Error  Exception');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '51', 'throws');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '52', 'throws   throws');
INSERT INTO `fillquestions` VALUES ('8', '填空题', '53', 'throws');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '1', 'File， java.io');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '2', '文本文件操作   流文件');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '3', 'FileReader   FileWriter');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '4', 'BufferReader  java.io');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '5', 'FileInputStream  java.io');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '6', 'read()');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '7', '字符串  Boolean');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '8', '文件  boolean,  不为空');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '9', 'FileReader  FileWriter   java.io');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '10', '目录');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '11', '目录名');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '12', '文件对象  String name  父路径字符串');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '13', 'FileInputStream  FileOutputStream');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '14', 'write()');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '15', '顺序  RandomAccessFile');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '16', 'DataInput接口和DataOutPut接口.');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '17', '顺序存取  随机存取');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '18', '输入流');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '19', 'DataOutputStream  FileInputStream');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '20', 'java.lang.Object   RandomAccessFile   数据输出');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '21', '对象  parent  child  路径');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '22', 'InputStream   Reader   BufferedReader');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '23', 'FileInputStream  FileOutStream');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '24', 'DataInput  DataOutput');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '25', 'InputStream   System.in.read()');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '26', '字节流    字符流');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '27', 'System.in');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '28', 'read()');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '29', '文件文件操作  流文件');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '30', 'new FileReader(File)');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '31', 'byte[]array  byte[]array  int length  输入流   int   字节数   off  off');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '32', '数组');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '33', 'FileInputStream  FileOutStream');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '34', '相对  绝对  绝对  相对');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '35', 'InputStream   Reader   BufferedReader');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '36', 'OutputStream、 Writers   字节流   字符');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '37', 'print    读写  字符流');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '38', '数据交流');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '39', 'Object类   输入  输出流');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '40', '子类  8位字节  字节');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '41', 'FileInputStream  FileOutStream');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '42', 'InputStream  OutputStream');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '43', 'DataInput  DataOutput');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '44', 'System.in   System.out');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '45', 'FilterOutputStream');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '46', '抽象');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '47', '输出流');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '48', 'File  java.io');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '49', 'FileReader  FileWriter');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '50', 'BufferReader  java.io');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '51', 'FileInputStream  java.io');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '52', 'read()');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '53', 'InputStream  OutputStream');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '54', '顺序存取  随机存取');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '55', 'in  out  err');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '56', '字节  字符');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '57', 'ObjectInput  ObjectOutput');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '58', 'String   InputStream');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '59', 'InputStream  System.in.read()');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '60', 'PrintStream  FilterOutputStream');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '61', '8位  字节  16  字符');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '62', '输入字符流');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '63', 'File、RandomAccessFile、FileInputStream、FileOutStream');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '64', '输入流');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '65', 'DataOutputStream  FileInputStream');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '66', 'java.lang.Object  RandomAccessFile  数据输出');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '67', '字节   int');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '68', 'int   写入  字符串');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '69', '序列化   序列化');
INSERT INTO `fillquestions` VALUES ('9', '填空题', '70', 'String  write（int）');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '1', '健状的   多线程');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '2', 'run()');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '3', 'Thread   Runnable');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '4', '10    1');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '5', 'synchronized  、 wait()  、 notify()');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '6', 'init()  、 start()  、 paint()  、 stop()    destroy()');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '7', '并发');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '8', '线程');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '9', '线程不安全性');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '10', '死锁');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '11', 'finally');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '12', '死锁    、优先级倒置   、饥饿');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '13', '数据竞争');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '14', 'sleep（）');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '15', 'synchronized');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '16', '抢先式调度');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '17', 'false');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '18', '线程 代码');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '19', '对象流');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '20', '对象串行化');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '21', '事件源');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '22', 'Thread');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '23', 'main');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '24', 'loadpicture');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '25', 'sleep（）');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '26', 'java.lang.Tnread');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '27', '可运行');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '28', '运行状态');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '29', 'yield()');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '30', 'run()');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '31', 'Thread');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '32', 'wait（） notify（）');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '33', '数据');
INSERT INTO `fillquestions` VALUES ('10', '填空题', '34', 'run (）');
INSERT INTO `fillquestions` VALUES ('11', '填空题', '1', 'msbase.jar ，mssqlserver.jar ，msutil.jar');
INSERT INTO `fillquestions` VALUES ('11', '填空题', '2', 'next()');
INSERT INTO `fillquestions` VALUES ('11', '填空题', '3', 'Statement');
INSERT INTO `fillquestions` VALUES ('11', '填空题', '4', 'jdbc:microsoft:sqlserver');
INSERT INTO `fillquestions` VALUES ('11', '填空题', '5', 'java.sql');
INSERT INTO `fillquestions` VALUES ('11', '填空题', '6', '127.0.0.1，localhost');
INSERT INTO `fillquestions` VALUES ('11', '填空题', '7', 'absolute(int row)');
INSERT INTO `fillquestions` VALUES ('11', '填空题', '8', 'first()');
INSERT INTO `fillquestions` VALUES ('11', '填空题', '9', 'getRow()');

-- ----------------------------
-- Table structure for judgequestions
-- ----------------------------
DROP TABLE IF EXISTS `judgequestions`;
CREATE TABLE `judgequestions` (
  `CHAPTER` int(11) NOT NULL,
  `TYPE` char(20) NOT NULL,
  `NUMBER` int(11) NOT NULL,
  `answer` char(2) DEFAULT NULL,
  PRIMARY KEY (`CHAPTER`,`TYPE`,`NUMBER`),
  CONSTRAINT `judgequestions_ibfk_1` FOREIGN KEY (`CHAPTER`, `TYPE`, `NUMBER`) REFERENCES `questions` (`CHAPTER`, `TYPE`, `NUMBER`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of judgequestions
-- ----------------------------
INSERT INTO `judgequestions` VALUES ('1', '判断题', '1', 'F');
INSERT INTO `judgequestions` VALUES ('1', '判断题', '2', 'F');
INSERT INTO `judgequestions` VALUES ('1', '判断题', '3', 'F');
INSERT INTO `judgequestions` VALUES ('1', '判断题', '4', 'T');
INSERT INTO `judgequestions` VALUES ('1', '判断题', '5', 'T');
INSERT INTO `judgequestions` VALUES ('1', '判断题', '6', 'F');
INSERT INTO `judgequestions` VALUES ('1', '判断题', '7', 'F');
INSERT INTO `judgequestions` VALUES ('1', '判断题', '8', 'F');
INSERT INTO `judgequestions` VALUES ('1', '判断题', '9', 'F');
INSERT INTO `judgequestions` VALUES ('1', '判断题', '10', 'T');
INSERT INTO `judgequestions` VALUES ('1', '判断题', '11', 'F');
INSERT INTO `judgequestions` VALUES ('1', '判断题', '12', 'F');
INSERT INTO `judgequestions` VALUES ('1', '判断题', '13', 'F');
INSERT INTO `judgequestions` VALUES ('1', '判断题', '14', 'F');
INSERT INTO `judgequestions` VALUES ('1', '判断题', '15', 'F');
INSERT INTO `judgequestions` VALUES ('1', '判断题', '16', 'F');
INSERT INTO `judgequestions` VALUES ('1', '判断题', '17', 'F');
INSERT INTO `judgequestions` VALUES ('1', '判断题', '18', 'T');
INSERT INTO `judgequestions` VALUES ('1', '判断题', '19', 'T');
INSERT INTO `judgequestions` VALUES ('1', '判断题', '20', 'T');
INSERT INTO `judgequestions` VALUES ('2', '判断题', '1', 'T');
INSERT INTO `judgequestions` VALUES ('2', '判断题', '2', 'F');
INSERT INTO `judgequestions` VALUES ('2', '判断题', '3', 'T');
INSERT INTO `judgequestions` VALUES ('2', '判断题', '4', 'T');
INSERT INTO `judgequestions` VALUES ('2', '判断题', '5', 'T');
INSERT INTO `judgequestions` VALUES ('2', '判断题', '6', 'F');
INSERT INTO `judgequestions` VALUES ('2', '判断题', '7', 'T');
INSERT INTO `judgequestions` VALUES ('2', '判断题', '8', 'F');
INSERT INTO `judgequestions` VALUES ('2', '判断题', '9', 'T');
INSERT INTO `judgequestions` VALUES ('2', '判断题', '10', 'F');
INSERT INTO `judgequestions` VALUES ('2', '判断题', '11', 'F');
INSERT INTO `judgequestions` VALUES ('2', '判断题', '12', 'F');
INSERT INTO `judgequestions` VALUES ('2', '判断题', '13', 'T');
INSERT INTO `judgequestions` VALUES ('2', '判断题', '14', 'F');
INSERT INTO `judgequestions` VALUES ('2', '判断题', '15', 'T');
INSERT INTO `judgequestions` VALUES ('2', '判断题', '16', 'T');
INSERT INTO `judgequestions` VALUES ('2', '判断题', '17', 'F');
INSERT INTO `judgequestions` VALUES ('2', '判断题', '18', 'T');
INSERT INTO `judgequestions` VALUES ('2', '判断题', '19', 'F');
INSERT INTO `judgequestions` VALUES ('2', '判断题', '20', 'F');
INSERT INTO `judgequestions` VALUES ('2', '判断题', '21', 'F');
INSERT INTO `judgequestions` VALUES ('2', '判断题', '22', 'F');
INSERT INTO `judgequestions` VALUES ('2', '判断题', '23', 'F');
INSERT INTO `judgequestions` VALUES ('2', '判断题', '24', 'F');
INSERT INTO `judgequestions` VALUES ('2', '判断题', '25', 'T');
INSERT INTO `judgequestions` VALUES ('3', '判断题', '1', 'F');
INSERT INTO `judgequestions` VALUES ('3', '判断题', '2', 'T');
INSERT INTO `judgequestions` VALUES ('3', '判断题', '3', 'F');
INSERT INTO `judgequestions` VALUES ('3', '判断题', '4', 'F');
INSERT INTO `judgequestions` VALUES ('3', '判断题', '5', 'T');
INSERT INTO `judgequestions` VALUES ('3', '判断题', '6', 'F');
INSERT INTO `judgequestions` VALUES ('3', '判断题', '7', 'F');
INSERT INTO `judgequestions` VALUES ('3', '判断题', '8', 'F');
INSERT INTO `judgequestions` VALUES ('3', '判断题', '9', 'T');
INSERT INTO `judgequestions` VALUES ('3', '判断题', '10', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '1', 'T');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '2', 'T');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '3', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '4', 'T');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '5', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '6', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '7', 'T');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '8', 'T');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '9', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '10', 'T');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '11', 'T');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '12', 'T');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '13', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '14', 'T');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '15', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '16', 'T');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '17', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '18', 'T');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '19', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '20', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '21', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '22', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '23', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '24', 'T');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '25', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '26', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '27', 'T');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '28', 'T');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '29', 'T');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '30', 'T');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '31', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '32', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '33', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '34', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '35', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '36', 'T');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '37', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '38', 'T');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '39', 'T');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '40', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '41', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '42', 'T');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '43', 'T');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '44', 'T');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '45', 'T');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '46', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '47', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '48', 'T');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '49', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '50', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '51', 'T');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '52', 'T');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '53', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '54', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '55', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '56', 'F');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '57', 'T');
INSERT INTO `judgequestions` VALUES ('4', '判断题', '58', 'T');
INSERT INTO `judgequestions` VALUES ('5', '判断题', '1', 'F');
INSERT INTO `judgequestions` VALUES ('5', '判断题', '2', 'F');
INSERT INTO `judgequestions` VALUES ('5', '判断题', '3', 'F');
INSERT INTO `judgequestions` VALUES ('5', '判断题', '4', 'F');
INSERT INTO `judgequestions` VALUES ('5', '判断题', '5', 'T');
INSERT INTO `judgequestions` VALUES ('5', '判断题', '6', 'T');
INSERT INTO `judgequestions` VALUES ('5', '判断题', '7', 'F');
INSERT INTO `judgequestions` VALUES ('5', '判断题', '8', 'F');
INSERT INTO `judgequestions` VALUES ('5', '判断题', '9', 'F');
INSERT INTO `judgequestions` VALUES ('5', '判断题', '10', 'F');
INSERT INTO `judgequestions` VALUES ('5', '判断题', '11', 'F');
INSERT INTO `judgequestions` VALUES ('5', '判断题', '12', 'F');
INSERT INTO `judgequestions` VALUES ('5', '判断题', '13', 'F');
INSERT INTO `judgequestions` VALUES ('5', '判断题', '14', 'T');
INSERT INTO `judgequestions` VALUES ('5', '判断题', '15', 'F');
INSERT INTO `judgequestions` VALUES ('5', '判断题', '16', 'F');
INSERT INTO `judgequestions` VALUES ('5', '判断题', '17', 'F');
INSERT INTO `judgequestions` VALUES ('5', '判断题', '18', 'F');
INSERT INTO `judgequestions` VALUES ('5', '判断题', '19', 'F');
INSERT INTO `judgequestions` VALUES ('5', '判断题', '20', 'T');
INSERT INTO `judgequestions` VALUES ('5', '判断题', '21', 'T');
INSERT INTO `judgequestions` VALUES ('5', '判断题', '22', 'F');
INSERT INTO `judgequestions` VALUES ('5', '判断题', '23', 'F');
INSERT INTO `judgequestions` VALUES ('5', '判断题', '24', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '1', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '2', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '3', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '4', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '5', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '6', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '7', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '8', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '9', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '10', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '11', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '12', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '13', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '14', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '15', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '16', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '17', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '18', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '19', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '20', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '21', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '22', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '23', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '24', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '25', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '26', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '27', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '28', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '29', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '30', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '31', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '32', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '33', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '34', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '35', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '36', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '37', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '38', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '39', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '40', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '41', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '42', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '43', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '44', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '45', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '46', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '47', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '48', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '49', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '50', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '51', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '52', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '53', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '54', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '55', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '56', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '57', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '58', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '59', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '60', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '61', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '62', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '63', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '64', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '65', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '66', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '67', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '68', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '69', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '70', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '71', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '72', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '73', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '74', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '75', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '76', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '77', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '78', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '79', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '80', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '81', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '82', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '83', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '84', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '85', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '86', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '87', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '88', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '89', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '90', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '91', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '92', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '93', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '94', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '95', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '96', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '97', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '98', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '99', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '100', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '101', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '102', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '103', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '104', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '105', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '106', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '107', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '108', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '109', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '110', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '111', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '112', 'F');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '113', 'T');
INSERT INTO `judgequestions` VALUES ('6', '判断题', '114', 'F');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '1', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '2', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '3', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '4', 'F');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '5', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '6', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '7', 'F');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '8', 'F');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '9', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '10', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '11', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '12', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '13', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '14', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '15', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '16', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '17', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '18', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '19', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '20', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '21', 'F');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '22', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '23', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '24', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '25', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '26', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '27', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '28', 'F');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '29', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '30', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '31', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '32', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '33', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '34', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '35', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '36', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '37', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '38', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '39', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '40', 'T');
INSERT INTO `judgequestions` VALUES ('7', '判断题', '41', 'T');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '1', 'T');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '2', 'T');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '3', 'T');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '4', 'F');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '5', 'T');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '6', 'T');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '7', 'F');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '8', 'F');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '9', 'F');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '10', 'F');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '11', 'T');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '12', 'F');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '13', 'F');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '14', 'F');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '15', 'T');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '16', 'T');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '17', 'F');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '18', 'T');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '19', 'F');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '20', 'F');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '21', 'T');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '22', 'T');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '23', 'T');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '24', 'T');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '25', 'F');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '26', 'T');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '27', 'T');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '28', 'T');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '29', 'F');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '30', 'F');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '31', 'T');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '32', 'F');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '33', 'T');
INSERT INTO `judgequestions` VALUES ('8', '判断题', '34', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '1', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '2', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '3', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '4', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '5', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '6', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '7', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '8', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '9', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '10', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '11', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '12', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '13', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '14', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '15', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '16', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '17', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '18', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '19', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '20', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '21', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '22', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '23', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '24', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '25', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '26', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '27', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '28', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '29', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '30', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '31', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '32', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '33', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '34', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '35', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '36', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '37', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '38', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '39', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '40', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '41', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '42', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '43', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '44', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '45', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '46', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '47', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '48', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '49', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '50', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '51', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '52', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '53', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '54', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '55', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '56', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '57', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '58', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '59', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '60', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '61', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '62', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '63', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '64', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '65', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '66', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '67', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '68', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '69', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '70', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '71', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '72', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '73', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '74', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '75', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '76', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '77', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '78', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '79', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '80', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '81', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '82', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '83', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '84', 'F');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '85', 'T');
INSERT INTO `judgequestions` VALUES ('9', '判断题', '86', 'T');
INSERT INTO `judgequestions` VALUES ('10', '判断题', '1', 'T');
INSERT INTO `judgequestions` VALUES ('10', '判断题', '2', 'T');
INSERT INTO `judgequestions` VALUES ('10', '判断题', '3', 'T');
INSERT INTO `judgequestions` VALUES ('10', '判断题', '4', 'T');
INSERT INTO `judgequestions` VALUES ('10', '判断题', '5', 'T');
INSERT INTO `judgequestions` VALUES ('10', '判断题', '6', 'T');
INSERT INTO `judgequestions` VALUES ('10', '判断题', '7', 'F');
INSERT INTO `judgequestions` VALUES ('10', '判断题', '8', 'F');
INSERT INTO `judgequestions` VALUES ('10', '判断题', '9', 'F');
INSERT INTO `judgequestions` VALUES ('10', '判断题', '10', 'T');
INSERT INTO `judgequestions` VALUES ('10', '判断题', '11', 'T');
INSERT INTO `judgequestions` VALUES ('10', '判断题', '12', 'F');
INSERT INTO `judgequestions` VALUES ('10', '判断题', '13', 'T');
INSERT INTO `judgequestions` VALUES ('10', '判断题', '14', 'T');
INSERT INTO `judgequestions` VALUES ('10', '判断题', '15', 'F');
INSERT INTO `judgequestions` VALUES ('10', '判断题', '16', 'F');
INSERT INTO `judgequestions` VALUES ('10', '判断题', '17', 'F');
INSERT INTO `judgequestions` VALUES ('10', '判断题', '18', 'T');
INSERT INTO `judgequestions` VALUES ('10', '判断题', '19', 'F');
INSERT INTO `judgequestions` VALUES ('10', '判断题', '20', 'F');
INSERT INTO `judgequestions` VALUES ('11', '判断题', '1', 'T');
INSERT INTO `judgequestions` VALUES ('11', '判断题', '2', 'F');
INSERT INTO `judgequestions` VALUES ('11', '判断题', '3', 'F');
INSERT INTO `judgequestions` VALUES ('11', '判断题', '4', 'F');
INSERT INTO `judgequestions` VALUES ('11', '判断题', '5', 'F');
INSERT INTO `judgequestions` VALUES ('11', '判断题', '6', 'T');
INSERT INTO `judgequestions` VALUES ('11', '判断题', '7', 'F');
INSERT INTO `judgequestions` VALUES ('11', '判断题', '8', 'T');
INSERT INTO `judgequestions` VALUES ('11', '判断题', '9', 'T');

-- ----------------------------
-- Table structure for knowledge
-- ----------------------------
DROP TABLE IF EXISTS `knowledge`;
CREATE TABLE `knowledge` (
  `CHAPTER` int(11) NOT NULL,
  `SUBCHAPTER` int(11) NOT NULL,
  `CHAPTERNAME` char(40) NOT NULL,
  `SUBCHAPTERNAME` char(90) NOT NULL,
  PRIMARY KEY (`CHAPTER`,`SUBCHAPTER`),
  KEY `CHAPTER` (`CHAPTER`),
  KEY `SUBCHAPTER` (`SUBCHAPTER`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of knowledge
-- ----------------------------
INSERT INTO `knowledge` VALUES ('1', '1', '概述', 'Java语言简介');
INSERT INTO `knowledge` VALUES ('1', '2', '概述', 'Java语言的运行机制');
INSERT INTO `knowledge` VALUES ('1', '3', '概述', 'Java开发运行环境JDK');
INSERT INTO `knowledge` VALUES ('1', '4', '概述', '两种Java程序');
INSERT INTO `knowledge` VALUES ('1', '5', '概述', '标识符');
INSERT INTO `knowledge` VALUES ('1', '6', '概述', '变量和常量');
INSERT INTO `knowledge` VALUES ('1', '7', '概述', '基本数据类型');
INSERT INTO `knowledge` VALUES ('1', '8', '概述', '赋值语句');
INSERT INTO `knowledge` VALUES ('1', '9', '概述', '运算符和表达式');
INSERT INTO `knowledge` VALUES ('2', '1', '控制结构', '分支语句');
INSERT INTO `knowledge` VALUES ('2', '2', '控制结构', '循环语句');
INSERT INTO `knowledge` VALUES ('2', '3', '控制结构', 'break语句和continue语句');
INSERT INTO `knowledge` VALUES ('3', '1', '字符串', '字符串');
INSERT INTO `knowledge` VALUES ('4', '1', '数组', '一维数组');
INSERT INTO `knowledge` VALUES ('4', '2', '数组', '二维数组');
INSERT INTO `knowledge` VALUES ('4', '3', '数组', '不规则的二维数组');
INSERT INTO `knowledge` VALUES ('5', '1', '面向对象程序设计', '面向对象程序设计的基本概念');
INSERT INTO `knowledge` VALUES ('5', '2', '面向对象程序设计', '类');
INSERT INTO `knowledge` VALUES ('5', '3', '面向对象程序设计', '对象');
INSERT INTO `knowledge` VALUES ('5', '4', '面向对象程序设计', '包');
INSERT INTO `knowledge` VALUES ('5', '5', '面向对象程序设计', '内部类');
INSERT INTO `knowledge` VALUES ('5', '6', '面向对象程序设计', '类的封装性');
INSERT INTO `knowledge` VALUES ('5', '7', '面向对象程序设计', '设计举例');
INSERT INTO `knowledge` VALUES ('6', '1', '类与继承', '面向对象的基本概念：继承');
INSERT INTO `knowledge` VALUES ('6', '2', '类与继承', '继承');
INSERT INTO `knowledge` VALUES ('6', '3', '类与继承', '抽象类和最终类');
INSERT INTO `knowledge` VALUES ('6', '4', '类与继承', '接口');
INSERT INTO `knowledge` VALUES ('7', '1', '图形用户界面', '图形用户界面和AWT');
INSERT INTO `knowledge` VALUES ('7', '2', '图形用户界面', 'Component（组件）类及其子类');
INSERT INTO `knowledge` VALUES ('7', '3', '图形用户界面', 'MenuComponent（菜单组件）类及其子类');
INSERT INTO `knowledge` VALUES ('7', '4', '图形用户界面', 'AWT');
INSERT INTO `knowledge` VALUES ('7', '5', '图形用户界面', '中的绘图方法和常用类');
INSERT INTO `knowledge` VALUES ('7', '6', '图形用户界面', '布局管理器');
INSERT INTO `knowledge` VALUES ('7', '7', '图形用户界面', 'Java的事件处理');
INSERT INTO `knowledge` VALUES ('7', '8', '图形用户界面', '设计举例');
INSERT INTO `knowledge` VALUES ('8', '1', '异常处理', '异常和异常处理的两种方法');
INSERT INTO `knowledge` VALUES ('8', '2', '异常处理', 'Java的异常类');
INSERT INTO `knowledge` VALUES ('8', '3', '异常处理', 'Java的异常处理方法');
INSERT INTO `knowledge` VALUES ('8', '4', '异常处理', '异常的抛出和处理');
INSERT INTO `knowledge` VALUES ('8', '5', '异常处理', '自定义的异常类');
INSERT INTO `knowledge` VALUES ('9', '1', '输入/输出流', '数据流的概念');
INSERT INTO `knowledge` VALUES ('9', '2', '输入/输出流', '基本输入/输出类');
INSERT INTO `knowledge` VALUES ('9', '3', '输入/输出流', '对象流');
INSERT INTO `knowledge` VALUES ('9', '4', '输入/输出流', '文件的操作');
INSERT INTO `knowledge` VALUES ('10', '1', '多线程', '线程的基本概念');
INSERT INTO `knowledge` VALUES ('10', '2', '多线程', 'Thread（线程）类和Runnable（可运行）接口');
INSERT INTO `knowledge` VALUES ('10', '3', '多线程', '线程的状态和状态控制');
INSERT INTO `knowledge` VALUES ('10', '4', '多线程', '线程间的互斥');
INSERT INTO `knowledge` VALUES ('10', '5', '多线程', '线程间的同步');
INSERT INTO `knowledge` VALUES ('10', '6', '多线程', '综合应用举例');
INSERT INTO `knowledge` VALUES ('11', '1', '数据库应用', 'JDBC和SQL简介');
INSERT INTO `knowledge` VALUES ('11', '2', '数据库应用', '建立应用程序和数据库连接的环境配置');
INSERT INTO `knowledge` VALUES ('11', '3', '数据库应用', '数据库应用编程');

-- ----------------------------
-- Table structure for programquestions
-- ----------------------------
DROP TABLE IF EXISTS `programquestions`;
CREATE TABLE `programquestions` (
  `CHAPTER` int(11) NOT NULL,
  `TYPE` char(20) NOT NULL,
  `NUMBER` int(11) NOT NULL,
  `answer` text NOT NULL,
  PRIMARY KEY (`CHAPTER`,`TYPE`,`NUMBER`),
  CONSTRAINT `programquestions_ibfk_1` FOREIGN KEY (`CHAPTER`, `TYPE`, `NUMBER`) REFERENCES `questions` (`CHAPTER`, `TYPE`, `NUMBER`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of programquestions
-- ----------------------------
INSERT INTO `programquestions` VALUES ('2', '编程题', '1', 'public class IfAndElse\n{ \n    public static void main(String args[])\n    { \n        int x,y;\n        x=6;\n        if(x<0) y=0; \n        else  y=2*x+1;\n        System.out.print(“F(x)=”+y);\n     }  \n}');
INSERT INTO `programquestions` VALUES ('2', '编程题', '2', 'import java.io.*;\npublic class Question15 {\n	public static void main(String args[])throws IOException{\n		int x,y;\n		String str;\n		BufferedReader br;\n		br = new BufferedReader(new InputStreamReader(System.in));\n		System.out.print(\"Input one integer numbers(x): \");\n		str = br.readLine();\n		x = Integer.parseint(str);\n		if(x>0) \n		        y = x+3; else if (x==0) \n		             y = 0; else \n		             y = x * x-1;\n		System.out.println(\"y = \" + y);\n	}\n}');
INSERT INTO `programquestions` VALUES ('2', '编程题', '3', 'public class Score\n{ \npublic static void main(String args[]){ int score,temp; score =88; if(score==100) temp=9; else  temp=9; switch (temp){ case 0:case 1:case 2:case 3:case 4:case 5: System.out.print(“不及格”); break; case 6: System.out.print(“及格”); break; case 7: case 8: System.out.print(“良好”); break; case 9: System.out.print(“优秀”); break; default: System.out.print(“成绩输入错误”); break;   }  }  }');
INSERT INTO `programquestions` VALUES ('2', '编程题', '4', 'public class ForExample {\n	public static void main (String args[]) {\n		int n,num1,num2;\n		System.out.println(\"在1~1000可被3与7整除的数为：\");\n		for (n=1;n<=1000;n++) {\n			num1 =n%3;\n			num2=n%7;\n			if (num1==0) {\n				if (num2==0) System.out.print(n+\" \");\n			}\n		}\n		System.out.println(\" \");\n	}\n}');
INSERT INTO `programquestions` VALUES ('2', '编程题', '5', 'public class Prime{ public static void main(String args[]) { int i,n; int k=0; float f=1.0; for(n=1;n<=100;n++){ for(i=2;i<N;I++){ if(n%i==0)break; } if(i==n) { System.out.print(n+\" \"); k++; if(k%5==0) System.out.println(); } } } }');
INSERT INTO `programquestions` VALUES ('2', '编程题', '6', 'import java.io.*; public class IfElse  { public static void main(String args[]) throws IOException { int month = 4; // April String season; String str; BufferedReader buf; buf=new BufferedReader(new InputStreamReader(System.in)); System.out.print(\"输入月份:\"); str=buf.readLine();\r\nmonth=Integer.parseInt(str);  if(month == 12 || month == 1 || month == 2) season = \"Winter\"; else if(month == 3 || month == 4 || month == 5) season = \"Spring\"; else if(month == 6 || month == 7 || month == 8) season = \"Summer\"; else if(month == 9 || month == 10 || month == 11) season = \"Autumn\"; else season = \"Bogus Month\"; System.out.println(\"你输入的月份是 \" + season + \".\"); } }');
INSERT INTO `programquestions` VALUES ('2', '编程题', '7', 'import java.lang.Double; public class HuiKuan { public static void main(String args[]) { double remittance, result; if(args.length != 1) //处理参数数目不正确情况 { System.out.println(\"Please Input a number!\"); return; } remittance = Double.parseDouble(args[0]); if (remittance < 0) { System.out.println(\"Please Input a positive number!\"); return; } if (remittance < 100) { result = 1.0; } else if (remittance > 5000) { result = 50.0; } else { result = remittance / 100.0; } System.out.println(\"remittance=\" + remittance + \" result=\" + result); }  }');
INSERT INTO `programquestions` VALUES ('2', '编程题', '8', 'public class Text {  public static void main(String args[]) { int n; boolean result; if(args.length != 1) //处理参数数目不正确情况 { System.out.println(\"Please Input a number!\"); return; } n = Integer.parseInt(args[0]); if (n < 0) { System.out.println(\"Illegal Year!\");\r\nreturn; } if ((n % 100) ==0) { if ((n % 400) ==0) result = true; else result = false; } else { if ((n % 4) ==0) result = true; else result = false; } System.out.println(\"Year:\" + n + \" \" + result); } }');
INSERT INTO `programquestions` VALUES ('2', '编程题', '9', 'public class Text { public static void main(String args[]) { int n, result, i, temp; if(args.length != 1) //处理参数数目不正确情况 { System.out.println(\"Please Input a number!\"); return; } if (args[0].length() != 4) { System.out.println(\"Illegal number!\"); return; }  n = Integer.parseInt(args[0]); if (n < 0) { System.out.println(\"Illegal number!\"); return; } result = 0; for (i = 1; i <= 4; i++) { switch (i) { case 1: { temp = n /1000; //获得千位数 result += temp; //转成个位数 break; } case 2: { temp = (n % 1000) / 100; //获得百位数 result += 10 * temp; //转成十位数 break; } case 3: { temp = (n % 100) /10; //获得十位数 result += 100 * temp; //转成百位数 break; } case 4: { temp = (n % 10); //获得个位数 result += 1000 * temp; //转成千位数 break; }\r\ndefault:break; } }  System.out.println( n + \" --> \" + result); }  }');
INSERT INTO `programquestions` VALUES ('2', '编程题', '10', 'public class BaseText {\r\n    public static void main(String[] args) { \r\n        if(args != null && args.length == 2)    { \r\n             \r\n            try { \r\n                double num1 = Double.parseDouble(args[0]); \r\n                double num2 = Double.parseDouble(args[1]); \r\n                 \r\n                System.out.println(\"得到的乘积是:\"+num1*num2); \r\n            } catch (NumberFormatException e) { \r\n                e.printStackTrace(); \r\n            } \r\n             \r\n        }else { \r\n            System.out.println(\"你输入的数据不正确,输入数据的格式样例为:12.3 4\"); \r\n        } \r\n    } \r\n}');
INSERT INTO `programquestions` VALUES ('2', '编程题', '11', 'public class BaseText {\r\n    public static void main(String[] args) { \r\n            if(args != null && args.length == 1  )    { \r\n            try { \r\n                double num = Double.parseDouble(args[0]); \r\n                 \r\n                int intValue = (int)num; \r\n                 \r\n                    switch (intValue) { \r\n                    case 1: \r\n                        System.out.println(\"今天是星期一\"); \r\n                        break; \r\n                    case 2: \r\n                        System.out.println(\"今天是星期二\"); \r\n                        break; \r\n                    case 3: \r\n                        System.out.println(\"今天是星期三\"); \r\n                        break; \r\n                    case 4: \r\n                        System.out.println(\"今天是星期四\"); \r\n                        break; \r\n                    case 5: \r\n                        System.out.println(\"今天是星期五\"); \r\n                        break; \r\n                    case 6: \r\n                        System.out.println(\"今天是星期六\"); \r\n                        break; \r\n                    case 7: \r\n                        System.out.println(\"今天是星期天\"); \r\n                        break; \r\n                    default: \r\n                        args = null; \r\n                        System.out.println(\"请重新输入\"); \r\n                        break; \r\n                    } \r\n            } catch (NumberFormatException e) { \r\n                e.printStackTrace(); \r\n            } \r\n                 \r\n            }else { \r\n                System.out.println(\"你输入的数据不合法\"); \r\n            }             \r\n    } \r\n}');
INSERT INTO `programquestions` VALUES ('2', '编程题', '12', 'import java.io.*;\npublic class MaxDemo{\n	public static void main(String []asd){\n		int i =1,j=2,k=3;\n		int max;\n		System.out.println(“这三个数是、”);\n		System.out.println(i+“ ”+j+” ”+k+” ”);\n		max = i;\n		if(j>max)max = j;\n		if(k> max)max = k;\n		System.out.println(“最大数为、”+max);\n	}\n}');
INSERT INTO `programquestions` VALUES ('2', '编程题', '13', 'public class Lesson1{\n	public static void main(String []as){\n		int n =0;\n		//初始化 \n		int t=0;\n		do{\n			n++;\n			t=t+n;\n		}\n		while(t<=10000);\n		System.out.println(“由于、1+……+n”+n+”=”+t+”n 故、需、”+n+”个连续的自然数相加，其和才会超过1000.”);\n	}\n}');
INSERT INTO `programquestions` VALUES ('2', '编程题', '14', 'public class test1{\n	public static void main(String []as){\n		for (int i=0;i<4;i++){\n			for (int j=0;j<12;j++){\n				Sysrem.out.print(“*”);\n			}\n			System.out.println();\n		}\n	}\n}');
INSERT INTO `programquestions` VALUES ('2', '编程题', '15', 'public class test2{\n	public static void main(String []as){\n		for (int i=0;i<5;i++){\n			for (int j=0;j<=i;j++){\n				System.out.print(“*”);\n			}\n			System.out.println();\n		}\n	}');
INSERT INTO `programquestions` VALUES ('2', '编程题', '16', 'public class lianxi1 {\r\n  public static void main(String []ads){ \r\n   int grade=97; \r\n   if(grade>=90) \r\n   System.out.println(\"A\"); \r\n   else if(grade>=80) \r\n   System.out.println(\"B\"); \r\n   else if(grade>=70) \r\n   System.out.println(\"C\"); \r\n   else if(grade>=60) \r\n   System.out.println(\"D\"); \r\n   else if(grade<60) \r\n   System.out.println(\"E\"); \r\n \r\n  } \r\n}');
INSERT INTO `programquestions` VALUES ('2', '编程题', '17', 'public class ZhiShu { public static void main(String args[]) { int i, j, result; boolean found; for (i = 200; ; i++) { found = true; for (j = 2; j < i; j++) { if ((i % j) ==0) { found = false; break; } } if (!found) continue; else { result = i; break; } } System.out.print(\"The minimum prime number \"); System.out.println(\"great than 200 is : \" + result); }  }');
INSERT INTO `programquestions` VALUES ('2', '编程题', '18', 'public class IfElseTest {\r\n public static void main(String[] args) { \r\n      int a=3; \r\n      if(a==1) \r\n          System.out.println(\"进行加法运算\"); \r\n      else if(a==2) \r\n          System.out.println(\"进行减法运算\"); \r\n      else if(a==3) \r\n          System.out.println(\"进行乘法运算\"); \r\n      else \r\n          System.out.println(\"进行除法运算\"); \r\n } \r\n}');
INSERT INTO `programquestions` VALUES ('2', '编程题', '19', 'import java.io.BufferedInputStream;\nimport java.io.IOException;\npublic class TT {\n	public static void main(String[] args) {\n		int water = 15;\n		int i = 0;\n		while (water < 50) {\n			water += 5;\n			i++;\n		}\n		System.out.println(\"和尚共挑了\"+i+\"次水\");\n	}\n}');
INSERT INTO `programquestions` VALUES ('2', '编程题', '20', '[TestWhile.java]\r\n           class TestWhile{ \r\n              public static void main(String[] args){ \r\n                  int sum = 0, num = 1; \r\n                  while(num<=100){ \r\n                      sum += num; \r\n                      num ++; \r\n                  } \r\n                  System.out.println(\"sum: \" + sum); \r\n              } \r\n           } \r\n [TestDoWhile.java] \r\n        class TestDoWhile{ \r\n            public static void main(String[] args){ \r\n                int sum=0,num=1; \r\n                do{ \r\n                    sum += num; \r\n                    num ++; \r\n                }while(num<=100);              //while后的分号不可缺 \r\n                System.out.println(\"sum: \" + sum); \r\n            } \r\n        } \r\n [TestFor.java] \r\n           class TestFor{ \r\n              public static void main(String[] args){ \r\n                   int sum,num; \r\n                   for(sum=0, num=1; num<=100; num++) \r\n                      sum += num; \r\n              System.out.println(\"sum: \"+sum); \r\n           } \r\n         }');
INSERT INTO `programquestions` VALUES ('2', '编程题', '21', 'class TestBreak{\r\n               public static void main(String[] args){ \r\n                   int sum = 0, num = 1; \r\n                   while( true ){ \r\n                       sum += num; \r\n                       if( sum>1000 ) break; \r\n                       num ++ ; \r\n                   } \r\n                   System.out.println(\"N: \" + (num-1)); \r\n               } \r\n           }');
INSERT INTO `programquestions` VALUES ('2', '编程题', '22', 'class MutiTable{\r\n             public static void main( String[] args ){ \r\n                 for( int i=1; i<=9; i++ ) { \r\n                      for ( int j=1; j<=i; j++) \r\n                            System.out.print( i + \"*\" +j+ \"=\" + i*j + \"	\");  \r\n                 System.out.println(); \r\n             } \r\n         } \r\n      }');
INSERT INTO `programquestions` VALUES ('2', '编程题', '23', 'import java.util.Scanner;\r\n         class Monthdays{ \r\n            public static void main(String[] args){ \r\n                int month,days; \r\n                Scanner sc = new Scanner(System.in); \r\n                System.out.print(\"Month? \"); \r\n                month = sc.nextInt(); \r\n                if(month<1 || month>12){        //若输入数据非月份数 \r\n                    System.out.println(\"error data\"); \r\n                    System.exit(0);                     //退出运行 \r\n                } \r\n                switch(month){ \r\n                    case 4: case 6: case 9: case 11: days = 30;break; \r\n                    case 2:                 //2月份需要输入年份进一步判断 \r\n                       System.out.print(\"Year? \"); \r\n                       int year = sc.nextInt(); \r\n                       if(year%400==0 || year%4==0 && year%100!=0) \r\n                          days = 29; \r\n                       else days = 28; \r\n                       break; \r\n                    default: days = 31;                \r\n                } \r\n                System.out.println(\"days: \"+days); \r\n            } \r\n         }');
INSERT INTO `programquestions` VALUES ('2', '编程题', '24', 'import java.util.Scanner;\r\n           class PrimeTest{ \r\n              public static void main(String[] args){ \r\n                  Scanner sc = new Scanner(System.in); \r\n                  System.out.print(\"number? \"); \r\n                  int n = sc.nextInt();     //n为被测数 \r\n                  int i;                //i为1和本身外可能的因子 \r\n                  for(i=2;i<n;i++) \r\n                      if(n%i == 0)break;        //i是n的因子，n非素数 \r\n                  if(i == n)                //所有可能的因子全非n的因子 \r\n                     System.out.println( n + \" is a prime number.\" ); \r\n                  else \r\n                     System.out.println(n + \" is not a prime number\"); \r\n              } \r\n           }');
INSERT INTO `programquestions` VALUES ('2', '编程题', '25', 'class PrimeNumbers{\r\n           public static void main(String[] args){ \r\n               int i,n; \r\n               for( n = 101; n<1000; n+=2 ){         //n遍历所有三位奇数 \r\n                    for( i=2; i<n; i++) \r\n                        if( n%i == 0 )break; \r\n                    if( i==n )System.out.print( n + \"	\"); \r\n               } \r\n           } \r\n        }');
INSERT INTO `programquestions` VALUES ('2', '编程题', '26', 'class Fei{\r\n             public static void main(String[] args){ \r\n                 int a,b,c,sum; \r\n                 a = b = 1;                 //a,b为前两项，均为1 \r\n                 sum = a + b;               //累加器变量，设初值 \r\n                 System.out.print( a + \"	\" + b ); \r\n                 for( int i=1; i<=18; i++ ){ \r\n                    c=a+b;              //生成的新项置放在变量c中 \r\n                    System.out.print(\"	\" + c); \r\n                    sum += c;  \r\n                    a = b;              //前两项后移一个数 \r\n                    b = c;           \r\n                 } \r\n                 System.out.println(\"	sum=\" + sum); \r\n             } \r\n          }');
INSERT INTO `programquestions` VALUES ('2', '编程题', '27', 'public class Guess{\n	public static void main(String[] args){\n		int a,b;\n		for (a=14;a<=90;a++){\n			for (b=11;b<=50;b++){\n				if(((a-10)==(b-10)*4)&&((a+10)%(b+10)==0)){\n					System.out.println(a);\n					System.out.println(b);\n				}\n			}\n		}\n	}\n}');
INSERT INTO `programquestions` VALUES ('2', '编程题', '28', 'public class Rmb{\n	public static void main(String[] args){\n		int count=0;\n		for (int a=0;a<20;a++){\n			for (int b=0;b<20;b++){\n				for (int c=0;c<20;c++){\n					if((a+b+c==20)&&(1*a+2*b+c*5==60)){\n						count++;\n						System.out.print(\"一元面钞张数：\"+a);\n						System.out.print(\"二元面钞张数：\"+b);\n						System.out.println(\"五元面钞张数：\"+c);\n					}\n				}\n			}\n		}\n		System.out.println(\"一共的取法：\"+count);\n	}\n}');
INSERT INTO `programquestions` VALUES ('2', '编程题', '29', 'import java.io.*;\r\n \r\npublic class Question17 { \r\n \r\n    public Question17() { /* constructor method */ \r\n    } \r\n     \r\n    public static void main(String args[])throws IOException{ \r\n      int ch; \r\n      System.out.print(\"请输入大写字符、\"); \r\n      ch=System.in.read(); \r\n      System.out.println((char)(ch+32));     \r\n    } \r\n}');
INSERT INTO `programquestions` VALUES ('2', '编程题', '30', 'import java.io.*;\r\n \r\npublic class Question18 { \r\n \r\n    public Question18() { /* constructor method */ \r\n    } \r\n     \r\n    public static void main(String args[])throws IOException{ \r\n      int m,b; \r\n      String str; \r\n      BufferedReader br; \r\n      br = new BufferedReader(new InputStreamReader(System.in)); \r\n      System.out.print(\"请输入一个三位整数(m)、\"); \r\n      str = br.readLine(); \r\n      m = Integer.parseInt(str); \r\n      b = (m%10)*100 + ((m%100)/10)*10 + m/100;     \r\n      System.out.println(\"原输入的三位整数是(m)、\" + m); \r\n      System.out.println(\"变换后的三位整数是(b)、\" + b); \r\n    } \r\n}');
INSERT INTO `programquestions` VALUES ('2', '编程题', '31', 'public class Question20{\r\n \r\n    public Question20(){ /* constructor method */ \r\n    } \r\n     \r\n    public static void main(String args[]){ \r\n      int m,cnt = 0; \r\n      for(m=100;m<=200;m++){ \r\n        if(m%3==0) \r\n          continue; \r\n        else{ \r\n         cnt++; \r\n         System.out.print(\"  \" + m); \r\n         if(cnt%10==0)   /* 以每行10个数输出 */ \r\n          System.out.print(\"\n\"); \r\n        }           \r\n      } \r\n      System.out.println(\"\n  100-200之间不能被3整除的数共有 \" + cnt + \" 个。\");       \r\n    } \r\n}');
INSERT INTO `programquestions` VALUES ('2', '编程题', '32', 'import java.io.*;\r\n \r\npublic class Question21 { \r\n \r\n    public Question21() { /* constructor method */ \r\n    } \r\n     \r\n    public static void main(String args[])throws IOException{ \r\n      int m,n,gys,gbs,temp,mult; \r\n      String str; \r\n      BufferedReader br; \r\n      br = new BufferedReader(new InputStreamReader(System.in)); \r\n      System.out.print(\"Input first integer numbers(m): \"); \r\n      str = br.readLine(); \r\n      m = Integer.parseInt(str); \r\n      System.out.print(\"Input second integer numbers(n): \"); \r\n      str = br.readLine(); \r\n      n = Integer.parseInt(str);    \r\n      mult = m * n; \r\n      if(m<n){ \r\n        temp = m; \r\n        m = n; \r\n        n = temp; \r\n      } \r\n      temp = m % n; \r\n      while(temp!= 0){ \r\n        m = n; \r\n        n = temp; \r\n        temp = m % n; \r\n      } \r\n      gys = n; \r\n      gbs = mult / gys; \r\n      System.out.println(\"最大公约数是、\" + gys); \r\n      System.out.println(\"最小公倍数是、\" + gbs);       \r\n    } \r\n}');
INSERT INTO `programquestions` VALUES ('2', '编程题', '33', 'import java.io.*;\npublic class Question22 {\n	public Question22() {\n	}\n	public static void main(String args[])throws IOException{\n		double allIncome,incomeForTax,individualIncomeTax = 0;\n		String str;\n		BufferedReader br;\n		br = new BufferedReader(new InputStreamReader(System.in));\n		System.out.print(\"Input personal income(allIncome): \");\n		str = br.readLine();\n		allIncome = double.parsedouble(str);\n		incomeForTax = allIncome - 1200;\n		if (incomeForTax <= 0)  \n		       individualIncomeTax = 0;\n		if ((incomeForTax > 0)&&(incomeForTax <= 500))  \n		       individualIncomeTax = incomeForTax * 0.05;\n		if ((incomeForTax > 500)&&(incomeForTax <= 2000)) \n		       individualIncomeTax = 25 + (incomeForTax - 500) * 0.1;\n		if ((incomeForTax > 2000)&&(incomeForTax <= 5000)) \n		       individualIncomeTax = 175 + (incomeForTax - 2000) * 0.15;\n		if ((incomeForTax > 5000)&&(incomeForTax <= 20000)) \n		       individualIncomeTax = 625 + (incomeForTax - 5000) * 0.2;\n		if ((incomeForTax > 20000)&&(incomeForTax <= 40000)) \n		       individualIncomeTax = 3625 + (incomeForTax - 20000) * 0.25;\n		if ((incomeForTax > 40000)&&(incomeForTax <= 60000)) \n		       individualIncomeTax = 8625 + (incomeForTax - 40000) * 0.3;\n		if ((incomeForTax > 60000)&&(incomeForTax <= 80000)) \n		       individualIncomeTax = 14625 + (incomeForTax - 60000) * 0.35;\n		if ((incomeForTax > 80000)&&(incomeForTax <= 100000)) \n		       individualIncomeTax = 21625 + (incomeForTax - 80000) * 0.4;\n		if (incomeForTax > 100000) \n		       individualIncomeTax = 29625 + (incomeForTax - 100000) * \n		0.45;\n		System.out.println(\"您本月个人收入总计为 \" + allIncome + \" 元人民币!\");\n		System.out.println(\"您本月个人需要纳税为 \" + individualIncomeTax + \" 元人民币！\");\n	}\n}');
INSERT INTO `programquestions` VALUES ('2', '编程题', '34', 'import java.util.Scanner;\r\n    public       class PrimeTest{ \r\n              public static void main(String[] args){ \r\n                  Scanner sc = new Scanner(System.in); \r\n                  System.out.print(\"number? \"); \r\n                  int n = sc.nextInt();      \r\n                  int i;                 \r\n                  for(i=2;i<n;i++) \r\n                      if(n%i == 0)break;        \r\n                  if(i == n)                 \r\n                     System.out.println( n + \" is a prime number.\" ); \r\n                  else \r\n                     System.out.println(n + \" is not a prime number\"); \r\n              } \r\n           }');
INSERT INTO `programquestions` VALUES ('2', '编程题', '35', 'import java.util.*;\npublic class java5_1 {\n	public static void main(String[] args) {\n		System.out.println(\"我心里有一个0到99的整数，你来猜猜看、\");\n		int number=(int)(Math.random()*100);\n		//随机产生一个数字 \n		Scanner input=new Scanner(System.in);\n		for (int i=0;i<20;) {\n			int answer=input.nextint();\n			i++;\n			if(answer!=number&&i==20){\n				System.out.println(\"很可惜，你已经没机会了！\");\n				break;\n			}\n			if(answer>number) {\n				System.out.println(\"大了点，再猜\");\n			} else if(answer<number) {\n				System.out.println(\"小了点，再试\");\n			} else{\n				System.out.println(\"猜对了！\"+\"共用\"+i+\"次。\");\n				switch(i){\n					case 1:System.out.println(\"你太有才了！\");\n					break;\n					case 2:System.out.println(\"这么快就猜出来了，不错！\");\n					break;\n					case 3:System.out.println(\"这么快就猜出来了，不错！\");\n					break;\n					case 4:System.out.println(\"这么快就猜出来了，不错！\");\n					break;\n					case 5:System.out.println(\"这么快就猜出来了，不错！\");\n					break;\n					case 6:System.out.println(\"这么快就猜出来了，不错！\");\n					break;\n					default :System.out.println(\"孩子还需继续努力啊！\");\n					break;\n				}\n			}\n		}\n	}\n}');
INSERT INTO `programquestions` VALUES ('2', '编程题', '36', 'Public static void main()\n{\n	int i,j,k;\n	system.out.println(\"\n\");\n	for (i=1;i<5;i++) \n	/*以下为三重循环*/\n	for (j=1;j<5;j++)  \n	  for (k=1;k<5;k++) \n	   {\n		if (i!=k&&i!=j&&j!=k) \n		/*确保i、j、k三位互不相同*/\n		System.out.println(\"%d,%d,%d\n\",i,j,k);\n	}\n}');
INSERT INTO `programquestions` VALUES ('2', '编程题', '37', 'import java.util.Scanner;\r\npublic class HuiWen { \r\npublic static void main(String[] args) { \r\n  // TODO Auto-generated method stub \r\n  Scanner scan = new Scanner(System.in); \r\n  String text = null; \r\n  while(true) { \r\n   System.out.print(\"请输入字符串、\"); \r\n   text = scan.nextLine().trim(); \r\n   if(text.equals(\"\")) { \r\n    System.out.println(\"警告、输入不能为空\"); \r\n    continue; \r\n   } \r\n   boolean is = true; \r\n   //检查对称位置的字符是否相同，如果找到一对位置不相同，说明不是回文字符串 \r\n   //把is变为false,跳出for循环 \r\n   for(int i=0;i<text.length();i++) { \r\n    char c1 = text.charAt(i); \r\n    char c2 = text.charAt(text.length() - 1 - i); \r\n    if(!(c1 == c2)) { \r\n     is = false; \r\n     break; \r\n    }  \r\n   } \r\n   if(is) \r\n    System.out.println(\"字符串 :\"+text+\" 是回文字符串\"); \r\n   else \r\n    System.out.println(\"字符串 :\"+text+\" 不是回文字符串\"); \r\n   System.out.print(\"是否继续（Y）？\"); \r\n   String yes = scan.nextLine().trim(); \r\n   if(yes.equalsIgnoreCase(\"Y\")) \r\n    continue; \r\n   else  \r\n    break; \r\n  } \r\n  System.out.println(\"测试退出\"); \r\n } \r\n}');
INSERT INTO `programquestions` VALUES ('2', '编程题', '38', 'public static void main(String[] args) {\n	for (int i = 0; i < 5; ++i){\n		for (int j = i; j < 5; ++j){\n			System.out.print(\" \");\n		}\n		for (int j = 0; j < 3 + 2 * i; ++j){\n			System.out.print(\"*\");\n		}\n		System.out.println();\n	}\n	for (int i = 0; i < 4; ++i){\n		for (int j = 0; j < 4; ++j) \n		 {\n			System.out.print(\" \");\n		}\n		for (int j = 0; j < 5; ++j){\n			System.out.print(\"*\");\n		}\n		System.out.println();\n	}\n}');
INSERT INTO `programquestions` VALUES ('2', '编程题', '39', 'import java.io.BufferedReader;\r\nimport java.io.IOException; \r\nimport java.io.InputStreamReader; \r\npublic class A1 { \r\n static void eqs(String str) \r\n { \r\n int sun = Integer.parseInt(str); \r\n \r\n for(int i=0;i<sun;i++)//循环行数 假如你输入的是5 那么就循环5次 \r\n { \r\n //那么第一首先是你说的# 那么我们就输出# \r\n System.out.print(\"# \");//不换行的输出 \r\n for(int j=0;j<sun-2;j++)//虚幻后面的 应该是输入进来的N-1 但是最后后面还要保留一个# \r\n //所以N-2 空留2个#的位置 \r\n { \r\n System.out.print(\"+ \"); \r\n } \r\n System.out.println(\"#\");//最后记得输出最后一个# \r\n } \r\n } \r\n public static void main(String[] args) { \r\n String str =\"\";//定义一个str接受字符串 \r\n BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); \r\n try { \r\n while (true) \r\n { \r\n System.out.println(\"请输入一个数字\"); \r\n str = br.readLine();//接受从键盘输入进来的字符 \r\n eqs(str); \r\n } \r\n } catch (IOException e) { \r\n // TODO Auto-generated catch block \r\n e.printStackTrace(); \r\n } } }');
INSERT INTO `programquestions` VALUES ('3', '编程题', '1', 'public class StringTest {\n	public static void main(String[] args) {\n		String a = \"this is String test\";\n		System.out.println(\"获得字符串的第一个字符、\"+a.charAt(0));\n		System.out.println(\"获得字符串的最后一个字符、\"+a.charAt(a.length()-1));\n		int m = 0;\n		if(a.length()>=2){\n			m = 1;\n			System.out.println(\"删除第一个字符、\"+a.substring(m, a.length()));\n			System.out.println(\"删除最后一个字符、\"+a.substring(0, a.length()-1));\n		} else{\n			System.out.println(\"删除第一个字符、null\");\n			System.out.println(\"删除最后一个字符、null\");\n		}\n	}\n}');
INSERT INTO `programquestions` VALUES ('3', '编程题', '2', 'public class Test {\r\n public static void main(String[] args) { \r\n  String input = \"aaa果4金5a\"; \r\n  StringBuffer sb = new StringBuffer(); \r\n  char[] c = input.toCharArray(); \r\n  for (int i = 0; i < c.length; i++) { \r\n   if (c[i] >= \'0\' && c[i] <= \'9\') { \r\n    int tmp = Integer.valueOf(String.valueOf(c[i])); \r\n    for (int j = 0; j < tmp; j++) { \r\n     sb.append(c[i + 1]); \r\n    } \r\n    i++; \r\n   } else { \r\n    sb.append(c[i]); \r\n   } \r\n  } \r\n \r\n  System.out.println(sb.toString()); \r\n } \r\n}');
INSERT INTO `programquestions` VALUES ('3', '编程题', '3', 'import java.util.*;\r\n public class Test\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n    Map<Integer,String> map=new Hashtable<Integer,String>();\r\n     System.out.println(\"请输入字符串#最后以空格结束输入！\");\r\n     Scanner input=new Scanner(System.in);\r\n     String str=input.nextLine();\r\n     while(!str.equals(\" \"))\r\n     {    map.put(str.length(), str);    str=input.nextLine();   }\r\n     Set<Integer> key=map.keySet();\r\n     int[] sort=new int[key.size()];\r\n     int i=0;\r\n     for(int num:key)   {    sort[i]=num;    i++;   }\r\n     Arrays.sort(sort);\r\n     System.out.println(\"最长字符串是、\"+map.get(sort[sort.length-1]));\r\n}\r\n    }');
INSERT INTO `programquestions` VALUES ('3', '编程题', '4', 'public class Test {\r\n \r\n public static void main(String[] args) { \r\n \r\n  }else \r\n  { \r\n   System.out.println(s1+\"和\"+s2+\"不同\"); \r\n  } \r\n \r\n  String s1=\"you are a student\"; \r\n  String s2=\"how are you\"; \r\n  if(s1.equals(s2)) \r\n  { \r\n   System.out.println(s1+\"和\"+s2+\"相同\");');
INSERT INTO `programquestions` VALUES ('3', '编程题', '5', 'public class Test {\r\n public static void main(String[] args) { \r\nString s3=\"22030219851022024\"; \r\n   String s4=\"220302\"; \r\n  if(s3.startsWith(s4)) \r\n  { \r\n   System.out.println(s3+\"的前缀为\"+s4); \r\n  }else \r\n  { \r\n   System.out.println(s3+\"的前缀不为\"+s4); \r\n  } \r\n  if(s3.endsWith(s4)) \r\n  { \r\n   System.out.println(s3+\"的后缀为\"+s4); \r\n  }else \r\n  { \r\n   System.out.println(s3+\"的后缀不为\"+s4); \r\n  } \r\n} \r\n}');
INSERT INTO `programquestions` VALUES ('3', '编程题', '6', 'public class Test {\r\n public static void main(String[] args) { \r\n  String s5=\"你\"; \r\n  String s6=\"我\"; \r\n  if(s5.compareTo(s6)<0) \r\n  { \r\n   System.out.println(\"\"\"+s5+\"\"比\"\"+s6+\"\"大\"); \r\n  }else if(s5.compareTo(s6)==0){ \r\n   System.out.println(\"\"\"+s5+\"\"和\"\"+s6+\"\"等\"); \r\n  }else \r\n  { \r\n   System.out.println(\"\"\"+s5+\"\"比\"\"+s6+\"\"小\"); \r\n  } \r\n} \r\n}');
INSERT INTO `programquestions` VALUES ('3', '编程题', '7', 'public class Test {\r\n public static void main(String[] args) { \r\nString s7=\"100\"; \r\n  String s8=\"123.678\"; \r\n  int num1=Integer.parseInt(s7); \r\n  Double num2=Double.parseDouble(s8); \r\n  System.out.println(num1); \r\n  System.out.println(num2); \r\n} \r\n}');
INSERT INTO `programquestions` VALUES ('3', '编程题', '8', 'public class Test {\r\n public static void main(String[] args) { \r\nString s9=\"FEDCBA\"; \r\n  char [] arr=s9.toCharArray(); \r\n  for (int i = 0; i < arr.length; i++) { \r\n   System.out.println(arr[i]); \r\n  } \r\n} \r\n}');
INSERT INTO `programquestions` VALUES ('3', '编程题', '9', 'import java.io.*;\npublic class InAndOut\n{\n	public static void main(String args[]) throws IOException {\n		int num1,num2,sum;\n		String str;\n		BufferedReader buf;\n		buf=new BufferedReader(new InputStreamReader(System.in));\n		System.out.print(\"Input the first integer:\");\n		str=buf.readLine();\n		num1=Integer.parseint(str);\n		System.out.print(\"Input the second integer:\");\n		str=buf.readLine();\n		num2=Integer.parseint(str);\n		sum=num1+num2;\n		System.out.println(\"The sum is \"+sum);\n	}\n}');
INSERT INTO `programquestions` VALUES ('3', '编程题', '10', 'public class Rotor{\n	public static void main(String args[]){\n		String str,sub1;\n		int i;\n		if(args.length<0){\n			System.out.println(\"请输入一个命令行参数字符串！\");\n			System.exit(0);\n		}\n		str=args[0];\n		String temp=\"\";\n		for (i=0;i<STR.LENGTH();I++){\n			sub1=str.substring(i,i+1);\n			temp=sub1+temp;\n		}\n		if(str.equals(temp)) System.out.println(str+\"是回文！\"); else System.out.println(str+\"不是回文！\");\n	}\n}');
INSERT INTO `programquestions` VALUES ('3', '编程题', '11', 'public class UseString{\n	public static void main(String args[]){\n		String str=\"ABCDEFGHIJKLM\";\n		System.out.println(str);\n		for (int i=0;i<STR.LENGTH();I++){\n			System.out.println(str.charAt(str.length()-1-i));\n		}\n	}\n}');
INSERT INTO `programquestions` VALUES ('3', '编程题', '12', 'public class Text{\n	public static void main(String args[]) {\n		if (args.length == 0) {\n			System.out.println(\"There are no string inputted\");\n			return;\n		}\n		String s = args[0];\n		int i, times = 0;\n		for (i = 0; i < s.length(); i++) {\n			if (s.charAt(i) == \'e\') times++;\n		}\n		System.out.println(\"There are \" + times + \" \'e\' in string \" + s);\n	}\n}');
INSERT INTO `programquestions` VALUES ('3', '编程题', '13', 'public class Text{\n	public static void main(String args[]) {\n		if (args.length == 0) {\n			System.out.println(\"There are no string inputted\");\n			return;\n		}\n		StringBuffer sb = new StringBuffer(args[0]);\n		int i = 0;\n		while (i < sb.length()) {\n			if (sb.charAt(i) == \'s\') {\n				sb.delete(i, i+1);\n			} else i++;\n		}\n		System.out.println(\"orignal string : \" + args[0]);\n		System.out.println(\"result string without \'s\' : \" + sb);\n	}\n}');
INSERT INTO `programquestions` VALUES ('3', '编程题', '14', 'public class Text{\n	public static void main(String args[]) {\n		if (args.length == 0) {\n			System.out.println(\"There are no string inputted\");\n			return;\n		}\n		StringBuffer sb1 = new StringBuffer(args[0]);\n		StringBuffer sb2 = new StringBuffer();\n		int i, result = 0;\n		char ch;\n		for (i = 0; i < sb1.length(); i++) {\n			ch = sb1.charAt(i);\n			if ((ch >= \'0\') && (ch <= \'9\')) {\n				sb2.append(ch);\n			}\n		}\n		if (sb2.length() > 0) result = Integer.parseint(sb2.toString());\n		System.out.println(\"The result is : \" + result);\n	}');
INSERT INTO `programquestions` VALUES ('3', '编程题', '15', 'import java.util.HashMap;\r\nimport java.util.Map;    \r\npublic class CountCharNum {    \r\npublic static void main(String[] args) {    \r\n    String aString = \"yekmaakkccekymbvb\";    \r\n    int count = 0;    \r\n    String singleString = \"\";    \r\n    Map stringMap = new HashMap();    \r\n    for (int i = 0; i < aString.length(); i++) {    \r\n        singleString = String.valueOf(aString.charAt(i));    \r\n        System.out.println(singleString);    \r\n        CountCharNum ccn = new CountCharNum();    \r\n        // 第一次出现的字符     \r\n        if (stringMap.get(singleString) == null) {    \r\n            count = 0;    \r\n        } else {    \r\n            count =  (Integer)stringMap.get(singleString);    \r\n        }    \r\n        stringMap.put(singleString, count + 1);    \r\n        }    \r\n        System.out.println(stringMap);    \r\n    }    \r\n}');
INSERT INTO `programquestions` VALUES ('3', '编程题', '16', 'public class StringSplit {\r\nString splitString;    \r\nint splitBytes;    \r\npublic StringSplit(String splitString, int splitBytes) {    \r\n    super();    \r\n    this.splitString = splitString;    \r\n    this.splitBytes = splitBytes;    \r\n    System.out.println(\"The string is : \" + splitString    \r\n        + \",the splitbytes is :\" + splitBytes);    \r\n    }    \r\npublic void splitIt() {    \r\n    int num = 0;    \r\n    StringBuffer sb = new StringBuffer();    \r\n    int i = 0;    \r\n    if (splitBytes >= 2) {    \r\n         while (num < splitBytes) {    \r\n        if (splitString.substring(i, i + 1).matches(\"[u4e00-u9fa5]+\")) {    \r\n            num += 2;    \r\n        } else {    \r\n            num++;    \r\n        }    \r\n        sb.append(splitString.substring(i, i + 1));    \r\n        i++;    \r\n        }    \r\n        System.out.println(\"final string :\" + sb.toString());    \r\n    }    \r\n}    \r\npublic static void main(String[] args) {    \r\n    StringSplit ss = new StringSplit(\"我ABCD妈E爸F\", 5);    \r\n    ss.splitIt();    \r\n    }    \r\n}');
INSERT INTO `programquestions` VALUES ('3', '编程题', '17', 'package com.searchkiller;\r\nimport java.util.ArrayList;    \r\nimport java.util.Collections;    \r\nimport java.util.List;    \r\npublic class AlphaAsc {    \r\n    public static void main(String[] args) {    \r\n String[] aString = {\"sbc\",\"fds\",\"des\"};    \r\nList list = new ArrayList();    \r\n for (int i = 0; i < aString.length; i++) {    \r\n  list.add(aString[i]);    \r\n  }    \r\n  Collections.sort(list);    \r\n   System.out.println(list);    \r\n  }     \r\n}');
INSERT INTO `programquestions` VALUES ('3', '编程题', '18', 'public class xt5_01\n{\n	static int n;\n	public static void main (String[] args)  \n	{\n		if(args.length > 0)  \n		{\n			n=Integer.parseint(args[0]);\n			int[ ] a=new int[n];\n			a=myArray(n);\n			printA(a);\n		} else {\n			System.out.println(\"缺命令行参数!\");\n			System.exit(-1);\n		}\n	}\n	static void printA(int[ ] x)  \n	{\n		for (int i=0; i< x.length; i++)  \n		System.out.print(x[i]+\"   \");\n		System.out.println( );\n		return;\n	}\n	static int[ ]  myArray(int k)  \n	{\n		int x[ ]=new int[k];\n		for (int i=0; i< k; i++)  \n		x[i]=50+(int)(Math.random( )*50);\n		return  x;\n	}\n}');
INSERT INTO `programquestions` VALUES ('3', '编程题', '19', 'public class xt5_02\r\n{  \r\npublic static void main (String[] args)  \r\n{  \r\nif( args.length < 2 ) \r\n77 {  \r\nSystem.out.println( \"Usage: string1  string2\");  \r\nSystem.exit(-1);  \r\n}  \r\nif(args[0].equals(args[1]))  \r\nSystem.out.println( args[0]+\" 和 \"+args[1]+\" 相等 \");  \r\nelse  \r\nSystem.out.println( args[0]+\" 和 \"+args[1]+\" 不等 \");  \r\n}  \r\n}');
INSERT INTO `programquestions` VALUES ('3', '编程题', '20', 'public  class  xt5_03\n{\n	public  static  void  main(String  args[])  \n	{\n		int  count=0;\n		if(args.length!=0)  \n		{\n			System.out.println(args[0]);\n			if((int)args[0].charAt(0)>=65 && (int)args[0].charAt(0)<=90)  \n			{\n				for (int i=0;i<args[0].length( );i++)  \n				if((int)args[0].charAt(i)>=65 && (int)args[0].charAt(i)<=90)  \n				{\n					System.out.print(args[0].charAt(i));\n					count++;\n				}\n				System.out.println( );\n				System.out.println(\"共有 \"+count+\" 个大写字母。\");\n			} else System.out.println(\"第一个字母不是大写字母!\");\n		} else System.out.println(\"请给出命令行参数!\");\n	}\n}');
INSERT INTO `programquestions` VALUES ('3', '编程题', '21', 'public  class xt5_04 {\r\npublic static void main (String args[])  \r\n{  \r\nString str;  \r\nstr=args[0];  \r\nint j=str.length();  \r\nSystem.out.println(str+\" \"+j);  \r\nfor(int i=j-1;i>=0;i--){  \r\nSystem.out.print(str.charAt(i)+\" \");  \r\n}  \r\n}  \r\n}');
INSERT INTO `programquestions` VALUES ('3', '编程题', '22', 'import java.util.Scanner;\r\npublic class test{\r\n     public static void main(String[] args)\r\n        {  String [] strings=new String[]{\"tom\",\"is\",\"a\",\"boy\"};\r\n            System.out.println(\"请输入一段文字\");\r\n            Scanner input = new Scanner(System.in);\r\n            StringBuffer sb = new StringBuffer();\r\n            for(int i=0;i<strings.length;i++){\r\n                String temp = input.next();\r\n                if(temp.equals(strings[i]))  sb.append(strings[i]+\" \");\r\n                else{\r\n                    sb.append(\"?\");\r\n                    for(int j=0;j<temp.length();j++){\r\n                        if(strings[i].indexOf(temp.charAt(j))!=-1)  sb.append(temp.charAt(j));  }\r\n                    sb.append(\"? \");\r\n                }\r\n            }\r\n            System.out.println(sb);\r\n       }');
INSERT INTO `programquestions` VALUES ('4', '编程题', '1', 'class Array2\n{\n	public static void main(String args[]){\n		final int N=10;\n		int i,j,temp;\n		int a[]={20,10,50,40,30,70,60,80,90,100};\n		System.out.println(\"The source data:\");\n		int min=a[0];\n		for (i=0;i<N;i++) \n		System.out.println(a[i]+\"  \");\n		System.out.println();\n		//sorting \n		for (i=0;i<N-1;i++) \n		         if(min>a[i]){\n			temp = a[i];\n			a[i]=a[min];\n			a[min]=temp;\n		}\n		System.out.println(\"The sorting result:\");\n		System.out.print(min+\" \");\n	}');
INSERT INTO `programquestions` VALUES ('4', '编程题', '2', 'public static void main(String [] args){\r\nint number=100;//数组的个数 \r\nint a[]=new int[number]; \r\nint min=a[0];//最小值 \r\nint max=a[0];//最大值 \r\nfloat average=0;//平均值 \r\nint sum=0;//数组元素的和 \r\n \r\nfor(int i=0;i<number;i++){ \r\nif(min>a[i])min=a[i]; \r\nif(max<a[i])max=a[i]; \r\nsum+=a[i]; \r\n} \r\n \r\naverage=sum*1.0/number; \r\n}');
INSERT INTO `programquestions` VALUES ('4', '编程题', '3', 'public class Test\n{\n    public static void main(String[] args)\n    {\n        int a[] = new int[10];\n        for (int b = a.length - 1, b < a.length; b--)\n        {\n            a[b] = b;\n        }\n        System.out.println(“a[b] = ”+b);\n    }\n}\n');
INSERT INTO `programquestions` VALUES ('4', '编程题', '4', 'public class Test\n{\n    public static void main(String[] args)\n    {\n        int a[][] = new int[2][6];\n        for (int c = 0; c < 2, c++)\n        {\n            for (int d = 0; d < 6; d++)\n            {\n                a[c][d] = d;\n            }\n        }\n        System.out.println(a[c][d]);\n    }\n}\n');
INSERT INTO `programquestions` VALUES ('4', '编程题', '5', 'public class Te\n{\n    public static void main(String[] args)\n    {\n        int[] a = {12, 34, 67, 789 , 78};\n        int[] b = { 34 , 78};\n        if (a.length > b.length)\n        {\n            System.out.println(a.length);\n        }\n        else\n        {\n            System.out.println(b.length);\n        }\n    }\n}\n');
INSERT INTO `programquestions` VALUES ('4', '编程题', '6', 'public class Test\n{\n    public static void main(String[] args)\n    {\n        int[] c = new int[10];\n        for (int w = 0; w < c.length; w++)\n        {\n            int a = (int)(Math.random() * 100 + 1);\n            c[w] = a;\n        }\n        System.out.println(c[w] + “ = ”+a);\n    }\n}\n');
INSERT INTO `programquestions` VALUES ('4', '编程题', '7', 'public class Test{\n	public static void main(String [] args){\n		int a[]=new int[10];\n		for (int w=a.length-1；w<a.length;w--){\n			a[w]=w;\n		}\n		System.out.println(a[w]+”  =  ”+w);\n	}\n}');
INSERT INTO `programquestions` VALUES ('4', '编程题', '8', 'public class T0taDay {\r\n public static void main(String[] args) { \r\n   \r\n        int year=2010,month,day=26; \r\n        int[] MonthDay={0,31,28,31,30,31,30,31,31,30,31,30,31}; \r\n        int total; \r\n        for(month=1;month<13;month++){ \r\n         total=0; \r\n         if(year%4==0){ \r\n          MonthDay[2]++; \r\n         } \r\n         for(int m=1;m<=month-1;m++){ \r\n          total+=MonthDay[m]; \r\n          total+=day; \r\n           \r\n         } \r\n         System.out.print(\"     Year=\"+year); \r\n         System.out.print(\"    Month =\"+month); \r\n         System.out.print(\"    Day=\"+day); \r\n         System.out.print(\"    T0tal=\"+total); \r\n        } \r\n } \r\n \r\n}');
INSERT INTO `programquestions` VALUES ('4', '编程题', '9', 'public class ArraySort{\r\n   public static void main(String args[]){ \r\n    int array[]={20,10,50,40,30,70,60,80,90,100}; \r\n    int i,j,k,t; \r\n    int l=array.length; \r\n    for(i=0;i<l-1;i++) \r\n    { \r\n     k=i; \r\n     for(j=i+1;j<l;j++) \r\n     if(array[j]<array[k]) k=j; \r\n     t=array[k];array[k]=array[i];array[i]=t; \r\n    } \r\n    for(i=0;i<l;i++) \r\n    System.out.println(\"array[\"+i+\"]=\"+array[i]); \r\n   } \r\n  }');
INSERT INTO `programquestions` VALUES ('5', '编程题', '1', 'public class Student {\n	private String name;\n	private Score score;\n	public void setData(String name,Score score){\n		this.name=name;\n		this.score=score;\n	}\n	public void getResult(){\n		System.out.println(\"Courese:\"+score.getCourse());\n		System.out.println(\"Grade:\"+score.getGrade());\n	}\n	public String getName() {\n		return name;\n	}\n	public Score getScore() {\n		return score;\n	}\n	public static void main(String[] args) {\n		Student student = new Student();\n		Score score = new Score();\n		score.setCourse(\"java\");\n		score.setGrade(100);\n		student.setData(\"mike\", score);\n		student.getResult();\n	}\n}\npublic class Score {\n	private String course;\n	private int grade;\n	public String getCourse() {\n		return course;\n	}\n	public void setCourse(String course) {\n		this.course = course;\n	}\n	public int getGrade() {\n		return grade;\n	}\n	public void setGrade(int grade) {\n		this.grade = grade;\n	}\n}');
INSERT INTO `programquestions` VALUES ('5', '编程题', '2', 'public class StudentBeanBean {\n	private String ST_NUMBER;\n	private String ST_NAME;\n	private String ST_RESULT;\n	public StudentBeanBean(){\n	}\n	public String getST_NUMBER(){\n		return this.ST_NUMBER;\n	}\n	public String getST_NAME(){\n		return this.ST_NAME;\n	}\n	public String getST_RESULT(){\n		return this.ST_RESULT;\n	}\n	public void setST_NUMBER(String ST_NUMBER){\n		this.ST_NUMBER=ST_NUMBER;\n	}\n	public void setST_NAME(String ST_NAME){\n		this.ST_NAME=ST_NAME;\n	}\n	public void setST_RESULT(String ST_RESULT){\n		this.ST_RESULT=ST_RESULT;\n	}\n}\npublic class ParentClass {\n	private String name;\n	//姓名 private int age; //年龄 private String sex; //性别  public ParentClass() { super(); }  public ParentClass(String name, int age, String sex) { super(); this.name = name; this.age = age; this.sex = sex; }  public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { \n	this.age = age;\n}\npublic String getSex() {\n	return sex;\n}\npublic void setSex(String sex) {\n	this.sex = sex;\n}\npublic void f(){\n	System.out.println(\"我是ParentClass\");\n}\n}\npublic class SubClass extends ParentClass {\nprivate String grade;\n//年级 \npublic SubClass() {\n	super();\n}\npublic SubClass(String name,int age,String sex,String grade) {\n	super(name,age,sex);\n	//调用父类带参构造 this.grade = grade; } \n	public String getGrade() {\n		return grade;\n	}\n	public void setGrade(String grade) {\n		this.grade = grade;\n	}\n	public void myMethod(){\n		System.out.println(\"这是SubClass中的myMethod方法\");\n	}\n	public void newMethod(){\n		System.out.println(\"这是SubClass中的newMethod方法\");\n	}\n}\npublic class Test {\n	public static void main(String[] args) {\n		ParentClass pClass = new ParentClass(\"sky\",21,\"男\");\n		ParentClass subClass = new SubClass(\"天空\",22,\"男\",\"1年级\");\n		subClass.f();\n		System.out.println(\"姓名:\"+pClass.getName()+\"	\"+\"年龄:\"+pClass.getAge());\n		System.out.println(\"姓名:\"+((SubClass)subClass).getName()+\"	\"+\"年龄:\"+((SubClass)subClass).getAge()+\"	\"+\"年级:\"+((SubClass)subClass).getGrade());\n	}\n}');
INSERT INTO `programquestions` VALUES ('5', '编程题', '3', 'package com.sorce.bankSys;\nimport java.util.Scanner;\nimport sun.security.action.GetBooleanAction;\npublic class BankSys {\n	private int  uId;\n	//这写好像用不上，你自己看着加吧 \n	private String uName;\n	private String address;\n	private double minMon=0.50;\n	private double money=1000.50;\n	public static void main(String[] args) {\n		String answer;\n		// TODO Auto-generated method stub \n		System.out.println(\"欢迎进入存取款系统！\");\n		System.out.println(\"---------------------\");\n		do{\n			System.out.println(\"1.取款 	2.查询余额	3.存款\");\n			Scanner sc=new Scanner(System.in);\n			BankSys bank=new BankSys();\n			int num=sc.nextint();\n			switch (num) {\n				case 1: \n				    bank.get();\n				break;\n				case 2: \n				    bank.search();\n				break;\n				case 3: \n				    bank.deposit();\n				break;\n				default: \n				    break;\n			}\n			System.out.println(\"是否继续？（y/n）\");\n			answer=sc.next();\n		}\n		while(answer.equals(\"y\"));\n		System.out.println(\"程序结束\");\n	}\n	public void deposit(){\n		Scanner sc=new Scanner(System.in);\n		System.out.println(\"请输入存款金额:\");\n		double  input=sc.nextint();\n		System.out.println(\"您的帐户原有余额为:\"+money+\"元\");\n		System.out.println(\"已存入:\"+input+\"元\");\n		money+=input;\n		System.out.println(\"您的帐户最终存款余额为:\"+money+\"元\");\n	}\n	public void search(){\n		System.out.println(\"您的帐户余额为、\"+money+\"元\");\n	}\n	public void get(){\n		Scanner sc=new Scanner(System.in);\n		System.out.println(\"请输入取款金额:\");\n		double input=sc.nextint();\n		if (money<input){\n			System.out.println(\"您的帐户余额不足！\");\n		} else{\n			System.out.println(\"您本次取出:\"+input+\"元\");\n			money-=input;\n			System.out.println(\"剩余金额为:\"+money+\"元\");\n		}\n	}\n}');
INSERT INTO `programquestions` VALUES ('5', '编程题', '4', '（略）');
INSERT INTO `programquestions` VALUES ('5', '编程题', '5', 'class Phone{\n	private String phonenumber;\n	public void setPhonenumber(String phonenumber){\n		this.phonenumber=phonenumber;\n	}\n	public String getPhonenumber(){\n		return phonenumber;\n	}\n	public void recCall(){\n		System.out.println(\"接到一个电话\");\n	}\n	public void telCall(){\n		System.out.println(\"拨出一个电话\");\n	}\n}\nclass Fixedphone extends Phone{\n	private String phonenumber;\n	//号码是私有，设置为private，不可继承 public void recCall(){ System.out.println(\"以\"+this.phonenumber+\"呼出了一个电话\"); //重载了父类的recCall } } \n	class Cordlessphone extends Fixedphone{\n		private String phonenumber;\n		public void info(){\n			System.out.println(\"这是无绳电话的信息\");\n		}\n	}\n	interface Moveable{\n		public void moveinfo();\n	}\n	class Mobilephone extends Phone implements Moveable{\n		private String phonenumber;\n		public void moveinfo(){\n			System.out.println(\"我实现了可移动性\");\n		}\n	}\n	public class PhoneTest{\n		public static void main(String a[]){\n			Phone[] p=new Phone[5];\n			Phone p1=new Phone();\n			p1.setPhonenumber(\"123456789\");\n			p[0]=p1;\n			Phone p2=new Phone();\n			p2.setPhonenumber(\"987654321\");\n			p[1]=p2;\n			Mobilephone mp=new Mobilephone();\n			mp.setPhonenumber(\"11111\");\n			p[2]=mp;\n			Fixedphone fp=new Fixedphone();\n			fp.setPhonenumber(\"22222\");\n			p[3]=fp;\n			Cordlessphone cp=new Cordlessphone();\n			cp.setPhonenumber(\"33333\");\n			p[4]=cp;\n			for (int i=0;i<p.length;i++){\n				System.out.println(p[i].getPhonenumber());\n			}\n			p[4]=p[1];\n			System.out.println(p[4].getPhonenumber());\n		}\n	}');
INSERT INTO `programquestions` VALUES ('5', '编程题', '6', 'public class Animal{\n	private String name;\n	private double weight;\n	private int length;\n	privateString sex;\n	public void run(){\n		System.out.println(\"the animal is running!\");\n	}\n	public void jump(){\n		System.out.println(\"the animal is jumping!\");\n	}\n	public void walk(){\n		System.out.println(\"the animal is walking!\");\n	}\n}');
INSERT INTO `programquestions` VALUES ('5', '编程题', '7', 'package mypackage.math;\nclass Rectangle{\n	private int length;\n	private int width;\n	public Rectangle(int length,int width){\n		this.length=length;\n		this.width=width;\n	}\n	public void set(int length,int width){\n		this.length=length;\n		this.width=width;\n	}\n	public void get(){\n		System.out.println(\"此长方形的长为\"+length+\"宽为\"+width);\n		采集者退散\n	}\n	public int getLength(){\n		return length;\n	}\n	public int getWidth(){\n		return width;\n	}\n	public int calculatePerimeter(){\n		return 2*(length+width);\n	}\n	public int calculateArea(){\n		return (length*width);\n	}\n	public void print(){\n		System.out.println(\"此长方形的周长为\"+calculatePerimeter()+\"面积为\"+calculateArea());\n	}\n}\nclass Test{\n	public static void main(String [ ] args){\n		Rectangle myrectangle=new Rectangle(15,10);\n		myrectangle.get();\n		myrectangle.print();\n		myrectangle.set(20,15);\n		System.out.println(\"长方形的长是\"+myrectangle.getLength()+\"宽是\"+ myrectangle .getWidth());\n		myrectangle.print();\n	}\n}');
INSERT INTO `programquestions` VALUES ('5', '编程题', '8', 'public class People {\r\n       private int number; \r\n       private String name; \r\n       private String sex; \r\n       private int age; \r\n       public People(){} \r\n       public People(int number,String name,String sex,int age){ \r\n        this.name=name; \r\n        this.age=age; \r\n        this.number=number; \r\n        this.sex=sex; \r\n         \r\n       } \r\n public int getNumber() { \r\n  return number; \r\n } \r\n public void setNumber(int number) { \r\n  this.number = number; \r\n } \r\n public String getName() { \r\n  return name; \r\n } \r\n public void setName(String name) { \r\n  this.name = name; \r\n } \r\n public String getSex() { \r\n  return sex; \r\n } \r\n public void setSex(String sex) { \r\n  this.sex = sex; \r\n } \r\n public int getAge() { \r\n  return age; \r\n } \r\n public void setAge(int age) { \r\n  this.age = age; \r\n } \r\n public static void main(String []ad){ \r\n  People pp= new People(001,\"张三\",\"男\",23); \r\n  System.out.println(\"编号：\"+pp.getNumber()); \r\n  System.out.println(\"名字：\"+pp.getName()); \r\n  System.out.println(\"年龄：\"+pp.getAge()); \r\n  System.out.println(\"性别：\"+pp.getSex()); \r\n   \r\n   \r\n } \r\n        \r\n}');
INSERT INTO `programquestions` VALUES ('5', '编程题', '9', 'class Point    { int x,y;   Point(int a,int b)   { x=a;   y=b;   }   }   public class A    { public static void main(String [ ] args)   { Point p1,p2;   p1=new Point(10,10);   p2=new Point(23,35);   }   }');
INSERT INTO `programquestions` VALUES ('5', '编程题', '10', 'class StaticTest{\n	int i=5;\n	static int j=5;\n	void print(){\n		System.out.println(\"i=\"+i);\n		System.out.println(\"j=\"+j);\n	}\n	static void classprint(){\n		//System.out.println(\"i=\"+i); \n		System.out.println(\"j=\"+j);\n	}\n}\nclass Test{\n	public static void main(String [] args){\n		//System.out.println(StaticTest.i);  \n		System.out.println(StaticTest.j);\n		//StaticTest.print();\n		StaticTest.classprint();\n		StaticTest st=new StaticTest();\n		System.out.println(st.j);\n		System.out.println(st.j);\n		st.print();\n		st.classprint();\n	}\n}');
INSERT INTO `programquestions` VALUES ('5', '编程题', '11', 'package mypackage.employee;\nclass MyDate{\n	private int year;\n	private int month;\n	private int day;\n	public MyDate(int year,int month,int day){\n		this.year=year;\n		this.month=month;\n		this.day=day;\n	}\n	public int getYear(){\n		return year;\n	}\n}\npublic class Employee{\n	private String name;\n	private double salary;\n	private MyDate hireDay;\n	public Employee(String name,double salary,MyDate day){\n		this.name=name;\n		this.salary=salary;\n		hireDay=day;\n	}\n	public void print(){\n		System.out.println(name+ \"\"+salary+\"\"+hireYear());\n	}\n	public int hireYear(){\n		return hireDay.getYear();\n	}\n}\nclass TestEmployee{\n	public static void main(String [] args){\n		Employee a=new Employee(\"李明\",20000,new MyDate(2000,10,1));\n		Employee b=new Employee(\"王强\",24000,new MyDate(1995,8,12));\n		a.print();\n		b.print();\n	}\n}');
INSERT INTO `programquestions` VALUES ('5', '编程题', '12', 'package s1java.sg.chap6；      \npublic class Student {\n	String name；    //姓名  \n	int age；      //年龄      \n	String hobby；   //兴趣    \n	String classNo；  //班级编号  \n	public String toString() {\n		return name + \"年龄、\" + age + \"爱好、\" + hobby + \"就读于\" + classNo；\n	}\n}\npackage s1java.sg.chap6；         public class Teacher {\n	String name；   \n	 String course；  //教授课程        \n	String dep；     //专业方向         \n	int teaYear；    //教龄   \n	public String toString() {\n		return name + \"\n教授课程、\" + course + \"\n主攻方向、\" + dep + \"\n教龄、\" + teaYear；\n	}\n}\npackage s1java.sg.chap6；             \n     public class Test {\n	public static void main(String[] args) {\n		/* 创建一个学生对象 */\n		Student stu = new Student()；    \n            stu.name = \"张三\"；        \n		  stu.age = 20；      \n		  stu.hobby = \"网球\"；      \n		  stu.classNo = \"ACCP0791\"；        \n		  System.out.println(stu)；      \n		/* 创建一个教员对象 */\n		Teacher tea = new Teacher()； \n		  tea.name = \"陈浩然\"；        \n		  tea.course = \"使用Java语言理解程序逻辑\"；    \n		  tea.dep = \"Java/J2EE\"；      \n		  tea.teaYear = 8； \n		  System.out.println(\"\n\" + tea)；\n	}\n}');
INSERT INTO `programquestions` VALUES ('5', '编程题', '13', 'class Complex {\r\n private double realPart; \r\n private double imaginaryPart; \r\n  \r\n public Complex(double real, double imaginary) { \r\n  this.realPart = real; \r\n  this.imaginaryPart = imaginary; \r\n } \r\n  \r\n public Complex add(Complex other) { \r\n  return new Complex(this.realPart + other.realPart,  \r\n    this.imaginaryPart + other.imaginaryPart); \r\n } \r\n  \r\n public Complex subtract(Complex other) { \r\n  return new Complex(this.realPart - other.realPart,  \r\n    this.imaginaryPart - other.imaginaryPart); \r\n } \r\n  \r\n public Complex multiply(Complex other) { \r\n  return new Complex(this.realPart * other.realPart -  \r\n    this.imaginaryPart * other.imaginaryPart,  \r\n    this.realPart * other.imaginaryPart +  \r\n    this.imaginaryPart * other.realPart); \r\n } \r\n  \r\n public Complex divide(Complex other) { \r\n  if (other.realPart == 0 && other.imaginaryPart == 0) { \r\n   throw new ArithmeticException(\"Divided By 0\"); \r\n  } \r\n  if (this.realPart == 0 && this.imaginaryPart == 0) { \r\n   return this; \r\n  } \r\n  Complex numerator = this.multiply(new Complex(other.realPart,  \r\n    -other.imaginaryPart)); \r\n  double denominator = other.realPart * other.realPart +  \r\n    other.imaginaryPart * other.imaginaryPart; \r\n  return new Complex(numerator.realPart / denominator,  \r\n    numerator.imaginaryPart / denominator); \r\n } \r\n  \r\n public String toString() { \r\n  StringBuilder sb = new StringBuilder(); \r\n  if (this.realPart != 0) { \r\n   sb.append(this.realPart); \r\n  } \r\n  if (this.imaginaryPart > 0) { \r\n   sb.append(\" + \"). \r\n   append(this.imaginaryPart). \r\n   append(\"i\"); \r\n  } else if (this.imaginaryPart < 0) { \r\n   sb.append(\" - \"). \r\n   append(Math.abs(this.imaginaryPart)). \r\n   append(\"i\"); \r\n  } \r\n  return sb.toString(); \r\n } \r\n}');
INSERT INTO `programquestions` VALUES ('5', '编程题', '14', 'public class Test {\r\n public static void main(String[] args) { \r\n  Patient april=new Patient(); \r\n  april.setName(\"ZhangLi\"); \r\n  april.setSex(\'f\'); \r\n  april.setAge(33); \r\n  april.setWeight(154.72f); \r\n  april.setAllergies(true); \r\n  System.out.println(\"Name: \"+april.getName()); \r\n  System.out.println(\"Sex: \"+april.getSex()); \r\n  System.out.println(\"Age: \"+april.getAge()); \r\n  System.out.println(\"Weight: \"+april.getWeight()); \r\n  System.out.println(\"Allergies: \"+april.getAllergies()); \r\n  Complex c1 = new Complex(1, 2); \r\n  Complex c2 = new Complex(3, 4); \r\n  System.out.println(c1.add(c2)); \r\n  System.out.println(c1.subtract(c2)); \r\n  System.out.println(c1.multiply(c2)); \r\n  System.out.println(c1.divide(c2)); \r\n } \r\n} \r\nclass Patient { \r\n private String name; \r\n private char sex; \r\n private int age; \r\n private float weight; \r\n private boolean allergies; \r\n public String getName() { \r\n  return name; \r\n } \r\n public void setName(String name) { \r\n  this.name = name; \r\n } \r\n public char getSex() { \r\n  return sex; \r\n } \r\n public void setSex(char sex) { \r\n  this.sex = sex == \'M\' ? sex : \'F\'; \r\n } \r\n public int getAge() { \r\n  return age; \r\n } \r\n public void setAge(int age) { \r\n  this.age = Math.max(1, age); \r\n } \r\n public float getWeight() { \r\n  return weight; \r\n } \r\n public void setWeight(float weight) { \r\n  this.weight = Math.max(0.0f, weight); \r\n } \r\n public boolean getAllergies() { \r\n  return allergies; \r\n } \r\n public void setAllergies(boolean allergies) { \r\n  this.allergies = allergies; \r\n } \r\n}');
INSERT INTO `programquestions` VALUES ('5', '编程题', '15', 'Student类: public class Student { String name =\"小强\"; public String getName() { return name; } public void setName(String name) { this.name = name; } } Statics类: public class Statics { String str; public Statics() { this.str = new Student().getName(); } } }');
INSERT INTO `programquestions` VALUES ('5', '编程题', '16', 'class TestString{\r\n  String s[] ; \r\n  public TestString(int length){ \r\n    s=new String [lenth]; \r\n  } \r\n \r\n  private void setter(){ \r\n   \r\n  } \r\n  private void getter(){ \r\n   \r\n } \r\n \r\n private void dispS(){ \r\n   if(s==null){ \r\n     System.out.println(\"s is null ! \"); \r\n   }else{ \r\n   for(int i=0 ;i<s.length;++i) \r\n     System.out.println(this.s[i]); \r\n   } \r\n  } \r\n}');
INSERT INTO `programquestions` VALUES ('5', '编程题', '17', 'import java.io.*;\r\npublic class Point   {    int x,y;    public Point(int x,int y)   {    this.x = x;    this.y = y;   }    public Point getPoint()   {    Point tempPoint = new Point(x,y);    return tempPoint;    }     public void setPoint(Point point)    {     this.x = point.x;     this.y = point.y;    }      public static void main(String args[])    {     Point Point1 = new Point(3,4); \r\n    System.out.println(\"Point1:\"+\"(\"+Point1.x+\",\"+Point1.y+\")\");      Point Point2 = Point1.getPoint();     System.out.println(\"Point2:\"+\"(\"+Point2.x+\",\"+Point2.y+\")\");      Point Point3 = new Point(5,6);     Point1.setPoint(Point3);     System.out.println(\"Point1:\"+\"(\"+Point1.x+\",\"+Point1.y+\")\");    }     }');
INSERT INTO `programquestions` VALUES ('5', '编程题', '18', 'public class xt4_01\r\n{  \r\npublic static void main( String args[] )  \r\n{ \r\n70 for(int x=2;x<=200;x++)  \r\nss(x) ;  \r\nSystem.out.println();  \r\n}  \r\npublic static void ss(int x)  \r\n{  \r\nint i,j,flag;  \r\nflag=1;  \r\ni=(int)(Math.sqrt(x));  \r\nfor(j=2;j<=i;j++)  \r\nif((x%j)==0)  \r\n{flag=0; break;}  \r\nif(flag==1)  \r\nSystem.out.print(x+\"	\");  \r\n}  \r\n}');
INSERT INTO `programquestions` VALUES ('5', '编程题', '19', 'public class xt4_02{\n	public static void main (String args[ ]){\n		for (int i=0;i<=15;i++) {\n			long n=i;\n			System.out.print(fib(n)+\"  \");\n		}\n		System.out.println();\n	}\n	static long fib (long n){\n		long sum;\n		if (n==0||n==1){\n			sum=n;\n		} else{\n			sum=fib (n-1)+fib(n-2);\n		}\n		return  sum;\n	}\n}');
INSERT INTO `programquestions` VALUES ('5', '编程题', '20', 'public class xt4_03\n{\n	static int n;\n	public static void main (String[] args)  \n	{\n		if(args.length >= 3)  \n		{\n			int n;\n			float f;\n			double d;\n			n=Integer.parseint(args[0]);\n			f=float.valueOf(args[1]).floatValue( );\n			d=double.valueOf(args[2]).doubleValue( );\n			System.out.println(n+\"的平方根为: \"+mySqrt(n));\n			System.out.println(f+\"的平方根为: \"+mySqrt(f));\n			System.out.println(d+\"的平方根为: \"+mySqrt(d));\n		} else {\n			System.out.println(\"缺命令行参数!\");\n			System.exit(-1);\n		}\n	}\n	static int mySqrt(int x)  \n	{\n		return (int)Math.sqrt(x);\n	}\n	static float  mySqrt(float x)  \n	{\n		return (float)Math.sqrt(x);\n	}\n	static double  mySqrt(double x)  \n	{\n		return Math.sqrt(x);\n	}\n}');
INSERT INTO `programquestions` VALUES ('5', '编程题', '21', 'public class xt4_04\n{\n	public static void main(String args[])  \n	{\n		final int NUMBER = 100;\n		int count = 10;\n		int randomNum = 0;\n		int probability[] = new int[6];\n		for (int i=0;i<6; i++)  \n		probability[i] = 0;\n		for (int i=0; i<NUMBER;i++)  \n		{\n			randomNum = (int)(Math.random()*6) + 1;\n			probability[randomNum-1]++;\n			System.out.print(randomNum + \"	\");\n			if(i%count == 9)  \n			System.out.println();\n		}\n		for (int i=0;i<6;i++)  \n		System.out.println(\"\n\" + (i+1) + \":	\" + probability[i]);\n	}\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '1', 'package xsc;\npublic class Triangle {\n	private double a = 0;\n	private double b = 0;\n	private double c = 0;\n	private String message = \"\";\n	public Triangle() {\n	}\n	public Triangle(double a, double b, double c) {\n		this.a = a;\n		this.b = b;\n		this.c = c;\n	}\n	public String getMessage() {\n		return message;\n	}\n	public void setMessage(String message) {\n		this.message = message;\n	}\n	public double getA() {\n		return a;\n	}\n	public void setA(double a) {\n		this.a = a;\n	}\n	public double getB() {\n		return b;\n	}\n	public void setB(double b) {\n		this.b = b;\n	}\n	public double getC() {\n		return c;\n	}\n	public void setC(double c) {\n		this.c = c;\n	}\n	public double area() {\n		// 计算面积的方法 \n		double s = (a + b + c) / 2;\n		return Math.round(Math.sqrt(s * (s - a) * (s - b) * (s - c)));\n	}\n	public double perimeter() {\n		// 计算 周长的方法 \n		return a + b + c;\n	}\n	public Boolean isTriangle() {\n		// 判断三角形是否成立的方法 \n		Boolean temp = false;\n		if (a + b > c && a + c > b && b + c > a) \n		   temp = true;\n		return temp;\n	}\n	public String toString() {\n		//判断三角形形状的方法 \n		if (a == b && b == c) \n		   message = \"此三角形是等边三角形\";\n		if (a != b && b != c) \n		   message = \"此三角形是任意三角形\";\n		if ((a == b && b != c) || (a == c && b != c) || (c == b && b != a)) \n		   message = \"此三角形是等腰三角形\";\n		return message;\n	}\n}\npackage xsc;\nimport javax.swing.*;\npublic class GoTriangle {\n	public static void main(String[] args) {\n		Triangle triangle = null;\n		String a = JOptionPane.showInputDialog(\"请输入三角形的任意一边\", \"\");\n		String b = JOptionPane.showInputDialog(\"请输入三角形的任意一边\", \"\");\n		String c = JOptionPane.showInputDialog(\"请输入三角形的任意一边\", \"\");\n		try {\n			int ba = Integer.parseint(a);\n			int bb = Integer.parseint(b);\n			int bc = Integer.parseint(c);\n			triangle = new Triangle(ba, bb, bc);\n		}\n		catch (Exception e) {\n			JOptionPane.showMessageDialog(null, \"请输入三角形边的数据格式有误\");\n		}\n		if (triangle.isTriangle()) {\n			JOptionPane.showMessageDialog(null, \"你输入的三边可以构成一个三角形\");\n			triangle.toString();\n			JOptionPane.showMessageDialog(null, \"你的三角形的类型为\" \n			     + triangle.getMessage());\n			JOptionPane.showMessageDialog(null, \"你的三角形的面积为\" + triangle.area());\n			JOptionPane.showMessageDialog(null, \"你的三角形的周长为\" \n			     + triangle.perimeter());\n		} else {\n			JOptionPane.showMessageDialog(null, \"你输入的三边不可以构成一个三角形\");\n		}\n	}\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '2', 'class Point {\n int x;\nint y;\npublic Point() {\n	x = 0;\n	y = 0;\n}\npublic Point(int x, int y) {\n	this.x = x;\n	this.y = y;\n}\npublic void show() {\n	System.out.println(\"我是点，我的位置在：纵坐标为 \" + x + \"横坐标为 \" + y);\n}\n}\nclass Circle extends Point { \n int rad;\npublic Circle() {\n	super();\n	rad = 0;\n}\npublic Circle(int x, int y, int rad) {\nsuper(x, y);\nthis.rad = rad;\n}\npublic double area() {\nreturn Math.PI * rad * rad;\n}\npublic void show() {\n	System.out.println(\"我是圆，我的位置在：纵坐标为 \" + x + \"横坐标为 \" + y);\n}\n}\nclass Cylinder extends Circle {\nint height;\npublic Cylinder() {\nsuper();\nheight = 0;\n}\npublic Cylinder(int x, int y, int rad, int height) {\n	super(x, y, rad);\n	this.height = height;\n}\npublic double vol() {\n	return Math.PI * rad * rad * height;\n}\npublic double area() {\n	return 2 * Math.PI * rad * rad + 2 * Math.PI * rad * height;\n}\npublic void show() {\n	System.out.println(\"我是圆柱，我的位置在：纵坐标为 \" + x + \"横坐标为 \" + y);\n}\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '3', 'public class Rectangle {\n	private double length;\n	private double width;\n	public double getLength() {\n		return length;\n	}\n	public void setLength(double length) {\n		this.length = length;\n	}\n	public double getWidth() {\n		return width;\n	}\n	public void setWidth(double width) {\n		this.width = width;\n	}\n	public Rectangle (){\n	}\n	public Rectangle (double length){\n		this.length=length;\n	}\n	public Rectangle (double length,double width){\n		this.length=length;\n		this.width=width;\n	}\n	public double area(){\n		return length*width;\n	}\n}\npublic class RectangleDemo {\n	public static void main(String[] args) {\n		Rectangle r=new Rectangle ();\n		r.setLength(12.0);\n		r.setWidth(30.0);\n		System.out.println(\"长方形的面积为、\"+r.area());\n	}\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '4', 'public class hhe {\n	int length;\n	int width;\n	int high;\n	public int getLength() {\n		return length;\n	}\n	public void setLength(int length) {\n		this.length = length;\n	}\n	public int getWidth() {\n		return width;\n	}\n	public void setWidth(int width) {\n		this.width = width;\n	}\n	public int getHigh() {\n		return high;\n	}\n	public void setHigh(int high) {\n		this.high = high;\n	}\n	public hhe(){\n	}\n	public hhe (int length,int width,int high){\n		this.length=length;\n		this.high=high;\n		this.width=width;\n	}\n	public int tiJi(){\n		return length*high*width;\n	}\n}\nimport javax.swing.JOptionPane;\npublic class qiuZhi {\n	public static void main(String[] args) {\n		JOptionPane.showMessageDialog(null,\"创建一个求长方体体积的对象！\");\n		hhe as=new hhe();\n		as.setLength(5);\n		System.out.println(\"您输入的长是、\"+as.getLength());\n		as.setWidth(12);\n		System.out.println(\"您输入的宽是、\"+as.getWidth());\n		as.setHigh(10);\n		System.out.println(\"您输入的高是、\"+as.getHigh());\n		System.out.println(\"长方体的体积为、\"+as.tiJi());\n	}\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '5', '\r\npublic class people { \r\n String name=\"\"; \r\n String sex=\"\"; \r\n int age; \r\n int high; \r\n public String getName() { \r\n  return name; \r\n } \r\n public void setName(String name) { \r\n  this.name = name; \r\n } \r\n public String getSex() { \r\n  return sex; \r\n } \r\n public void setSex(String sex) { \r\n  this.sex = sex; \r\n } \r\n public int getAge() { \r\n  return age; \r\n } \r\n public void setAge(int age) { \r\n  this.age = age; \r\n } \r\n public int getHigh() { \r\n  return high; \r\n } \r\n public void setHigh(int high) { \r\n  this.high = high; \r\n } \r\n public people (){} \r\n public people (String name,String sex,int age,int high){ \r\n  this.name=name; \r\n  this.age=age; \r\n  this.sex=sex; \r\n  this.high=high; \r\n } \r\n public void shuXing(){ \r\n  System.out.println(\"所以我们都叫他、\");  \r\n   \r\n  System.out.println(\"瘦猴子！哈哈哈\");  \r\n  System.out.println(\"头发很乱，就像犀利哥一样！\"); \r\n } \r\n \r\n} \r\npublic class xianShi { \r\n public static void main(String[] args) { \r\n  people ss = new people (); \r\n  ss.setName(\"小丑\"); \r\n  ss.setSex(\"不男不女，传说中的人妖!\"); \r\n  ss.setAge(150); \r\n  ss.setHigh(170); \r\n \r\n  System.out.println(\"此人的名字、\" + ss.getName() + \'\n\' + \"性别、\" + ss.getSex() \r\n    + \'\n\' + \"年龄、\" + ss.getAge() + \'\n\' + \"岁\" + \"身高、\" \r\n    + ss.getHigh() + \"cm\"); \r\n  ss.shuXing(); \r\n } \r\n \r\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '6', 'public class e {\n	int a;\n	int b;\n	int c;\n	public e() {\n	}\n	public e(int a) {\n		this.a = a;\n	}\n	public e(int a, int b) {\n		this.a = a;\n		this.b = b;\n	}\n	public e(int a, int b, int c) {\n		this.a = a;\n		this.b = b;\n		this.c = c;\n	}\n	public int max() {\n		int x = a > b ? a : b;\n		int w = c > x ? c : x;\n		System.out.println(\"最大的一个数是、\" + w);\n		return w;\n	}\n	public int getA() {\n		return a;\n	}\n	public void setA(int a) {\n		this.a = a;\n	}\n	public int getB() {\n		return b;\n	}\n	public void setB(int b) {\n		this.b = b;\n	}\n	public int getC() {\n		return c;\n	}\n	public void setC(int c) {\n		this.c = c;\n	}\n	public int min() {\n		int x = a < b ? a : b;\n		int w = c < x ? c : x;\n		System.out.println(\"最小的一个数是、\" + w);\n		return w;\n	}\n	public int Avg() {\n		int x = (a + b + c) / 3;\n		System.out.println(\"平均数是、\" + x);\n		return x;\n	}\n	public static void main(String[] saf) {\n		e sd = new e();\n		sd.setA(4);\n		sd.setB(5);\n		sd.setC(6);\n		sd.max();\n		sd.min();\n		sd.Avg();\n	}\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '7', '\r\npublic class f { \r\n String erDuo; \r\n String yanJing; \r\n String biZi; \r\n String zuiBa; \r\n String shou; \r\n String tui; \r\n public f() { \r\n } \r\n public f(String erDuo, String yanJing, String biZi, String zuiBa, \r\n   String shou, String tui) { \r\n  this.erDuo = erDuo; \r\n  this.yanJing = yanJing; \r\n  this.biZi = biZi; \r\n  this.zuiBa = zuiBa; \r\n  this.shou = shou; \r\n  this.tui = tui; \r\n } \r\n public String getErDuo() { return \"可以听见！！\";} \r\n public void setErDuo(String erDuo) { this.erDuo = erDuo;} \r\n public String getYanJing() { return \"可以看见\";} \r\n public void setYanJing(String yanJing) { this.yanJing = yanJing;} \r\n public String getBiZi() { return biZi;} \r\n public void setBiZi(String biZi) { this.biZi = biZi;} \r\n public String getZuiBa() { return \"可以说话\";} \r\n public void setZuiBa(String zuiBa) {this.zuiBa = zuiBa;} \r\n public String getShou() { return \"可以拿东西\";} \r\n public void setShou(String shou) { this.shou = shou;} \r\n public String getTui() { return \"可以走路！！\";} \r\n public void setTui(String tui) { \r\n  this.tui = tui; \r\n } \r\n public static void main(String[] gds) { \r\n  f sd = new f(); \r\n  sd.setBiZi(\"可以闻到\"); \r\n  System.out.println(sd.getBiZi()); \r\n  System.out.println(sd.getErDuo()); \r\n  System.out.println(sd.getShou()); \r\n  System.out.println(sd.getTui()); \r\n  System.out.println(sd.getYanJing()); \r\n  System.out.println(sd.getZuiBa()); \r\n } \r\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '8', '  public class changFangTi {\r\n public int chang; \r\n    public int kuan; \r\n public int getChang() { \r\n  return chang; \r\n } \r\n public void setChang(int chang) { \r\n  this.chang = chang; \r\n } \r\n public int getKuan() { \r\n  return kuan; \r\n } \r\n public void setKuan(int kuan) { \r\n  this.kuan = kuan; \r\n } \r\n} \r\npublic class changFangTi2 extends changFangTi { \r\n public int gao; \r\n public changFangTi2() { \r\n } \r\n public changFangTi2(int gao) { \r\n  this.gao = gao; \r\n } \r\n public int getGao() { \r\n  return gao; \r\n } \r\n public void setGao(int gao) { \r\n  this.gao = gao; \r\n } \r\n public int jiShu() { \r\n  return chang * kuan * gao; \r\n } \r\n public static void main(String[] ag) { \r\n  changFangTi2 s = new changFangTi2(); \r\n  s.setChang(12); \r\n  System.out.println(\"长方体的长是、\" + s.getChang()); \r\n  s.setKuan(5); \r\n  System.out.println(\"长方体的宽是、\" + s.getKuan()); \r\n  s.setGao(6); \r\n  System.out.println(\"长方体的高是、\" + s.getGao()); \r\n  System.out.println(\"长方体的体积为、\" + s.jiShu()); \r\n } \r\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '9', '\r\n   public class bus { \r\n  int speed; \r\n  int number; \r\n    public bus(){} \r\n    public bus(int speed){ \r\n     this.speed=speed; \r\n    } \r\n    public bus(int speed,int number){ \r\n     this.speed=speed; \r\n     this.number=number; \r\n    } \r\n public int getSpeed() { \r\n  return speed; \r\n } \r\n public void setSpeed(int speed) { \r\n  this.speed = speed; \r\n } \r\n public int getNumber() { \r\n  return number; \r\n } \r\n public void setNumber(int number) { \r\n  this.number = number; \r\n } \r\n public void addA(int s) { \r\n  if (s > 120) { \r\n   speed = 120; \r\n  } else { \r\n   speed = speed + s; \r\n  } \r\n } \r\n public void downA(int n) { \r\n  if (speed < 0) { \r\n   speed = 0; \r\n  } else { \r\n   speed = speed - n; \r\n  } \r\n } \r\n public void addRen(int ren){ \r\n  if(ren>45){ \r\n   number=45; \r\n  }else{ \r\n   number=number+ren; \r\n  } \r\n } \r\n     public void downRen(int ren){ \r\n   if(ren<0){ \r\n    number=0; \r\n   }else{ \r\n    number=number-ren; \r\n   } \r\n  } \r\n} \r\npublic class bus2 extends bus{  \r\n public static void main(String[] args) { \r\n  bus2 zi=new bus2(); \r\n       zi.addA(14); \r\n       zi.addRen(15); \r\n  System.out.println(\"车的速度为、\"+zi.getSpeed()+\"     \"+\"车上的人数为、\"+zi.getNumber()); \r\n } \r\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '10', ' public class Animal {\r\n String type=\"\"; \r\n public Animal(){ \r\n } \r\n public Animal(String type ){ \r\n this.type=type; \r\n } \r\n public void sound(){ \r\n } \r\npublic class Dog extends Animal { \r\n String color; \r\n public Dog (){ \r\n super();} \r\n public Dog (String type,String color){ \r\n this.type=type; \r\n this.color=color;} \r\n public void sound(){ \r\n System.out.println(\"我的宠物:\"+type+\'	\'+\"颜色:\"+color);} \r\npublic class Cat extends Animal { \r\n String color; \r\n public Cat(){super();} \r\n public Cat(String type ,String color){ \r\n this.type=type; \r\n this.color=color;} \r\n public void sound(){ \r\n System.out.println(\"我的宠物:\"+type+\'	\'+\"颜色:\"+color);} \r\npublic class AnimalDemo { \r\n public static void main(String[] args) { \r\n  Dog dog =new Dog(\"狗\",\"红色\"); \r\n  dog.sound(); \r\n  Cat cat =new Cat(\"猫\",\"黑色\"); \r\n  cat.sound(); \r\n } \r\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '11', 'String name;\nint age;\nString sex;\npublic xuesheng(){\n}\npublic xuesheng(String name,int age,String sex){\n	this.name=name;\n	this.age=age;\n	this.sex=sex;\n}\npublic String toString(){\n	return \"名字、\"+name+\"       \"+\"年龄、\"+age+\"       \"+\"性别、\"+sex;\n}\npublic String getName() {\n	return name;\n}\npublic void setName(String name) {\n	this.name = name;\n}\npublic int getAge() {\n	return age;\n}\npublic void setAge(int age) {\n	this.age = age;\n}\npublic String getSex() {\n	return sex;\n}\npublic void setSex(String sex) {\n	this.sex = sex;\n}\n}\npublic class xuesheng2 {\npublic static void main(String[] args) {\n	xuesheng x=new xuesheng(\"张三\",59,\"男\");\n	xuesheng d=new xuesheng(\"小红\",56,\"女\");\n	int w=x.getAge();\n	int i=d.getAge();\n	System.out.println(x.toString());\n	System.out.println(d.toString());\n	if(w>i){\n		System.out.println(\"年龄较大的一个、\"+w+\"岁\");\n	} else{\n		System.out.println(\"年龄较大的一个、\"+i+\"岁 \");\n	}\n}\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '12', 'public class chuangjian {\n	private String name;\n	private String sex;\n	private int age;\n	public chuangjian() {\n	}\n	public chuangjian(String name, String sex, int age) {\n		this.name = name;\n		this.sex = sex;\n		this.age = age;\n	}\n	public int setAge() {\n		if (age > 23 && age < 50) {\n			age = age + 1;\n			return 0;\n		} else {\n			return 1;\n		}\n	}\n	public String getName() {\n		return name;\n	}\n	public String getSex() {\n		return sex;\n	}\n	public int getAge() {\n		return age;\n	}\n	public String toString() {\n		return \"姓名、\" + name + \"    \" + \"性别、\" + sex + \"   \" + \"年龄 、\" + age;\n	}\n}\npublic class chuangjian2 extends chuangjian {\n	private String banJi;\n	public chuangjian2() {\n	}\n	public chuangjian2(String name, String sex, int age, String banJi) {\n		super(name, sex, age);\n		this.banJi = banJi;\n	}\n	public String toString() {\n		return super.toString() + \"班级、\" + banJi;\n	}\n	public String getBanJi() {\n		return banJi;\n	}\n	public void setBanJi(String banJi) {\n		this.banJi = banJi;\n	}\n}\npublic class chuangjian3 extends chuangjian {\n	private int jiaoShiHao;\n	public chuangjian3() {\n	}\n	public chuangjian3(String name, String sex, int age, int jiaoShiHao) {\n		super(name, sex, age);\n		this.jiaoShiHao = jiaoShiHao;\n	}\n	public String fangfa() {\n		return super.toString() + \"号码、\" + jiaoShiHao;\n	}\n	public int getJiaoShiHao() {\n		return jiaoShiHao;\n	}\n	public void setJiaoShiHao(int jiaoShiHao) {\n		this.jiaoShiHao = jiaoShiHao;\n	}\n}\npublic class chuangjian4 {\n	public static void main(String[] args) {\n		chuangjian2 c=new chuangjian2(\"张三\",\"男\",8,\"0920181\");\n		System.out.println(c.toString());\n		chuangjian3 d=new chuangjian3(\"小红\",\"女\",45,12);\n		System.out.println(d.fangfa());\n	}\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '13', 'public class gd {\n	String name=\"\";\n	public gd(){\n	}\n	public gd(String name){\n		this.name=name;\n	}\n	public String getName() {\n		return name;\n	}\n	public void setName(String name) {\n		this.name = name;\n	}\n}\npublic class gd2 extends gd {\n	String ball;\n	public String getBall() {\n		return ball;\n	}\n	public void setBall(String ball) {\n		this.ball = ball;\n	}\n	public gd2(String s) {\n		super(s);\n	}\n	public gd2(String name, String ball) {\n		this.name = name;\n		this.ball = ball;\n	}\n}\npublic class gd3 extends gd {\n	String ball;\n	public gd3() {\n		super();\n	}\n	public gd3(String name, String ball) {\n		this.name = name;\n		this.ball = ball;\n	}\n	public String getBall() {\n		return ball;\n	}\n	public void setBall(String ball) {\n		this.ball = ball;\n	}\n	public static void main(String[] args) {\n		gd g = new gd();\n		gd2 gd = new gd2(\"\");\n		gd3 sd = new gd3();\n		g.setName(\"坏人\");\n		gd.setBall(\"在踢足球！！\");\n		sd.setBall(\"在打篮球！！\");\n		System.out.println(gd.getName() + gd.getBall());\n		System.out.println(sd.getName() + sd.getBall());\n	}\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '14', 'import java.io.*;\npublic class box {\n	double l;\n	double w;\n	double h;\n	public void main(String[] sdf) throws IOException {\n		InputStreamReader ir = new InputStreamReader(System.in);\n		BufferedReader br = new BufferedReader(ir);\n		String str;\n		box mybox;\n		mybox = new box();\n		double vol;\n		System.out.println(\"请输入长、\");\n		str = br.readLine();\n		mybox.l = double.parsedouble(str);\n		System.out.println(\"请输入宽、\");\n		str = br.readLine();\n		mybox.w = double.parsedouble(str);\n		System.out.println(\"请输入高、\");\n		str = br.readLine();\n		mybox.h = double.parsedouble(str);\n		vol = mybox.l * mybox.h * mybox.w;\n		System.out.println(\"长方体的体积为、\" + vol);\n	}\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '15', '\r\nimport java.io.*; \r\npublic class max { \r\n static int maxFrom(int x,int y,int z){ \r\n  int max;max=Math.max(x, y); \r\n  max=Math.max(max, z); \r\n  return max; \r\n } \r\n public static void main(String[] sad)throws IOException{ \r\n  BufferedReader br=new BufferedReader(new InputStreamReader(System.in)); \r\n  String str; \r\n  int max; \r\n  System.out.println(\"请输入三个数、\"); \r\n  str=br.readLine(); \r\n  int a=Integer.parseInt(str); \r\n  str=br.readLine(); \r\n  int b=Integer.parseInt(str); \r\n  str=br.readLine(); \r\n  int c=Integer.parseInt(str); \r\n  max=maxFrom(a,b,c); \r\n  System.out.println(\"最大的一个数是、\"+max); \r\n } \r\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '16', '\r\npublic abstract class chouXiang { \r\n int length; \r\n int heigth; \r\n abstract int sd(); \r\n abstract int area(int length,int heigth); \r\n} \r\npublic  class chouXiang2 extends chouXiang { \r\n int area(int length, int heigth) { \r\n  return length*heigth; \r\n } \r\n int sd() { \r\n  return 0; \r\n } \r\n} \r\npublic class chouXiang3 extends chouXiang { \r\n int area(int length, int heigth) { \r\n  return (length * heigth) / 2; \r\n } \r\n int sd() { \r\n  return 0; \r\n } \r\n public static void main(String[] args) { \r\n  chouXiang3 c = new chouXiang3(); \r\n  System.out.println(\"三角形的面积为、\" + c.area(10, 6)); \r\n  chouXiang2 d = new chouXiang2(); \r\n  System.out.println(\"长方形的面积为、\" + d.area(8, 9)); \r\n } \r\n \r\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '17', '\r\nPublic abstract class MP{ \r\nAbstract int max (int a,int b,intc);  \r\nAbstract int min(int a,int b,int c); \r\n} \r\nPublic class P extends M { \r\nInt max(int a ,int b,int c){ \r\nInt x=a>b?a:b; \r\nReturn  x>c?x:c;} \r\nInt min(int a,int b,int c){ \r\nInt x=a<b?a:b; \r\nReturn x<c?x:c;} \r\nPublic static void main(String [] ag){ \r\nP s=new P(); \r\nSystem.out.println(s.max(3,7,9); \r\nSystem.out.println(s.min(3,7,9); \r\n} \r\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '18', 'interface PatCarel {\n	public void raise();\n	public void play();\n}\nclass Worker implements PatCarel {\n	String name;\n	String sex;\n	Worker(String name,String sex) {\n		this.name = name;\n		this.sex = sex;\n	}\n	public void raise() {\n		System.out.println(\"喂养小猫\");\n	}\n	public void play() {\n		System.out.println(\"no time\");\n	}\n}\nclass Farmer implements PatCarel {\n	int age;\n	int income;\n	Farmer (int age,int income) {\n		this.age = age;\n		this.income = income;\n	}\n	public void raise() {\n		System.out.println(\"喂养小狗\");\n	}\n	public void play() {\n		System.out.println(\"no money\");\n	}\n}\nclass Officer implements PatCarel {\n	int income;\n	int age;\n	Officer(int income,int age) {\n		this.income = income;\n		this.age = age;\n	}\n	public void raise() {\n		System.out.println(\"喂养小鸟\");\n	}\n	public void play() {\n		System.out.println(\"have money\");\n	}\n}\npublic  class TestInterface {\n	public static void main(String[] args) {\n		PatCarel p = new Worker(\"Tom\",\"male\");\n		PatCarel m  = new Farmer(66,10000);\n		PatCarel q = new Officer (100000,60);\n		p.raise();\n		p.play() ;\n		m.play() ;\n		q.raise();\n		q.play() ;\n	}\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '19', 'public class bus {\r\n private int number;//私有属性，只有通过方法才能获取                              全局变量 \r\n int speed; \r\n public int getNumber() {//获取number的值 \r\n  return number; \r\n } \r\n public void setNumber(int number) {//改变number的值 \r\n  this.number = number; \r\n } \r\n public int getSpeed(int speed) {//获取speed的值 \r\n  return speed; \r\n } \r\n public void setSpeed(int speed) {//改变speed的值 \r\n  this.speed = speed; \r\n } \r\n public bus() {//不带参数的构造方法 \r\n } \r\n public bus(int number) {//带一个参数的构造方法 \r\n  this.number = number; \r\n } \r\n public bus(int number, int speed) {//带两个参数的构造方法 \r\n  this.number = number; \r\n  this.speed = speed; \r\n } \r\n public void add(int number) { \r\n  if (number > this.number) { \r\n   this.number = 0; \r\n  } else { \r\n   this.number = this.number - number; \r\n  } \r\n } \r\n \r\n} \r\nimport javax.swing.*; \r\npublic class bus2 { \r\n public static void main(String[] args) { \r\n  JOptionPane.showMessageDialog(null, \"创建一个35人的对象！\");//显示窗口 \r\n  bus bus =new bus(35,50); \r\n  String st =JOptionPane.showInputDialog(\"要求下车人数、\");//输入要下车的人数 \r\n  try{int s =Integer.parseInt(st); \r\n  if(s<0){JOptionPane.showMessageDialog(null,\"兄弟，不要乱来！\");} \r\n  else{bus.add(s);}//调用前面的add方法 \r\n  } \r\n  catch(Exception e){ \r\n   JOptionPane.showMessageDialog(null,\"兄弟，你在乱输哦！\"); \r\n  } \r\n  JOptionPane.showMessageDialog(null,\"车上还有\"+bus.getNumber()+\"人\"); \r\n \r\n } \r\n \r\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '20', 'public class Circle {\r\n protected double radius; \r\n public Circle(){ \r\n } \r\n public void fangFa(){ \r\n System.out.println(\"圆的面积为、\"+Math.PI*radius*radius); \r\n } \r\n public double getRadius() { \r\n  return radius; \r\n } \r\n public void setRadius(int radius) { \r\n  this.radius = radius; \r\n } \r\n public double getR() { \r\n  return radius; \r\n } \r\n public void setR(int r) { \r\n  this.radius = r; \r\n } \r\n } \r\npublic class Cylinder extends Circle { \r\n      protected double height; \r\n      public void gao(){ \r\n      } \r\n      public void gao(int height){ \r\n       this.height=height; \r\n      } \r\n      public void tiJi(){ \r\n       System.out.println(\"圆柱体的体积为、\"+Math.PI*(radius*radius)*height); \r\n      } \r\n public double getHeight() { \r\n  return height; \r\n } \r\n public void setHeight(int height) { \r\n  this.height = height; \r\n } \r\n public double getR() { \r\n  return radius; \r\n } \r\n public void setR(int r) { \r\n  this.radius= r; \r\n } \r\n} \r\npublic class Cylinder2 { \r\n public static void main(String[] args) { \r\n  Circle c=new Circle(); \r\n  Cylinder cc=new Cylinder(); \r\n  cc.gao(12); \r\n  cc.setR(5); \r\n  cc.tiJi(); \r\n  c.setRadius(1); \r\n  c.setR(4); \r\n  c.fangFa(); \r\n  System.out.println(\"圆柱体的半径为:\"+cc.getRadius()); \r\n  System.out.println(\"圆柱体的高为:\"+cc.getHeight()); \r\n } \r\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '21', '\r\npublic abstract class shu { \r\n abstract int max(int a,int b,int c); \r\n abstract double min(double a,double b,double c); \r\n} \r\npublic class Operation extends shu { \r\n @Override \r\n int max(int a, int b, int c) { \r\n  // TODO Auto-generated method stub \r\n  int x=a>b?a:b; \r\n  return x>c?x:c; \r\n } \r\n double min(double a, double b, double c) { \r\n   double x=(a<b?a:b); \r\n  return  x<c?x:c; \r\n } \r\n public static void main(String[] args) { \r\n  Operation o=new Operation(); \r\n  System.out.println(\"最大的一个数是、\"+o.max(5, 7, 2)); \r\n  System.out.println(\"最小的一个数是、\"+o.min(4.6,44,5.6)); \r\n } \r\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '22', 'public class zhengfatiti {\n	int r;\n	double l;\n	int w;\n	int h;\n	public zhengfatiti(){\n	}\n	public double zhengfatiti(int l){\n		//正方体、长*长*长 \n		return l*l*l;\n	}\n	public double zhengfatiti(int r,int h){\n		//圆柱体、3.14*半径*高 \n		return Math.PI*r*h;\n	}\n	public int zhengfatiti(int l,int w,int h ){\n		//长方体、长*宽*高 \n		return l*w*h;\n	}\n	public double zhengfatitit(double r,double h){\n		//圆锥体、（3.14*半径*高）/3 \n		return (Math.PI*r*h)/3;\n	}\n	public double zhengfatiti(double l){\n		return 4.0/3*Math.PI*l*l*l;\n	}\n	public double zhengfatiti1(double r,int l){\n		//圆的面积 \n		return Math.PI*4*r*r;\n	}\n	public static void main(String [] ag){\n		zhengfatiti z=new zhengfatiti();\n		System.out.println(z.zhengfatiti(3,4,5));\n	}\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '23', '\r\npublic interface Computer { \r\n public static final int a=6; \r\n public static final int w=2; \r\n public abstract int add(); \r\n public abstract int substract(); \r\n public abstract int multiply(); \r\n public abstract int divide(); \r\n} \r\npublic class Compute implements Computer { \r\n public int add(){ \r\n  return a+w; \r\n } \r\n public int substract() { \r\n  return a-w; \r\n } \r\n public int multiply() { \r\n  return a*w; \r\n } \r\n public int divide() { \r\n  return a/w; \r\n } \r\n public static void main(String[] args) { \r\n Compute  c=new Compute(); \r\n System.out.println(\"该算式的加法是、\"+c.add()); \r\n System.out.println(\"该算式的减法是、\"+c.substract()); \r\n System.out.println(\"该算式的乘法是、\"+c.multiply()); \r\n System.out.println(\"该算式的除法是、\"+c.divide()); \r\n } \r\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '24', '\r\npublic interface Myinterface { \r\n public static final int a=3; \r\n public static final int b=4; \r\n public static final int c=5; \r\n public abstract int max(); \r\n public abstract int min(); \r\n} \r\npublic class Operation implements Myinterface { \r\n public int max(){ \r\n  int x=a>b?a:b; \r\n  int k=x>c?x:c; \r\n  return k; \r\n } \r\n public int min(){ \r\n  int x=a<b?a:b; \r\n  int k=x<c?x:c; \r\n  return k; \r\n } \r\n public static void main(String[] args) { \r\n Operation o=new Operation(); \r\n System.out.println(\"最大的一个数是、\"+o.max()); \r\n System.out.println(\"最小的一个数是、\"+o.min()); \r\n } \r\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '25', '\r\npublic class lizi {// 定义一个外部类 \r\n int rad = 0; \r\n public int mianji(int a) { \r\n  return a * a;// 外部类的成员方法 \r\n } \r\n class leibu { \r\n  int m = 6;// 圆的半径 \r\n  public int mianji() { \r\n   return (int)(Math.PI * m * m);// 内部类的成员方法 \r\n  } \r\n } \r\n  public String toString() { \r\n   leibu l = new leibu(); \r\n   int k = l.mianji(); \r\n   return k + \"\"; \r\n  } \r\n  public static void main(String[] da) { \r\n  lizi d = new lizi(); \r\n  System.out.println(d.toString()); \r\n } \r\n }');
INSERT INTO `programquestions` VALUES ('6', '编程题', '26', '\r\npublic class ssanjian { \r\n   private String face; \r\n   private String suit; \r\n   public  ssanjian(){} \r\n   public ssanjian(String face){ \r\n    this.face=face; \r\n   } \r\n   public ssanjian(String face,String suit){ \r\n    this.face=face; \r\n    this.suit=suit; \r\n   } \r\n   public String toString(){ \r\n    return suit+face; \r\n   } \r\n    \r\n} \r\npublic class ssanjian2 extends ssanjian { \r\n public static void main(String [] sf){ \r\n String f[]={\"A\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"J\",\"Q\",\"K\"}; \r\n String s[]={\"黑桃\",\"红桃\",\"梅花\",\"方块\"}; \r\n ssanjian[] de=new ssanjian[52]; \r\n for(int i =0;i<de.length;i++){ \r\n  de[i]=new ssanjian(f[i%13],s[i/13]); \r\n  System.out.println(de[i].toString()); \r\n  if(i==12||i==25||i==38){ \r\n   System.out.println(); \r\n  } \r\n } \r\n for(int i=0;i<de.length;i++){ \r\n  for(int j=0;j<de.length-i;j++){ \r\n   int se=(int)(Math.random()*(de.length-i)); \r\n   ssanjian er; \r\n   er=de[j]; \r\n   de[j]=de[se]; \r\n   de[se]=er; \r\n  } \r\n } \r\n for(int i =0;i<de.length;i++){ \r\n   \r\n  System.out.print(de[i].toString()+\"  \"); \r\n  if(i==12||i==25||i==38){ \r\n   System.out.println(); \r\n  } \r\n } \r\n }}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '27', '\r\nimport java.io.*; public class Class1 {    public static void main( String args[ ] ) { SubClass a = new SubClass( 10,3 );     System.out.println( a.exp( ));   } } class SuperClass {      float x;   int n;    \r\n  SuperClass( float xx , int nn ) { x = xx ; n = nn; } } class SubClass extends SuperClass { SubClass( float xx , int nn ) { super( xx , nn ); }   float exp( ) { float s = 1; for ( int i = 1; i<=n; i++ ) s = s*x; return s;    }   }');
INSERT INTO `programquestions` VALUES ('6', '编程题', '28', 'public class a {\n	int y;\n	int m;\n	int d;\n	public a(){\n	}\n	public a(int y){\n		this.y=y;\n	}\n	public a(int y,int m){\n		this.y=y;\n		this.m=m;\n	}\n	public a(int y,int m,int d){\n		this.y=y;\n		this.m=m;\n		this.d=d;\n	}\n	public int fangFa(){\n		return y-y;\n	}\n	public int getY() {\n		return y;\n	}\n	public void setY(int y) {\n		this.y = y;\n	}\n	public int getM() {\n		return m;\n	}\n	public void setM(int m) {\n		this.m = m;\n	}\n	public int getD() {\n		return d;\n	}\n	public void setD(int d) {\n		this.d = d;\n	}\n	import java.util.*;\n	public class a1 extends a {\n		public static void main(String[] args) {\n			a as = new a();\n			Calendar c = Calendar.getInstance();\n			int s = Calendar.getInstance().get(Calendar.YEAR);\n			System.out.println(\"现在是、\" + s + \"年\");\n			as.setY(1990);\n			System.out.println(\"您输入的年份是、\" + as.y + \"年\");\n			System.out.println(\"您现在的岁数是、\" + (s - as.getY()) + \"岁\");\n		}\n	}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '29', 'public class b {\n	int a;\n	int c;\n	public b(){\n	}\n	public b(int a){\n		this.a=a;\n	}\n	public b(int a,int c){\n		this.a=a;\n		this.c=c;\n	}\n	public int mianJi(){\n		return a*c;\n	}\n	public int zMianJi(){\n		return a*a;\n	}\n	public int getA() {\n		return a;\n	}\n	public void setA(int a) {\n		this.a = a;\n	}\n	public int getC() {\n		return c;\n	}\n	public void setC(int c) {\n		this.c = c;\n	}\n}\nimport javax.swing.*;\npublic class b1 extends b {\n	public static void main(String [] ad){\n		JOptionPane.showMessageDialog(null, \"创建一个计算面积的对象！\");\n		b1 u=new b1();\n		u.setA(12);\n		u.setC(3);\n		System.out.println(\"矩形的面积为、\"+u.mianJi());\n		System.out.println(\"正方形的面积为、\"+u.zMianJi());\n	}\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '30', '\r\npublic class MyTime { \r\n   private int hour; \r\n   private int minute; \r\n   private int second; \r\n   public MyTime(int h,int m,int s){ \r\n    hour=h; \r\n    minute=m; \r\n    second=s; \r\n   } \r\n   public int getHour() { \r\n return hour; \r\n} \r\npublic void setHour(int hour) { \r\n this.hour = hour; \r\n} \r\npublic int getMinute() { \r\n return minute; \r\n} \r\npublic void setMinute(int minute) { \r\n this.minute = minute; \r\n} \r\npublic int getSecond() { \r\n return second; \r\n} \r\npublic void setSecond(int second) { \r\n this.second = second; \r\n} \r\npublic String toString(){ \r\n    return hour+\":\"+minute+\":\"+second; \r\n   } \r\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '31', '\r\npublic class MyDate { \r\n    private int year; \r\n    private int month; \r\n    private int day; \r\n    public MyDate(int y,int m,int d){ \r\n     year=y; \r\n     month=m; \r\n     day=d; \r\n    } \r\n public int getYear() { \r\n  return year; \r\n } \r\n public void setYear(int year) { \r\n  this.year = year; \r\n } \r\n public int getMonth() { \r\n  return month; \r\n } \r\n public void setMonth(int month) { \r\n  this.month = month; \r\n } \r\n public int getDay() { \r\n  return day; \r\n } \r\n public void setDay(int day) { \r\n  this.day = day; \r\n } \r\n public String toString(){ \r\n   \r\n     return year+\"-\"+month+\"-\"+day; \r\n    } \r\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '32', '');
INSERT INTO `programquestions` VALUES ('6', '编程题', '33', '\r\npublic class FullTime { \r\n MyTime time;//成员变量 \r\n MyDate date; \r\n public FullTime (int y,int m,int d,int h,int minute,int s){ \r\n  time=new MyTime (h,minute,s); \r\n  date=new MyDate (y,m,d); \r\n } \r\n public lianxi getTime() { \r\n  return time; \r\n } \r\n public void setTime(lianxi time) { \r\n  this.time = time; \r\n } \r\n public lianxi2 getDate() { \r\n  return date; \r\n } \r\n public void setDate(lianxi2 date) { \r\n  this.date = date; \r\n } \r\n public String toString(){ \r\n  return date.toString()+\"  \"+time.toString(); \r\n } \r\n public static void main(String [] ad){ \r\n  FullTime l=new FullTime (2010,3,10,9,30,45); \r\n  System.out.println(l.toString()); \r\n } \r\n \r\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '34', 'public class Sports{\n	public void play(){\n		System.out.println (\"运动\");\n	}\n}\nclass Football extends Sports{\n	public void play(){\n		System.out.println (\"足球是用脚踢的\");\n	}\n}\nclass Bascketball extends Sports{\n	public void play(){\n		System.out.println (\"篮球是用手打的\");\n	}\n}\nclass Test{\n	public void howToPlay(Sports sp){\n		sp.play();\n	}\n	public static void main(String[]args){\n		Test t=new Test();\n		t.howToPlay(new Bascketball());\n	}\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '35', '\r\npublic interface Instrument { \r\n    void play(); \r\n} \r\npublic class Piano implements Instrument { \r\n    public Piano() { \r\n    } \r\n    public void play() { \r\n        System.out.println(\"Piano Playing\"); \r\n    } \r\n} \r\npublic class Violin  implements Instrument{ \r\n    public Violin() { \r\n    } \r\n    public void play() { \r\n        System.out.println(\"Piano Playing\"); \r\n    } \r\n} \r\npublic class InstrumentTest { \r\n    public InstrumentTest() { \r\n    } \r\n    public static void main(String[] args) { \r\n        Instrument p=new Piano(); \r\n        Instrument v=new Violin(); \r\n        p.play(); \r\n        v.play(); \r\n    } \r\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '36', '\r\nabstract class Jizhi{ \r\n  int count=0; \r\n}  \r\nclass Cart extends Jizhi{ \r\npublic Cart(){ \r\nSystem.out.println(\"这是一辆公共汽车\"); \r\n} \r\n} \r\n class Bike{ \r\npublic Bike(){ \r\nSystem.out.println(\"这是一辆自行车\"); \r\n} \r\n} \r\npublic class A{ \r\npublic static void main(String[] args){ \r\n  Cart cart=new Cart(); \r\n  Bike bike=new Bike(); \r\n} \r\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '37', 'public class luanxie {\n	String name;\n	luanxie(String name) {\n		this.name = name;\n	}\n	public void p() {\n		System.out.println(\"我的名字叫犀利，人称‘犀利哥’是也！\");\n	}\n}\npublic class luanxie2 extends luanxie {\n	luanxie2() {\n		super(\"\");\n	}\n	public void study() {\n		System.out.println(\"我啊，想都没想过要出名。一次意外让我在网络上这么流行！\");\n	}\n	public static void main(String[] args) {\n		luanxie per = new luanxie(\"\");\n		per.p();\n		luanxie2 stu = new luanxie2();\n		stu.study();\n	}\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '38', 'package bianti;\npublic class show {\n	public String name;\n	public int age;\n	public String degree;\n	public show(String n1, int a1, String d1) // 构造方法 \n	{\n		name = n1;\n		age = a1;\n		degree = d1;\n	}\n	public void show() {\n		System.out.print(\"学生、\" + name + \"   \" + \"年龄、\" + age + \"   \" + \"学位、\" \n		    + degree + \'\n\');\n	}\n}\npublic class Undergraduate extends show {\n	public String specialty;\n	public Undergraduate(String name, int age, String degree, String spe) {\n		super(name, age, degree);\n		specialty = spe;\n	}\n	public void show() {\n		super.show();\n		// 调用父类的方法 \n		System.out.println(\"专业\" + specialty);\n	}\n}\nclass Graduate extends show{\n	public String direction;\n	public Graduate(String name, int age, String degree, String dir) {\n		super(name, age, degree);\n		direction = dir;\n	}\n	public void show() {\n		super.show();\n		// 调用父类的方法 \n		System.out.println(\"研究方向\" + direction);\n	}\n}\npublic class Student1 {\n	public static void main(String[] args) {\n		show stu1 = new show(\"张1\", 20,\"普通\");\n		stu1.show();\n		Undergraduate stu2 = new Undergraduate(\"陈定\", 21, \"本科生\", \"计算机\");\n		stu2.show();\n		Graduate stu3 = new Graduate(\"李生\", 26, \"研究生\", \"信息管理\");\n		stu3.show();\n	}\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '39', 'package bianti;\npublic class Person {\n	String name;\n	public Person(String name){\n		this.name=name;\n	}\n	public void p(){\n		System.out.println(\"这人的名字是、人妖！\");\n	}\n	public String getName() {\n		return name;\n	}\n	public void setName(String name) {\n		this.name = name;\n	}\n}\npackage bianti;\npublic class student extends Person {\n	student(){\n		super(\"猪妖！\");\n	}\n	public void read(){\n		System.out.println(\"他还是一个学生！\");\n	}\n	public static void main(String[] args) {\n		Person p=new Person(\"张\");\n		p.p();\n		student s=new student();\n		s.read();\n	}\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '40', '\r\npublic class d { \r\n String var = \"基本值！\"; \r\n public void method() { \r\n  System.out.println(\"基本方法！\"); \r\n } \r\n} \r\npublic class d1 extends d { \r\n String var = \"基本值\"; // 隐藏父类的var变量 \r\n public void method() { \r\n  System.out.println(\"前面的方法！\"); \r\n } // 覆盖父类的method()方法 \r\n void test() { \r\n  String var = \"值\"; // 局部变量 \r\n  System.out.println(\"值是 \" + var); // 打印method()方法的局部变量 \r\n  System.out.println(\"this的值是、 \" + this.var); // 打印Sub实例的实例变量 \r\n  System.out.println(\"super的值是、 \" + super.var); // 打印在Base类中定义的实例变量 \r\n  method(); // 调用Sub实例的method()方法 \r\n  this.method(); // 调用Sub实例的method()方法 \r\n  super.method(); // 调用在Base类中定义的method()方法 \r\n } \r\n public static void main(String args[]) { \r\n  d1 sub = new d1(); \r\n  sub.test(); \r\n } \r\n \r\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '41', 'import java.util.LinkedList;\r\npublic class Queue { \r\n LinkedList queue; \r\n public Queue() { \r\n  queue = new LinkedList(); \r\n } \r\n void add(Object o) { \r\n  queue.addLast(o); \r\n } \r\n Object get() { \r\n  Object o = null; \r\n  if (!queue.isEmpty()) { \r\n   o = queue.getFirst(); \r\n   queue.removeFirst(); \r\n  } \r\n  return o; \r\n } \r\n public static void main(String[] args){ \r\n  Queue q=new Queue(); \r\n  System.out.println(q.get()); \r\n  q.add(\"1\"); \r\n  System.out.println(q.get()); \r\n  q.add(\"2\"); \r\n  q.add(\"3\"); \r\n  System.out.println(q.get()); \r\n  q.add(\"4\"); \r\n  q.add(\"5\"); \r\n  System.out.println(q.get()); \r\n  System.out.println(q.get()); \r\n  System.out.println(q.get()); \r\n  System.out.println(q.get()); \r\n } \r\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '42', '\r\n源程序：StudentDemo.java  \r\npublic class StudentDemo {  \r\npublic static void main(String args[]) {  \r\nStudent s1= new Student(\"20050101\",92,\'m\',\"李军\",20);  \r\nSystem.out.println(s1.toString()); } }  \r\nclass Student {  \r\nprivate String studentId;  \r\nprivate int classId;  \r\nprivate String studentName;  \r\nprivate char studentGender;  \r\nprivate int studentAge;  \r\nString getStudentId() { return studentId; }  \r\nint getClassId() { return classId; }  \r\nchar getStudentGender() { return studentGender; } \r\nString getStudentName() { return studentName; }  \r\nint getStudentAge() { return studentAge; }  \r\nboolean setStudentAge(int newAge) {  \r\nif( newAge>0 && newAge<130) {  \r\nstudentAge = newAge;  \r\nreturn true; }  \r\nelse {  \r\nSystem.out.println(\"学生年龄输入错误!\");  \r\nreturn false; } }  \r\nStudent(String id, int clsId, char gender, String name, int age) {  \r\nstudentId = id;  \r\nclassId = clsId;  \r\nstudentName = new String(name);  \r\nstudentAge = age;  \r\nstudentGender = gender; }  \r\npublic String toString() {  \r\nreturn \"学生信息：\n\" + \"学号:\" + this.getStudentId() + \"	 班号:\" +  \r\nthis.getClassId() + \"	 姓名 :\" + this.getStudentName() + \"	 性别 :\" +  \r\n((this.getStudentGender()) == \'m\' ? \"男\" : \"女\") + \"	 年龄:\" + this.getStudentAge();  \r\n}  \r\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '43', '源程序：ConstractorTest.java \npublic class ConstractorTest {\n	public static void main(String args[]) {\n		System.out.println(\"创建父类对象：\");\n		SuperClass sc = new SuperClass();\n		System.out.println(\"创建第一个子类对象：\");\n		SubClass sc1 = new SubClass();\n		System.out.println(\"创建第二个子类对象：\");\n		SubClass sc2 = new SubClass(1);\n	}\n}\nclass SuperClass {\n	SuperClass() {\n		System.out.println(\"父类的构造函数\");\n	}\n}\nclass SubClass extends SuperClass {\n	SubClass() {\n		System.out.println(\"子类的第一个构造函数\");\n	}\n	SubClass(int i) {\n		System.out.println(\"子类的第二个构造函数\");\n	}\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '44', '\r\n源程序：Point.java  \r\npublic class Point {  \r\nprivate int x;  \r\nprivate int y;  \r\npublic Point(int x,int y) { \r\nthis.x=x;  \r\nthis.y=y; }  \r\npublic void setPoint(int x1,int y1) {  \r\nx=x1;  \r\ny=y1; }  \r\npublic void getPoint() {  \r\nSystem.out.println(\"point x: \"+ x+\",y: \"+ y); }  \r\npublic static void main(String[] args) {  \r\nPoint origin=new Point(10,10);  \r\norigin.getPoint();  \r\norigin.setPoint(20,20);  \r\norigin.getPoint(); } }');
INSERT INTO `programquestions` VALUES ('6', '编程题', '45', '\r\n源程序：Box.java  \r\npublic class Box {  \r\nprivate double myLength;  \r\nprivate double myWidth;  \r\nprivate double myHeight;  \r\npublic void setDemo(double l,double w,double h) {  \r\nmyLength=l;  \r\nmyWidth=w;  \r\nmyHeight=h;  \r\n}  \r\npublic double Volume(){  \r\nreturn myLength*myWidth*myHeight;  \r\n}  \r\n}  \r\n源程序：BoxDemo.java  \r\npublic class BoxDemo { \r\n public static void main(String args[])  \r\n{  \r\nBox box1=new Box();  \r\nbox1.setDemo(10.00,20.00,30.00);  \r\nSystem.out.println(\"the box\'s volume:\"+box1.Volume());  \r\n}  \r\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '46', '源程序：BankAccount.java  \npublic class BankAccount {\n	private double leftmoney;\n	private long account;\n	public BankAccount(long acco,double lmoney ) {\n		account=acco;\n		leftmoney=lmoney;\n	}\n	public double getleftmoney()  \n	{\n		return leftmoney;\n	}\n	public void savemoney(double money){\n		leftmoney+=money;\n	}\n	public void getmoney(double money){\n		if(money<=leftmoney)  \n		leftmoney-=money; else  \n		System.out.println(\"您的帐户余额不足，只能取：\"+leftmoney);\n	}\n	源程序：TestAccount.java  \n	public class TestAccount {\n		public static void main(String args[]) {\n			BankAccount myAccount=new BankAccount(12345678,1000);\n			myAccount.savemoney(5000);\n			System.out.println(\"存入 5000 元后余额为：\"+myAccount.getleftmoney());\n			myAccount.getmoney(2000);\n			System.out.println(\"取出 2000 元后余额为：\"+myAccount.getleftmoney());\n		}\n	}\n	int age;\n	public Person(String n,char s,int a) {\n		name=n;\n		sex=s;\n		age=a;\n	}\n	public String toString(){\n		return \"姓名：\"+name+\"\n 性别:\" +sex+\"\n 年龄:\"+age;\n	}\n}\npublic class Student extends Person {\n	long number;\n	int phi,eng,comp;\n	public Student(long k,String s,char c,int i,int i1,int i2,int i3) {\n		super(s,c,i);\n		number=k;\n		phi=i1;\n		eng=i2;\n		comp=i3;\n	}\n	public double aver() {\n		return(phi+eng+comp)/3.0;\n	}\n	public int max() {\n		int temp,max;\n		temp=phi>eng?phi:eng;\n		max=temp>comp?temp:comp;\n		return max;\n	}\n	public int min() {\n		int temp,min;\n		temp=phi<eng?phi:eng;\n		min=temp<comp?temp:comp;\n		return min;\n	}\n	public String toString(){\n		return \"学号：\"+number+\" \"+super.toString()+\"\n 平均');
INSERT INTO `programquestions` VALUES ('6', '编程题', '47', '\r\nTestStudent.java  \r\npublic class TestStudent {  \r\npublic static void main(String args[]) {  \r\nStudent stud=new Student(200501,\"李丽\",\'女\',20,95,87,88);  \r\nSystem.out.println(stud.toString()); } }');
INSERT INTO `programquestions` VALUES ('6', '编程题', '48', '\r\n Test.java  \r\nclass Point {  \r\nprotected int x,y;  \r\npublic Point(){  setPoint(0,0);  }  \r\npublic Point(int a,int b){  setPoint(a,b);  }  \r\npublic void setPoint(int a,int b) {  \r\nx=a; y=b; }  \r\npublic int getX() { return x;  }  \r\npublic int getY() { return y;  }  \r\npublic String toString()  \r\n{ return  \"(\"+x+\",\"+y+\")\"; }  \r\npublic double area() { return 0.0;  }  \r\npublic double volume() { return 0.0;  } }  \r\nclass Circle extends Point        //继承 Point 类  \r\n{  \r\nprotected double radius;  \r\npublic Circle() {   //隐含调用父类的构造函数  \r\nsetRadius(0); }  \r\npublic Circle (double r,int a,int b) {  \r\nsuper(a,b);    //调用父类的构造函数  \r\nsetRadius(r); }  \r\npublic void setRadius(double r) {  \r\nradius=(r>=0?r:0); }  \r\npublic double getRadius(double r) {  return radius; }  \r\npublic double area() { return Math.PI*radius*radius;  }  \r\npublic String toString()  \r\n{ return  \"Center=\"+super.toString()+\";Radius=\"+radius; } }  \r\nclass Cylinder extends Circle        //继承 Point 类  \r\n{  \r\nprotected double height;  \r\npublic Cylinder () {   //隐含调用父类的构造函数  \r\nsetHeight(0); }  \r\npublic Cylinder (double h,double r,int a,int b) {  \r\nsuper(r,a,b);    //调用父类的构造函数  \r\nsetHeight(h); }  \r\npublic void setHeight (double h) {  \r\nheight =(h>=0?h:0); }  \r\npublic double getHeight () {  return height; }  \r\npublic double area() { return 2*super.area()+2* Math.PI*radius*radius; }  \r\npublic double volume() { return super.area()*height;  } \r\npublic String toString()  \r\n{ return  super.toString()+\";Height=\"+ height; } }  \r\npublic class Test {  \r\npublic static void main(String args[]) {  \r\nPoint point=new Point(10,12);  \r\nCircle circle=new Circle(3.5,22,9);  \r\nCylinder cylinder=new Cylinder(10,3.3,10,10);  \r\nSystem.out.println(point.toString()+\":\"+\"\narea=\"+  \r\npoint.area()+\"\nvolume=\"+point.volume());  \r\nSystem.out.println(circle.toString()+\":\"+\"\narea=\"+  \r\ncircle.area()+\"\nvolume=\"+ circle.volume());  \r\nSystem.out.println(cylinder.toString()+\":\"+\"\narea=\"+  \r\ncylinder.area()+\"\nvolume=\"+ cylinder.volume());  \r\n}  \r\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '49', 'B.java\r\nclass A {  \r\nString  x;  \r\nA(String  x1){ x=x1; } }  \r\nclass B extends A {  \r\nint x;  \r\nB(String  x1,int x2){super(x1);  x=x2; }  \r\nvoid  myPrint()  \r\n{ System.out.println(\"父类 A 中 x 的值=\"+super.x+\" 子类 B 中 x 的值=\"+x);  \r\n} }  \r\n源程序：Test.java  \r\npublic class Test {  \r\npublic static void main(String args[]) {  \r\nB  b=new B(\"这是父类的 x.\",68 ); \r\nb.myPrint(); } }');
INSERT INTO `programquestions` VALUES ('6', '编程题', '50', '源程序：B.java  \nclass A {\n	float f;\n	private byte k;\n	A(float f1){\n		f=f1;\n	}\n	public byte getk( ){\n		return  k;\n	}\n	public void setk(byte m){\n		k=m;\n	}\n}\nclass B extends  A {\n	Boolean b;\n	B(float ff,Boolean bb){\n		super(ff);\n		b=bb;\n	}\n}\n源程序：Test.java  \npublic class Test {\n	public static void main(String args[]) {\n		int  n=123;\n		B  x=new B(68.963f,true);\n		x.setk((byte)66);\n		System.out.println(\"f=\"+x.f+\"  k=\"+x.getk( )+\"  b=\"+x.b+\"  n=\"+n);\n	}\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '51', '\r\n源程序：Human.java  \r\nclass Human {  \r\nString name;  \r\nboolean sex;  \r\nint age;  \r\npublic Human(String n,boolean s,int a) {  \r\nname=n;  \r\nsex=s; \r\nage=a; }  \r\npublic String getDetails(){  \r\nreturn \"姓名：\"+name+\"\n 性别:\" +sex+\"\n 年龄:\"+age; } }  \r\nclass Professor extends Human{  \r\nprivate String course;  \r\nprivate int result;  \r\npublic String getDetails(){  \r\nreturn super.getDetails()+\"	\"+course; }  \r\npublic boolean set_reslut(int x){  \r\nif(x>=0&&x<=3){  \r\nresult=x;  \r\nreturn true; }  \r\nelse return false; }  \r\npublic Professor(String name,boolean sex,int age,String course){  \r\nsuper(name,sex,age);  \r\nthis.course=course; }  \r\npublic Professor(String name,int age,String course){  \r\nthis(name,false,age,course); } }');
INSERT INTO `programquestions` VALUES ('6', '编程题', '52', 'interface Student_info    //定义学生情况接口  \n{\n	int year=2006;\n	int age();\n	void output();\n}\ninterface Student_score    //定义学生成绩接口  \n{\n	float total();\n	void output();\n}\npublic class student implements Student_info,Student_score  \n{\n	//实现学生情况接口、学生成绩接口  \n	String name;\n	int birth_year;\n	float math,english,computer;\n	public student(String n1,int y,float a,float b,float c) {\n		name=n1;\n		birth_year=y;\n		math=a;\n		english=b;\n		computer=c;\n	}\n	public int age() {\n		return year- birth_year;\n	}\n	public float total() {\n		return math+english+computer;\n	}\n	public void output() {\n		System.out.print(this.name+\" \"+this.age()+\"岁 \");\n		System.out.println(math+\" \"+english+\" \"+computer+\" \"+total());\n	}\n	public static void main(String args[]) {\n		student s1=new student(\"张军\",1982,90,84,78);\n		s1.output();\n	}\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '53', '\r\nabstract class A {\r\npublic int r;  \r\nabstract public int area(); }  \r\nclass B extends A {  \r\npublic int r ;  \r\nB(int r) {this.r=r;}  \r\npublic int area() {return 3*r*r;} }  \r\nclass C extends A {  \r\npublic int width,height;  \r\nC (int w, int h) {  \r\nwidth=w;  \r\nheight=h; }  \r\npublic int area() {  \r\nreturn width*height; } }');
INSERT INTO `programquestions` VALUES ('6', '编程题', '54', '\r\npublic class MyClass implements A {  \r\npublic void paint() {  \r\nSystem.out.println (\"调用 method1(2)的结果： \"+method1(2));  \r\nSystem.out.println (\"调用 method2(2,8)的结果： \"+method2(2,8));  \r\n}  \r\npublic  int  method1(int x) {  \r\nint result=1;  \r\nfor(int i=1;i<=x;i++) \r\nresult*=5;  \r\nreturn  result; }  \r\npublic  int  method2(int x,int y) {  \r\nreturn  x>y?x:y; } }  \r\ninterface A {  \r\npublic abstract int  method1(int x);  \r\npublic abstract int  method2(int x,int y);  \r\n}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '55', '\r\npublic  class  Class1 {  \r\nstatic  VolumeAndArea  x=new  VolumeAndArea( );  \r\npublic  static  void  main(String[ ]  args) {  \r\nfloat  r=Float.valueOf(args[0]).floatValue( );  \r\nSystem.out.println(\"半径为\"+r+\"的球的体积=\"+x.volume(r));  \r\nSystem.out.println(\"半径为\"+r+\"的圆的面积=\"+ x.area(r));  \r\n} }  \r\nabstract  class  VolumeArea {  \r\nstatic  final  float  myPI=3.14159f;  \r\npublic abstract  float  volume(double  r);  \r\npublic abstract  float  area(double  r); }  \r\nclass  VolumeAndArea  extends  VolumeArea {  \r\npublic float  volume(double  r) {  \r\nreturn  (float)(4*myPI*r*r*r/3); }  \r\npublic  float  area(double  r){  \r\nreturn  (float)(myPI*r*r); } }');
INSERT INTO `programquestions` VALUES ('6', '编程题', '56', '\r\n答案：  \r\nabstract class Graphic{  \r\npublic static final double PI = 3.1415926;  \r\nabstract double area();  \r\nabstract void draw(); }  \r\nclass Point extends Graphic {  \r\nprotected double x, y;  \r\npublic Point(double x, double y) {  \r\nthis.x = x;  \r\nthis.y = y; }  \r\ndouble area() { return 0; }  \r\nvoid draw() {        // 在此模拟实现画一个点  \r\nSystem.out.println(\"Draw a point at (\"+x+\",\"+y+\")\"); }  \r\npublic String toString(){  \r\nreturn \"(\"+x+\",\"+y+\")\"; } }  \r\nclass Line extends Graphic{  \r\nprotected Point p1, p2;  \r\npublic Line(Point p1, Point p2){  \r\nthis.p1 = p1;  \r\nthis.p2 = p2; }  \r\ndouble area(){ return 0; }  \r\nvoid draw(){  \r\n// 在此模拟实现画一条线  \r\nSystem.out.println(\"Draw a line from \"+p1+\" to \"+p2);  \r\n} }  \r\nclass Circle extends Graphic{  \r\nprotected Point o;  \r\nprotected double r;  \r\npublic Circle(Point o, double r) {  \r\nthis.o = o;  \r\nthis.r = r; }  \r\ndouble area() {  \r\nreturn PI * r * r; }  \r\nvoid draw() {  \r\n// 在此模拟实现画一个圆  \r\nSystem.out.println(\"Draw a circle at \"+o+\" and r=\"+r);  \r\n} }  \r\npublic class GraphicDemo{  \r\npublic static void main(String []args){  \r\nGraphic []g=new Graphic[3];  \r\ng[0]=new Point(10,10);  \r\ng[1]=new Line(new Point(10,10),new Point(20,30));  \r\ng[2]=new Circle(new Point(10,10),4);  \r\nfor(int i=0;i<g.length;i++){  \r\ng[i].draw();  \r\nSystem.out.println(\"Area=\"+g[i].area());  \r\n} } }');
INSERT INTO `programquestions` VALUES ('6', '编程题', '57', '\r\npublic class Card { \r\n private String face, suit; \r\n public Card() { \r\n  face = \"\"; \r\n  suit = \"\"; } \r\n public Card(String face, String suit) { \r\n  this.face = face; \r\n  this.suit = suit; } \r\n public String getFace() {  return face;} \r\n public void setFace(String face) { this.face = face;} \r\n public String getSuit() {return suit;} \r\n public void setSuit(String suit) { this.suit = suit;} \r\n public String toString() { return suit + face;} \r\n public static void main(String[] sd) { \r\n  Card[] desk = new Card[52]; \r\n  String[] f = { \"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \r\n    \"Q\", \"K\" }; \r\n  String[] s = { \"黑桃\", \"红桃\", \"梅花\", \"方块\" }; \r\n  for (int i = 0; i < desk.length; i++) { \r\n   desk[i] = new Card(f[i % 13], s[i / 13]); \r\n   // System.out.println(desk[i].toString());} \r\n  for (int first = 0; first < desk.length; first++) { \r\n   for (int k = 0; k < desk.length - first; k++) { \r\n    int second = (int) (Math.random() * (desk.length - first)); \r\n    Card temp = desk[first]; \r\n    desk[first] = desk[second]; \r\n    desk[second] = temp; \r\n   } } \r\n  for (int i = 0; i < desk.length; i++) { \r\n   System.out.print(desk[i].toString() + \" \"); \r\n   if (i == 12 || i == 25 || i == 38) { \r\n    System.out.println(); \r\n   } } }}');
INSERT INTO `programquestions` VALUES ('6', '编程题', '58', 'package xsc;\r\npublic class Gun { \r\n protected String name;// 名字 \r\n protected int num;// 子弹数量 \r\n public int id;// 编号 \r\n public static int count;// 计数器 \r\n public Gun() { \r\n  Gun.count++;// 计数器累加 \r\n  this.id = Gun.count; \r\n  name = \"Gun\"; \r\n  num = 12;} \r\n public String getName() { return name; } \r\n public void setName(String name) { this.name = name;} \r\n public int getNum() { return num;} \r\n public void setNum(int num) {this.num=num;} \r\n public void Fire() { \r\n } \r\n} \r\npackage xsc; \r\npublic class Ak47 extends Gun { \r\n @Override\r\n public void Fire() { \r\n  this.num-=3; \r\n  System.out.println(this.name+\"正在使用Ak47开枪\"); \r\n } \r\n @Override \r\n public void setNum(int num) { \r\n  this.num=30*num; \r\n } \r\n} \r\npackage xsc; \r\npublic class USP extends Gun { \r\n @Override \r\n public void Fire() { \r\n  this.num--; \r\n  System.out.println(this.name+\"正在使用USP开第枪\"); \r\n } \r\n @Override \r\n public void setNum(int num) { \r\n  this.num=12*num; \r\n } \r\n} \r\n \r\npackage xsc; \r\npublic class Test { \r\n public static void main(String[] args) { \r\n  // TODO Auto-generated method stub \r\n  USP usp1 = new USP(); \r\n  Ak47 ak1 = new Ak47(); \r\n  USP usp2 = new USP(); \r\n   \r\n  //Gun gun=new Gun(); \r\n  System.out.println(\"usp1.id=\"+usp1.id); \r\n  System.out.println(\"usp2.id=\"+usp2.id); \r\n  System.out.println(\"ak1.id=\"+ak1.id); \r\n  System.out.println(\"总枪数=\"+Gun.count); \r\n  usp1.setNum(1); \r\n  ak1.setNum(1); \r\n  Gun nowGun; \r\n  nowGun=usp1; \r\n  for(int i=0;i<10;i++){ \r\n   nowGun.Fire(); \r\n  } \r\n  nowGun=ak1; \r\n  for(int i=0;i<10;i++){ \r\n   nowGun.Fire(); \r\n  } \r\n  System.out.println(\"usp1此枪还有\"+usp1.getNum()+\"个子弹\"); \r\n  System.out.println(\"ak1此枪还有\"+ak1.getNum()+\"个子弹\"); \r\n } \r\n}');
INSERT INTO `programquestions` VALUES ('7', '编程题', '1', '\r\npackage test; \r\nimport java.awt.Toolkit; \r\nimport javax.swing.SwingUtilities; \r\nimport javax.swing.UIManager; \r\nimport java.awt.Dimension; \r\npublic class Application { \r\n    boolean packFrame = false; \r\n    public Application() { \r\n        Frame1 frame = new Frame1(); \r\n        if (packFrame) { \r\n            frame.pack(); \r\n        } else { \r\n            frame.validate(); \r\n        } \r\n        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize(); \r\n        Dimension frameSize = frame.getSize(); \r\n        if (frameSize.height > screenSize.height) { \r\n            frameSize.height = screenSize.height; \r\n        } \r\n        if (frameSize.width > screenSize.width) { \r\n            frameSize.width = screenSize.width; \r\n        } \r\n        frame.setLocation((screenSize.width - frameSize.width) / 2, \r\n                          (screenSize.height - frameSize.height) / \r\n2); \r\n        frame.setVisible(true); \r\n    } \r\n    public static void main(String[] args) { \r\n        SwingUtilities.invokeLater(new Runnable() { \r\n            public void run() { \r\n                try { \r\n                    UIManager.setLookAndFeel(UIManager. \r\n                                             getSystemLookAndFeelClassName()); \r\n                } catch (Exception exception) { \r\n                    exception.printStackTrace(); \r\n                } \r\n \r\n                new Application(); \r\n            } \r\n        }); \r\n    } \r\n}');
INSERT INTO `programquestions` VALUES ('7', '编程题', '2', '\r\n   import javax.swing.*;\r\nimport java.awt.*; \r\nimport java.awt.event.*; \r\npublic class dTest{ \r\npublic static void main(String args[]){ \r\nForm form=new Form(); \r\nform.setSize(300,200); \r\nform.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); \r\nform.setVisible(true); \r\n} \r\n} \r\nclass Form extends JFrame implements ActionListener{ \r\nprivate Dial dia; \r\nJLabel lab=new JLabel(\"请输入\"); \r\npublic Form(){ \r\nJButton btn1=new JButton(\"Yes\"); \r\nJButton btn2=new JButton(\"No\"); \r\ngetContentPane().setLayout(new GridLayout(3,1)); \r\nadd(lab); \r\nadd(btn1); \r\nadd(btn2); \r\nsetTitle(\"inputprac\"); \r\nbtn1.addActionListener(this); \r\nbtn2.addActionListener(this); \r\n} \r\npublic void actionPerformed(ActionEvent event){ \r\nif(event.getActionCommand()==\"输入\"){ \r\ndia=new Dial(this,\"请输入内容\",true); \r\ndia.setVisible(true); \r\nlab.setText(dia.getSt()); \r\n} \r\nelse{ \r\nSystem.exit(0); \r\n} \r\n} \r\n} \r\nclass Dial extends JDialog implements  ActionListener{ \r\nprivate JTextField text=new JTextField(\"change\"); \r\nprivate JButton btn1=new JButton(\"确定\"); \r\nprivate JPanel panel=new JPanel(); \r\n \r\npublic Dial(JFrame frame,String title,boolean b){ \r\nsuper(frame,title,b); \r\ngetContentPane().setLayout(new FlowLayout()); \r\npanel.add(text); \r\npanel.add(btn1); \r\nbtn1.addActionListener(this); \r\ngetContentPane().add(panel); \r\npack(); \r\n} \r\npublic void actionPerformed(ActionEvent event){ \r\nthis.dispose(); \r\n} \r\npublic String getSt(){ \r\nreturn text.getText(); \r\n} \r\n}');
INSERT INTO `programquestions` VALUES ('7', '编程题', '3', '\r\n import java.awt.*; \r\nimport javax.swing.*; \r\n \r\npublic class table{ \r\npublic static void main(String args[]){ \r\nJFrame form=new JFrame(\"Table试验\"); \r\nfinal Object[] row={\"姓名\",\"学号\",\"语文成绩\",\"数学成绩\",\"总分\"}; \r\nObject[][] rowData = { \r\n{\"张三\", \"01\", \"81\", \"80\", \"160\"}, \r\n{\"李四\", \"02\", \"93\", \"72\", \"165\"}, \r\n{\"王麻子\", \"03\", \"99\", \"97\", \"196\"}, \r\n}; \r\nJTable tb=new JTable(rowData,row); \r\nJScrollPane pane= new JScrollPane (tb); \r\nform.getContentPane().add(tb); \r\nform.setVisible(true); \r\nform.pack(); \r\n} \r\n}');
INSERT INTO `programquestions` VALUES ('7', '编程题', '4', '\r\n  import java.awt.*; \r\nimport java.awt.event.*; \r\nimport javax.swing.*; \r\nimport java.util.*; \r\npublic class SwingDemo extends JFrame   \r\n                         implements ActionListener{ \r\n   JButton b1;         \r\n   JLabel l1,l2;        \r\n   SwingDemo(){ \r\n      super(\"Swing应用程序的例\"); \r\n      l1=new JLabel(\"一个GUI应用程序的例子\",JLabel.CENTER);        l2 =new  JLabel(\" \");  \r\n      b1=new JButton(\"现在时间[T]\"); \r\n      b1.setMnemonic(KeyEvent.VK_T); \r\n      b1.setActionCommand(\"time\");   \r\n      b1.addActionListener(this);    \r\n      getContentPane().add(l1,BorderLayout.NORTH); \r\n      getContentPane().add(l2,BorderLayout.CENTER); \r\n      getContentPane().add(b1,BorderLayout.SOUTH); \r\n     } \r\n   public void actionPerformed(ActionEvent e) \r\n   { \r\n      Calendar c1 = Calendar.getInstance(); \r\n      if(e.getActionCommand().equals(\"time\")){ \r\n          l2.setText(\"现在时间是\" \r\n          +c1.get(Calendar.HOUR_OF_DAY) \r\n          +\"时\"+c1.get(Calendar.MINUTE)+\"分\"); \r\n          l2.setHorizontalAlignment(JLabel.CENTER); \r\n      }else System.exit(0); \r\n   } \r\n \r\n   public static void main(String args[]){ \r\n     JFrame.setDefaultLookAndFeelDecorated(true); \r\n     JFrame frame = new SwingDemo(); \r\n     frame.setDefaultCloseOperation( \r\n     JFrame.EXIT_ON_CLOSE); \r\n     frame.pack();          \r\n     frame.setVisible(true);   \r\n   } \r\n }');
INSERT INTO `programquestions` VALUES ('7', '编程题', '5', '\r\n   import java.awt.*; \r\nimport javax.swing.*; \r\nimport javax.swing.tree.*; \r\nimport java.awt.event.*; \r\npublic class TestJtree extends JFrame { \r\n    JPanel cp=new JPanel(); \r\n    JTree jtree; \r\n    DefaultMutableTreeNode root; \r\n    public TestJtree()  { \r\n        this.setSize(300,300); \r\n        this.setTitle(\"JTree组件\"); \r\n        cp=(JPanel)this.getContentPane(); \r\n        cp.setLayout(new BorderLayout()); \r\n        root=new DefaultMutableTreeNode(\"质量管理\"); \r\n        createTree(root); \r\n        jtree=new JTree(root); \r\n        cp.add(jtree,BorderLayout.CENTER); \r\n    } \r\n    public static void main(String[] args) { \r\n        TestJtree TestJtree = new TestJtree(); \r\n        TestJtree.setVisible(true); \r\n  } \r\n    private void createTree(DefaultMutableTreeNode root)  { \r\n        DefaultMutableTreeNode classroom=null; \r\n        DefaultMutableTreeNode number=null; \r\n        classroom=new DefaultMutableTreeNode(\"课程建设\"); \r\n        root.add(classroom); \r\n        number=new DefaultMutableTreeNode(\"一般课程\"); \r\n        classroom.add(number); \r\n        number=new DefaultMutableTreeNode(\"重点课程\"); \r\n        classroom.add(number); \r\n        number=new DefaultMutableTreeNode(\"精品课程\"); \r\n        classroom.add(number); \r\n        number.add(new DefaultMutableTreeNode(\"国家精品课程\")); \r\n        number.add(new DefaultMutableTreeNode(\"市级精品课程\")); \r\n        number.add(new DefaultMutableTreeNode(\"校级精品课程\")); \r\n        number=new DefaultMutableTreeNode(\"其他课程\"); \r\n        classroom.add(number);   } \r\n    protected void processWindowEvent(WindowEvent e)  { \r\n        if(e.getID()==WindowEvent.WINDOW_CLOSING)  \r\n            System.exit(0);  \r\n    } \r\n }');
INSERT INTO `programquestions` VALUES ('7', '编程题', '6', '\r\nimport java.io.*; \r\nimport java.awt.*; \r\nimport java.awt.event.*; \r\nimport javax.swing.*; \r\nimport javax.swing.filechooser.*; \r\npublic class JFileChooserDemo extends JFrame { \r\n  public JFileChooserDemo() { \r\n   super(\"使用JFileChooser\"); \r\n   final JTextArea ta = new JTextArea(5,20); \r\n   ta.setMargin(new Insets(5,5,5,5)); \r\n   ta.setEditable(false); \r\n   JScrollPane sp = new JScrollPane(ta); \r\n   final JFileChooser fc = new JFileChooser(); \r\n   JButton openBtn = new JButton(\"打开文件...\"); \r\n   openBtn.addActionListener(new ActionListener(){ \r\n    public void actionPerformed(ActionEvent e) { \r\n     int returnVal = fc.showOpenDialog( \r\n        JFileChooserDemo.this); \r\n     if (returnVal == JFileChooser.APPROVE_OPTION) { \r\n      File file = fc.getSelectedFile(); \r\n      ta.append(\"打开: \" + file.getName() + \".\n\"); \r\n     } else ta.append(\"取消打开命令.\n\"); \r\n    } \r\n   }); \r\n  JButton saveBtn = new JButton(\"保存文件...\"); \r\n  saveBtn.addActionListener(new ActionListener(){ \r\n   public void actionPerformed(ActionEvent e){ \r\n    int returnVal = fc.showSaveDialog( \r\n      JFileChooserDemo.this); \r\n    if (returnVal == JFileChooser.APPROVE_OPTION) \r\n    { \r\n    File file = fc.getSelectedFile(); \r\n    ta.append(\"Saving: \" + file.getName() + \".\n\"); \r\n    } else ta.append(\"取消保存命令。\n\"); \r\n    } \r\n    }); \r\n    JPanel buttonPanel = new JPanel(); \r\n    buttonPanel.add(openBtn); \r\n    buttonPanel.add(saveBtn); \r\n    Container c = getContentPane(); \r\n    c.add(buttonPanel, BorderLayout.NORTH); \r\n    c.add(sp, BorderLayout.CENTER); \r\n    } \r\n  public static void main(String[] args) { \r\n   JFrame frame = new JFileChooserDemo(); \r\n   frame.setDefaultCloseOperation(EXIT_ON_CLOSE); \r\n   frame.pack(); \r\n   frame.setVisible(true); \r\n  } \r\n }');
INSERT INTO `programquestions` VALUES ('7', '编程题', '7', '\r\nimport javax.swing.*; \r\nimport java.awt.*; \r\nimport java.awt.event.*; \r\npublic class JOptionPaneDemo{ \r\n  public JFrame aFrame; \r\n  public JButton aButton; \r\n  public JOptionPane anOptionPane; \r\n  static JLabel aLabel; \r\n  public JOptionPaneDemo(){ \r\n   aFrame = new JFrame(\"使用JOptionPane\"); \r\n   aButton = new JButton(\"显示对话框\"); \r\n   aLabel = new JLabel(\"您作出的选择是、\", \r\n      JLabel.CENTER); \r\n   aButton.addActionListener(new OptionListener()); \r\n   anOptionPane = new JOptionPane(); \r\n   aFrame.getContentPane().add(aButton, \r\n       BorderLayout.NORTH); \r\n   aFrame.getContentPane().add(aLabel, \r\n       BorderLayout.SOUTH); \r\n   aFrame.setVisible(true); \r\n   aFrame.setDefaultCloseOperation( \r\n      JFrame.EXIT_ON_CLOSE); \r\n   } \r\n   public class OptionListener implements ActionListener{ \r\n     public void actionPerformed(ActionEvent e){ \r\n      String[] choices = {\"喜欢\", \"不喜欢\"};        \r\n      int n = anOptionPane.showOptionDialog(aFrame, \r\n      \"您喜欢音乐吗？\", \"请选择\",    \r\n      JOptionPane.YES_NO_OPTION, \r\n      JOptionPane.QUESTION_MESSAGE, null, \r\n      choices,choices[0]); \r\n    if(n == 0) \r\n        JOptionPaneDemo.aLabel.setText(\"喜欢音乐\"); \r\n     else JOptionPaneDemo.aLabel.setText(\"不喜欢音乐\"); \r\n     } \r\n    } \r\n    public static void main( String[] args){  \r\n     new JOptionPaneDemo(); \r\n    } \r\n   }');
INSERT INTO `programquestions` VALUES ('7', '编程题', '8', '\r\nimport javax.swing.*; \r\nimport java.awt.*; \r\nimport java.awt.event.*; \r\npublic class JMenuDemo extends JFrame implements ActionListener{ \r\n   JLabel j1 = new JLabel(\"请选择菜单、\",JLabel.CENTER); \r\n   JMenuItem aaMenuItem,baMenuItem; \r\n   JMenuDemo(){ \r\n      super(\"使用JMenu\"); \r\n      JMenuBar aMenuBar = new JMenuBar(); \r\n      Icon i1 =  new ImageIcon(\"images/girl.gif\"); \r\n      Icon i2 =  new ImageIcon(\"images/boy.gif\"); \r\n      JMenu aMenu = new JMenu(\"菜单A\"); \r\n      JMenu bMenu = new JMenu(\"菜单B\"); \r\n      JMenuItem aaMenuItem = new JMenuItem(\"菜单项 AA\",i1); \r\n      JMenuItem abMenuItem = new JMenuItem(\"菜单项AB\",i2); \r\n      JMenuItem baMenuItem = new JMenuItem(\"菜单项 BA\"); \r\n      aMenuBar.add(aMenu); \r\n      aMenuBar.add(bMenu); \r\n      aMenu.add(aaMenuItem); \r\n      aMenu.addSeparator(); \r\n      aMenu.add(abMenuItem); \r\n      bMenu.add(baMenuItem); \r\n      aaMenuItem.addActionListener(this); \r\n      abMenuItem.addActionListener(this); \r\n      baMenuItem.addActionListener(this); \r\n      setJMenuBar(aMenuBar); \r\n      getContentPane().add(j1,BorderLayout.CENTER); \r\n     } \r\n     public void actionPerformed(ActionEvent e) \r\n     { \r\n        JMenuItem source = (JMenuItem)(e.getSource()); \r\n        j1.setText(\"选择了菜单:\"+source.getText()); \r\n        j1.setHorizontalAlignment(JLabel.CENTER);   \r\n      } \r\n     public static void main(String args[]) \r\n    { \r\n      JFrame frame = new JMenuDemo(); \r\n      frame.setDefaultCloseOperation( \r\n                                                 JFrame.EXIT_ON_CLOSE); \r\n      frame.setVisible(true); \r\n      frame.pack(); \r\n     }}');
INSERT INTO `programquestions` VALUES ('7', '编程题', '9', '\r\nimport java.awt.*; \r\nimport java.awt.event.*; \r\nimport javax.swing.*; \r\npublic class JPasswordFieldDemo extends JApplet  \r\n                     implements ActionListener{ \r\n  JLabel jl1,jl2; \r\n  JPasswordField jp1,jp2; \r\n  JButton jb1,jb2; \r\n  public void init(){ \r\n     Container c = getContentPane(); \r\n     jl1 = new JLabel( \r\n     \"<html><h3>请输入您的密码:\" ,JLabel.CENTER); \r\n     jl2 = new JLabel( \r\n     \"<html><h3>请再次输入密码:\" ,JLabel.CENTER); \r\n     jp1 = new JPasswordField(8); \r\n     jp2 = new JPasswordField(8); \r\n     jb1 = new JButton(\"<html><h3>提交\"); \r\n     jb2 = new JButton(\"<html><h3>取消\"); \r\n     c.setLayout(new GridLayout(3,2)); \r\n     c.add(jl1); \r\n     c.add(jp1); \r\n     c.add(jl2); \r\n     c.add(jp2); \r\n     c.add(jb1); \r\n     c.add(jb2); \r\n     jb1.addActionListener(this); \r\n     jb2.addActionListener(this); \r\n   } \r\n  public void actionPerformed(ActionEvent e){ \r\n   if(e.getSource()==jb1) \r\n      if(jp1.getPassword().length>0) \r\n         if(String.valueOf(jp1.getPassword()).equals \r\n               (String.valueOf(jp2.getPassword()))) \r\n             showStatus(\"密码输入成功！\"); \r\n         else{ \r\n            showStatus(\"两次输入的密码不同，请重新输入！\"); \r\n            jp1.setText(\"\");  \r\n            jp2.setText(\"\"); \r\n            } \r\n      else showStatus(\"密码不能为空！\");  \r\n        if(e.getSource()==jb2){ \r\n               jp1.setText(\"\"); \r\n               jp2.setText(\"\"); \r\n                    showStatus(\"\"); \r\n              }}}');
INSERT INTO `programquestions` VALUES ('7', '编程题', '10', '\r\npackage jiemian; \r\nimport java.awt.Color; \r\nimport java.awt.Font; \r\nimport java.awt.event.ActionEvent; \r\nimport java.awt.event.ActionListener; \r\nimport javax.swing.*; \r\nimport org.dyno.visual.swing.layouts.Constraints; \r\nimport org.dyno.visual.swing.layouts.GroupLayout; \r\nimport org.dyno.visual.swing.layouts.Leading; \r\n \r\npublic class Frame1 extends JFrame { \r\n private static final long serialVersionUID = 1L; \r\n private JLabel jLabel0; \r\n private JLabel jLabel1; \r\n private JLabel jLabel2; \r\n private JLabel jLabel3; \r\n private JTextField jTextField0; \r\n private JTextField jTextField1; \r\n private JLabel jLabel4; \r\n private JButton jButton0; \r\n private JToggleButton jToggleButton0; \r\n private static final String PREFERRED_LOOK_AND_FEEL = \"javax.swing.plaf.metal.MetalLookAndFeel\"; \r\n \r\n public Frame1() { \r\n  initComponents(); \r\n } \r\n \r\n private void initComponents() { \r\n  setTitle(\"工资额计算器\"); \r\n  setBackground(new Color(64, 128, 128)); \r\n  setLayout(new GroupLayout()); \r\n  add(getJLabel1(), new Constraints(new Leading(69, 10, 10), new Leading( \r\n    78, 10, 10))); \r\n  add(getJLabel0(), new Constraints(new Leading(99, 169, 10, 10), \r\n    new Leading(12, 35, 12, 12))); \r\n  add(getJLabel2(), new Constraints(new Leading(57, 10, 10), new Leading( \r\n    72, 10, 10))); \r\n  add(getJTextField0(), new Constraints(new Leading(134, 157, 10, 10), \r\n    new Leading(69, 28, 12, 12))); \r\n  add(getJLabel3(), new Constraints(new Leading(68, 12, 12), new Leading( \r\n    122, 10, 10))); \r\n  add(getJTextField1(), new Constraints(new Leading(132, 160, 12, 12), \r\n    new Leading(119, 28, 12, 12))); \r\n  add(getJButton0(), new Constraints(new Leading(80, 77, 10, 10), \r\n    new Leading(251, 12, 12))); \r\n  add(getJToggleButton0(), new Constraints(new Leading(216, 82, 10, 10), \r\n    new Leading(251, 10, 10))); \r\n  add(getJLabel4(), new Constraints(new Leading(102, 162, 12, 12), \r\n    new Leading(182, 34, 10, 10))); \r\n  setSize(343, 300); \r\n } \r\n \r\n private JToggleButton getJToggleButton0() { \r\n  if (jToggleButton0 == null) { \r\n   jToggleButton0 = new JToggleButton(); \r\n   jToggleButton0.setFont(new Font(\"Dialog\", Font.BOLD, 14)); \r\n   jToggleButton0.setText(\"取消\"); \r\n  } \r\n  jToggleButton0.addActionListener(new c(this)); \r\n  return jToggleButton0; \r\n } \r\n \r\n private JButton getJButton0() { \r\n  if (jButton0 == null) { \r\n   jButton0 = new JButton(); \r\n   jButton0.setFont(new Font(\"Dialog\", Font.BOLD, 14)); \r\n   jButton0.setText(\"确定\"); \r\n  } \r\n  jButton0.addActionListener(new a(this)); \r\n  return jButton0; \r\n } \r\n \r\n private JLabel getJLabel4() { \r\n  if (jLabel4 == null) { \r\n   jLabel4 = new JLabel(); \r\n   jLabel4.setFont(new Font(\"Dialog\", Font.BOLD, 14)); \r\n   jLabel4.setForeground(Color.red); \r\n  } \r\n  return jLabel4; \r\n } \r\n \r\n private JTextField getJTextField1() { \r\n  if (jTextField1 == null) { \r\n   jTextField1 = new JTextField(); \r\n   jTextField1.setText(\"\"); \r\n  } \r\n  return jTextField1; \r\n } \r\n \r\n private JTextField getJTextField0() { \r\n  if (jTextField0 == null) { \r\n   jTextField0 = new JTextField(); \r\n   jTextField0.setText(\"\"); \r\n  } \r\n  return jTextField0; \r\n } \r\n \r\n private JLabel getJLabel3() { \r\n  if (jLabel3 == null) { \r\n   jLabel3 = new JLabel(); \r\n   jLabel3.setFont(new Font(\"Dialog\", Font.BOLD, 14)); \r\n   jLabel3.setText(\"工资额、\"); \r\n  } \r\n  return jLabel3; \r\n } \r\n \r\n private JLabel getJLabel2() { \r\n  if (jLabel2 == null) { \r\n   jLabel2 = new JLabel(); \r\n   jLabel2.setFont(new Font(\"Dialog\", Font.BOLD, 14)); \r\n   jLabel2.setText(\"  工作时间、\"); \r\n  } \r\n  return jLabel2; \r\n } \r\n \r\n private JLabel getJLabel1() { \r\n  if (jLabel1 == null) { \r\n   jLabel1 = new JLabel(); \r\n  } \r\n  return jLabel1; \r\n } \r\n \r\n private JLabel getJLabel0() { \r\n  if (jLabel0 == null) { \r\n   jLabel0 = new JLabel(); \r\n   jLabel0.setFont(new Font(\"Dialog\", Font.BOLD, 26)); \r\n   jLabel0.setForeground(new Color(128, 0, 0)); \r\n   jLabel0.setText(\"工资额计算器\"); \r\n  } \r\n  return jLabel0; \r\n } \r\n \r\n class a implements ActionListener { \r\n  private Frame1 adaptee; \r\n \r\n  a(Frame1 adaptee) { \r\n   this.adaptee = adaptee; \r\n  } \r\n \r\n  public void actionPerformed(ActionEvent e) { \r\n   adaptee.b(e); \r\n  } \r\n } \r\n \r\n public void b(ActionEvent l) { \r\n  try { \r\n   String a = jTextField0.getText(); \r\n   String b = jTextField1.getText(); \r\n   double m = Double.parseDouble(a); \r\n   double n = Double.parseDouble(b); \r\n   if (m < 0) { \r\n    JOptionPane.showMessageDialog(null, \"工作时间不能小于0！\", \"消息信息\", \r\n      JOptionPane.INFORMATION_MESSAGE); \r\n   } else { \r\n    if (m == 0 || m <= 40) { \r\n     jLabel4.setText(\"总工资为、\" + String.valueOf(m * n)); \r\n    } \r\n    if (m > 40) { \r\n     jLabel4.setText(\"总工资为、\" \r\n       + String.valueOf(40 * n + 1.5 * (m - 40) * n)); \r\n    } \r\n   } \r\n  } catch (Exception ee) { \r\n   JOptionPane.showMessageDialog(null, \"请输入正确的数字信息！\", \"消息信息\", \r\n     JOptionPane.INFORMATION_MESSAGE); \r\n  } \r\n } \r\n \r\n class c implements ActionListener { \r\n  private Frame1 adaptee; \r\n \r\n  c(Frame1 adaptee) { \r\n   this.adaptee = adaptee; \r\n  } \r\n \r\n  public void actionPerformed(ActionEvent e) { \r\n   adaptee.d(e); \r\n  } \r\n } \r\n \r\n public void d(ActionEvent l) { \r\n  jTextField1.setText(\"\"); \r\n  jTextField0.setText(\"\"); \r\n  jLabel4.setText(\"\"); \r\n } \r\n \r\n private static void installLnF() { \r\n  try { \r\n   String lnfClassname = PREFERRED_LOOK_AND_FEEL; \r\n   if (lnfClassname == null) \r\n    lnfClassname = UIManager.getCrossPlatformLookAndFeelClassName(); \r\n   UIManager.setLookAndFeel(lnfClassname); \r\n  } catch (Exception e) { \r\n   System.err.println(\"Cannot install \" + PREFERRED_LOOK_AND_FEEL \r\n     + \" on this platform:\" + e.getMessage()); \r\n  } \r\n } \r\n \r\n public static void main(String[] args) { \r\n  installLnF(); \r\n  SwingUtilities.invokeLater(new Runnable() { \r\n   @Override \r\n   public void run() { \r\n    Frame1 frame = new Frame1(); \r\n    frame.setDefaultCloseOperation(Frame1.EXIT_ON_CLOSE); \r\n    frame.setTitle(\"工资额计算器\"); \r\n    frame.getContentPane().setPreferredSize(frame.getSize()); \r\n    frame.pack(); \r\n    frame.setLocationRelativeTo(null); \r\n    frame.setVisible(true); \r\n   } \r\n  }); \r\n } \r\n}');
INSERT INTO `programquestions` VALUES ('9', '编程题', '1', 'import java.io.*;\nclass FileCopy{\n	public static void main(String[] args){\n		FileInputStream in;\n		FileOutputStream out;\n		if (args.length<2) {\n			System.out.println(\"Usage: java copy srcfile destfile\");\n			System.exit(-1);\n		}\n		try {\n			in = new FileInputStream(args[0]);\n			out = new FileOutputStream(args[1]);\n			copyFile(in,out);\n		}\n		catch (Exception e){\n			System.out.println(e);\n		}\n	}\n	private static void copyFile(FileInputStream in, FileOutputStream out){\n		int length;\n		byte buf[] = new byte[1024];\n		try{\n			while ((length=in.read(buf,0,1024))!=-1)     {\n				out.write(buf, 0, length);\n			}\n		}\n		catch (Exception e){\n			System.out.println(\"Error:\"+e);\n			System.exit(-1);\n		}\n	}\n}');
INSERT INTO `programquestions` VALUES ('9', '编程题', '2', 'Import java.io.* \nClass addFile {\n	Public static void main(String args[])throws IOException {\n		RandomAccessFile ourFile;\n		String=“information to Append mon! ”； \n		oureFile=new RandomAccessFile oureFile(“phone.nember.numbers“,”rw”);\n		oureFile.seek(oureFile.length( ));\n		oureFile.writebytes(s);\n		oureFile.close( );\n	}\n');
INSERT INTO `programquestions` VALUES ('9', '编程题', '3', 'import java.io.*;\nclass CopyFile{\n	public static void main(String[] args) {\n		String file1,file2 ;\n		int ch = 0 ;\n		try {\n			file1=args[0];\n			file2=args[1];\n			FileinputStream fis = new FileinputStream(file1);\n			FileOutputStream fos=new FileOutputStream(file2);\n			while ((ch=fis.read())!=-1) \n			  fos.write(ch);\n			fis.close();\n			fos.close();\n		}\n		catch(FileNotFoundException e){\n			System.out.println(\"源文件:未找到!\");\n		}\n		catch(ArrayIndexOutOfBoundsException e){\n			System.out.println(\"缺少运行参数！\");\n			System.exit(-1);\n		}\n		catch (IOException e){\n			System.out.println(e.toString());\n		}\n	}\n}');
INSERT INTO `programquestions` VALUES ('9', '编程题', '4', 'import java.io.*;\npublic class NewFile{\n	public static void main(String args[]){\n		File f=new File(\"test\");\n		if(f.exists()&&f.isDirectory()) \n		  System.err.println(\"目录、\"+f.toString()+\"已经存在!\"); else{\n			if(f.mkdir()){\n				System.out.println(\"目录\"+f.getAbsolutePath()+\"创建结束!\");\n				File f2=new File(f,\"my.txt\");\n				try{\n					f2.createNewFile();\n					f2.setReadOnly();\n				}\n				catch(IOException e){\n					System.out.println(e.toString());\n				}\n				System.out.println(\"文件、\"+f2.getAbsoluteFile()+\"创建结束!\");\n			} else  \n			  System.out.println(\"目录\"+f.getAbsoluteFile()+\"创建失败!\");\n		}\n	}\n}');
INSERT INTO `programquestions` VALUES ('9', '编程题', '5', 'import java.io.*;\npublic class InFile{\n	public static void main(String[] args) \n	  {\n		int ch;\n		try{\n			FileOutputStream out=new FileOutputStream(\"a.txt\");\n			while((ch=System.in.read())!=\'\n\'){\n				System.out.write(ch);\n				out.write(ch);\n			}\n			out.close();\n			System.out.write(\'\n\');\n		}\n		catch(IOException e){\n			System.out.println(e.toString());\n		}\n		System.out.println(\"输出至文件完毕！\");\n	}\n}');
INSERT INTO `programquestions` VALUES ('9', '编程题', '6', 'import java.io.*;\npublic class Readtext {\n	public static void main(String[] args) {\n		String str1;\n		char ch1;\n		int n;\n		try{\n			File mytxt=new File(\"read.txt\");\n			RandomAccessFile ra=new RandomAccessFile(mytxt,\"rw\");\n			ra.write(\"This is the first sentence\".getBytes());\n			ra.writechar(\'\n\');\n			ra.write(\"Java Program Design\".getBytes());\n			ra.writechar(\'\n\');\n			ra.seek(0);\n			str1=ra.readLine();\n			System.out.println(str1);\n			ra.seek(18);\n			System.out.println(ra.readLine());\n			ra.close()\n		}\n		catch(IOException e) {\n			System.out.println(e.toString());\n		}\n	}\n}\n程序运行结果  This is the first sentence sentence');
INSERT INTO `programquestions` VALUES ('9', '编程题', '7', 'import java.io.*;\npublic class Exer6_7 {\n	//从键盘读入一组字符并返回    \n	public static String Keyboard()      {\n		BufferedReader InputStream = new BufferedReader(new InputStreamReader(System.in));\n		try {\n			return(InputStream.readLine());\n		}\n		catch (IOException e){\n			return \"Error occur when input from Keyboard!\";\n		}\n	}\n	//将一组字符存入文件     \n	public static void PuttoFile(String s,String fileName)     {\n		//String fileName=\"d:testInput.txt\";\n		try         {\n			FileWriter writer = new FileWriter(fileName);\n			writer.write(s);\n			//将随机数写入流    \n			writer.close();\n			//关闭流\n		}\n		catch (IOException iox)         {\n			System.out.println(\"Error occur when PuttoFile!\");\n		}\n	}');
INSERT INTO `programquestions` VALUES ('9', '编程题', '8', 'import java.io.*;\npublic class Exer6_7 {\n	//从键盘读入一组字符并返回 \n	public static String Keyboard()      {\n		BufferedReader InputStream = new BufferedReader(new InputStreamReader(System.in));\n		try {\n			return(InputStream.readLine());\n		}\n		catch (IOException e){\n			return \"Error occur when input from Keyboard!\";\n		}\n	}\n	//将一组字符存入文件  \n	public static void PuttoFile(String s,String fileName)     {\n		//String fileName=\"d:testInput.txt\"; \n		try         {\n			FileWriter writer = new FileWriter(fileName);\n			writer.write(s);\n			//将随机数写入流 \n			writer.close();\n			//关闭流\n		}\n		catch (IOException iox)         {\n			System.out.println(\"Error occur when PuttoFile!\");\n		}\n	}\n	//将数据从文件中读取出来  \n	public static String GetFromFile(String fileName)     {\n		String s=\"\";\n		//String fileName=\"d:/testInput.txt\";\n		try         {\n			BufferedReader in = new BufferedReader(new FileReader(fileName));\n			s=in.readLine();\n			//读取一串字符保存到s\n		}\n		catch(IOException io)         {\n			System.out.println(\"Error occur when GetFromFile!\");\n		}\n		return s;\n	}\n	//将一组字符排序(冒泡排序 升序排序) 并将排序后的字符串返回 \n	public static String sort(String s)     {\n		char[] c=s.toCharArray();\n		//将字符串转换成字符数组 \n		char temp;\n		//排序用到的临时变量      \n		for (int i=0;i<c.length-1;i++)             \n			for (int j=i+1;j<c.length;j++)               \n				if(c[i]>c[j]) {\n					temp=c[i];\n					c[i]=c[j];\n					c[j]=temp;\n				}\n		s=new String(c);\n		//注意 不能用c.toString  \n		return s;\n	}\n	public static void main(String args[]){\n		String s=Keyboard();\n		//从键盘输入一组字符      \n		PuttoFile(s,\"d:testInput.txt\");\n		//将字符保存到 d:\n		estInput.txt         s=GetFromFile(\"d:/testInput.txt\");\n		//从文件d:	estInput.txt读出数据     \n		s=sort(s);\n		//将s进行排序  \n		PuttoFile(s,\"d:testOutput.txt\");\n		//将排序后的内容保存到 d:	estOutput.txt  \n		System.out.println(s);\n		//将排序后的内容输出到屏幕上\n	}\n}');
INSERT INTO `programquestions` VALUES ('9', '编程题', '9', 'import java.io.*;\npublic class File3{\n	public static void main(String asd[])throws IOException{\n		int ch;\n		File file 1 = new File(“c:jdk1.3examplenewFile.txt”);\n		try{\n			FileInputStream fin = new FileInputStream(file1);\n			System.out.println(“文件中的信息为、”);\n			ch = fin.read();\n			while(ch!=-1){\n				System.out.print((char)ch);\n				ch = fin.read();\n			}\n			fin.close();\n		}\n		catch(FileNotFoundException e){\n			System.out.println(e);\n		}\n		Catch(IOException e){\n			System.out.println(e);\n		}\n	}\n}');
INSERT INTO `programquestions` VALUES ('9', '编程题', '10', 'import  java.io.*;\npublic class File2{\n	public static void main(String asd[]){\n		char ch;\n		File file1 = new File(“c:jdk1.3examplenewFile.txt”);\n		Try{\n			FileOutputStream fout = new FileOutputStream(file1);\n			System.out.println(“输入任一字符串，以？结束”);\n			ch = (char)System.in.read();\n			while(ch!=’?’){\n				fout.write(ch);\n				ch=(char)System.in.read();\n			}\n			Fout.close();\n		}\n		catch(FileNotFoundException e){\n			System.out.println(e);\n		}\n		catch(IOException e){\n			System.out.println(e);\n		}\n	}\n}');
INSERT INTO `programquestions` VALUES ('9', '编程题', '11', 'mport java.io.*;\npublic class WriteFile{\n	public static void main(String args[]) {\n		byte buffer[]=new byte[128];\n		System.out.println(\"请输入数据，回车后保存到文件test.txt\");\n		System.out.println(\"输入 # 则退出！\");\n		try{\n			FileOutputStream f=new FileOutputStream(\"test.txt\");\n			while(true){\n				int n=System.in.read(buffer);\n				if(buffer[0]==\'#\' ) break;\n				f.write(buffer,0,n);\n				f.write(\'\n\');\n			}\n			f.close();\n		}\n		catch(IOException e) {\n			System.out.println(e.toString());\n		}\n	}\n}');
INSERT INTO `programquestions` VALUES ('9', '编程题', '12', ' public static void main(String []args)throws IOException{ \r\nBufferedReader br = new BufferedReader(new inputStreamReader(System.in)) \r\nString password = “”; \r\nfor(int i-0;i<3;i++){ \r\nStstem.our.println(“请输入密码、”) \r\nPassword = br.readLine(); \r\nif(password.equals(“123456”)) \r\nbreak;}else \r\n{if(i==2){ \r\nStsrem.out.println(“累计密码错误达到3次，退出游戏！”); \r\nStstem.exit(0); \r\n} \r\n} \r\n}');
INSERT INTO `programquestions` VALUES ('9', '编程题', '13', 'Import java.io.*； \n    class BRRead{\n	public static void main(String[]args)throws IOException{\n		char c;\n		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n		c = (char)br.read();\n		System.out.println(c);\n	}\n}');
INSERT INTO `programquestions` VALUES ('9', '编程题', '14', 'package test;\nclass  SplitString {\n	String SplitStr;\n	int Splitbyte;\n	public SplitString(String str,int bytes) {\n		SplitStr=str;\n		Splitbyte=bytes;\n		System.out.println(\"The String is:\'\"+SplitStr+\"\';SplitBytes=\"+Splitbyte);\n	}\n	public void SplitIt() {\n		int loopCount;\n		loopCount=(SplitStr.length()%Splitbyte==0)?(SplitStr.length()/Splitbyte\n				):(SplitStr.length()/Splitbyte+1);\n		System.out.println(\"Will Split into \"+loopCount);\n		for (int i=1;i<=loopCount ;i++ ) {\n			if (i==loopCount){\n				System.out.println(SplitStr.substring((i-1)*Splitbyte,SplitStr.length()));\n			} else {\n				System.out.println(SplitStr.substring((i-1)*Splitbyte,(i*Splitbyte)));\n			}\n		}\n	}\n	public static void main(String[] args) {\n		SplitString ss = new SplitString(\"test中dd文dsaf中男大3443n中国43中国人0ewldfls=103\",4);\n		ss.SplitIt();\n	}\n}');
INSERT INTO `programquestions` VALUES ('9', '编程题', '15', 'Import java.io.*； \n    class BRRead{\n	public static void main(String[]args)throws IOException{\n		char c;\n		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n		c = (char)br.read();\n		System.out.println(c);\n	}\n}');
INSERT INTO `programquestions` VALUES ('9', '编程题', '16', 'import java.io.*;\nclass ReadWriteFile{\n	public static void main(String[] args) {\n		String file1,file2 ;\n		int ch = 0 ;\n		file1 = \"readme.txt\" ;\n		file2=\"readme.bak\";\n		try{\n			FileInputStream fis = new FileInputStream(file1);\n			FileOutputStream fos=new FileOutputStream(file2);\n			int size=fis.available();\n			System.out.println(\"字节有效数、\"+size);\n			while ((ch=fis.read())!=-1){\n				System.out.write(ch);\n				fos.write(ch);\n			}\n			fis.close();\n			fos.close();\n		}\n		catch (IOException e){\n			System.out.println(e.toString());\n		}\n	}\n}');
INSERT INTO `programquestions` VALUES ('9', '编程题', '17', 'import java.io.*;\npublic class StandardIO2 {\n	public static void main(String []args) {\n		byte ch[]=new byte[128];\n		System.out.println(\"请输入一行字符\");\n		try{\n			System.in.read(ch,0,128);\n			System.out.println(\"你输入的内容如下、\");\n			String str=new String(ch);\n			//转换成字符串 \n			System.out.println(str);\n		}\n		catch(IOException e){\n			System.out.println(e.toString());\n		}\n	}\n}');
INSERT INTO `programquestions` VALUES ('9', '编程题', '18', '\r\nimport java.io.*; \r\npublic class File3{ \r\npublic static void main(String asd[])throws IOException{ \r\nint ch; \r\nFile file 1 = new File(“c:\\jdk1.3\\example\\newFile.txt”); \r\ntry{ \r\nFileInputStream fin = new FileInputStream(file1); \r\nSystem.out.println(“文件中的信息为、”); \r\nch = fin.read(); \r\nwhile(ch!=-1){ \r\nSystem.out.print((char)ch); \r\nch = fin.read();} \r\nfin.close(); \r\n}catch(FileNotFoundException e){System.out.println(e);} \r\nCatch(IOException e){ \r\nSystem.out.println(e); \r\n} \r\n} \r\n}');
INSERT INTO `programquestions` VALUES ('9', '编程题', '19', 'import java.io.*;\npublic class File4{\n	public static void main(String asd[]){\n		int ch ;\n		InputStreamReader iin = new InputStreamReader(System.in);\n		BufferedReader bin = new BufferedReader(iin);\n		File file1= new File(“c:jdk1.3exampledataFile.txt”);\n		try{\n			FileOutputStream fout = new FileOutputStream(file1);\n			DataOutputStream dout = new DataOutputStream(fout);\n			System.out.println(“输入整数、”);\n			int I = Integer.parseint(bin.readLine());\n			System.out.println(“输入浮点数、”);\n			float f=float.parsefloat(bin.readLine());\n			System.out.println(“输入布尔量”);\n			Boolean b = new Boolean(bin.readLine()).blooeanValue();\n			dout.write(i);\n			dout.writefloat(f);\n			dout.writeBoolean(b);\n			dout.close();\n		}\n		catch(FileNotFoundException e){\n			System.out.println(e);\n		}\n		catch(IOException e){\n			System.out.println(e);\n		}\n	}\n}');
INSERT INTO `programquestions` VALUES ('9', '编程题', '20', 'import java.io.*;\npublic class File4{\n	public static void main(String asd[])throws IOException{\n		int ch;\n		File file1 = new File(“c:jdk1.3exampleexampledataFile.txt”);\n		File file2 = new File(“c:jdk1.3exampleexampleoutFile.txt”);\n		try {\n			FileInputStream fin = new FileInputStream(file1);\n			DataInputStream din=new DataInputStream(fin);\n			int i = din.readint();\n			float f = din.readfloat();\n			Boolean b = din.readBoolean();\n			din.close();\n			FileOutputStream fout = new FileOutputStream(file2);\n			DataOutputStream dout = new DataOutputStream(fout);\n			dout.writeint(i);\n			dout.writefloat(f);\n			dout.writeBoolean(b);\n			dout.close();\n			System.out.println(“整数、”+i);\n			System.out.println(“浮点数、”+f);\n			System.out.println(“布尔量、”+b);\n		}\n		catch(FileNotFoundException e){\n			System.out.println(e);\n		}\n		catch(IOException e){\n			System.out.println(e);\n		}\n	}\n}');
INSERT INTO `programquestions` VALUES ('9', '编程题', '21', 'import java.io.*;\nclass CopyFile{\n	public static void main(String[] args) {\n		String file1,file2 ;\n		int ch = 0 ;\n		try {\n			file1=args[0];\n			file2=args[1];\n			File无效Stream fis = new File无效Stream(file1);\n			FileOutputStream fos=new FileOutputStream(file2);\n			while ((ch=fis.read())!=-1)     fos.write(ch);\n			fis.close();\n			fos.close();\n		}\n		catch(FileNotFoundException e){\n			System.out.println(\"源文件:未找到!\");\n		}\n		catch(ArrayIndexOutOfBoundsException e){\n			System.out.println(\"缺少运行参数！\");\n			System.exit(-1);\n		}\n		catch (IOException e){\n			System.out.println(e.toString());\n		}\n	}\n}');
INSERT INTO `programquestions` VALUES ('9', '编程题', '22', 'import java.io.*;\npublic class Sort{\n	public static void main(String args[])     {\n		int a[]=new int[10];\n		byte b[]=new byte[10];\n		int t;\n		String str;\n		System.out.println(\"请输入10个整数、\");\n		try{\n			for (int i=0;i<10;i++)     {\n				System.out.print(\"No. \"+(i+1)+\": \");\n				System.in.read(b);\n				str=new String(b);\n				str=str.trim();\n				a[i]=Integer.parseint(str);\n			}\n		}\n		catch(IOException e){\n			System.out.println(e.toString());\n		}\n		catch(NumberFormatException e){\n			System.out.println(e.toString());\n		}\n		for (int i=0;i<9;i++)     for (int j=i+1;j<10;j++)     {\n			if(a[i]>a[j]){\n				t=a[i];\n				a[i]=a[j];\n				a[j]=t;\n			}\n		}\n		for (int i=0;i<10;i++)     System.out.println(a[i]+\"	\");\n	}\n}');
INSERT INTO `programquestions` VALUES ('9', '编程题', '23', 'import java.io.*;\npublic class InFile{\n	public static void main(String[] args)     {\n		int ch;\n		try{\n			FileOutputStream out=new FileOutputStream(\"a.txt\");\n			while((ch=System.in.read())!=\'\'){\n				System.out.write(ch);\n				out.write(ch);\n			}\n			out.close();\n			System.out.write(\'\');\n		}\n		catch(IOException e){\n			System.out.println(e.toString());\n		}\n		System.out.println(\"输出至文件完毕！\");\n	}\n}');
INSERT INTO `programquestions` VALUES ('9', '编程题', '24', 'import java.io.*;\npublic class Count{\n	public static void main(String[] args)     {\n		int x=0,y=0,z=0;\n		int ch;\n		try{\n			while((ch=System.in.read())!=\'){\n				if(ch>=\'A\'&&ch<=\'Z\'||ch>=\'a\'&&ch<=\'z\')     x++; else if(ch>=\'0\'&&ch<=\'9\')     y++; else     z++;\n			}\n		}\n		catch(IOException e){\n			System.out.println(e.toString());\n		}\n		System.out.println(\"英文字母、\"+x);\n		System.out.println(\"数字字符、\"+y);\n		System.out.println(\"其它字符、\"+z);\n	}\n}');
INSERT INTO `programquestions` VALUES ('11', '编程题', '1', 'import java. sql.*;\npublic class fieldlist {\n	public static void main(String args[]) {\n		try {\n			Class.forName(\"sun.jdbC odbC JdbcOdbcDriver\");\n			Connection con=DriverManager.getConnection(\"jdbc:odbc:dsntest\");\n			Statement stmt=con.createStatement();\n			ResultSet rs=stmt.executeQuery(\"select * from test\");\n			for (int i=1;i<=rs.getMetaData().getColumnCount();i++) {\n				System.out.print(rs.getMetaData().getColumnName(i)+\"	\");\n			}\n			// 跟踪显示各个列的名称  \n			rs.close();\n			stmt.close();\n			con.close();\n		}\n		catch(Exception e){\n			System.out.println(e);\n		}\n	}\n}');
INSERT INTO `programquestions` VALUES ('11', '编程题', '2', 'import java.sql.*;\npublic class ResultSetTest {\n	public static void main(String args[]) {\n		try {\n			Class.forName(\"sun.jdbC odbC JdbcOdbcDriver\");\n			Connection con=DriverManager.getConnection(\"jdbc:odbc:dsntest\");\n			Statement stmt=con.createStatement();\n			ResultSet rs=stmt.executeQuery(\"select * from test\");\n			for (int i=1;i<=rs.getMetaData().getColumnCount();i++) {\n				System.out.print(rs.getMetaData().getColumnName(i)+\"	\");\n			}\n			// 跟踪显示各个列的名称  \n			while(rs.next()) {\n				//跟踪显示各个列的值  \n				for (int j=1; j<=rs.getMetaData().getColumnCount(); j++) {\n					System.out.print(rs.getObject(j)+\"	\");\n				}\n			}\n			rs.close();\n			stmt.close();\n			con.close();\n		}\n		catch(Exception e) {\n			System.out.println(e);\n		}\n	}\n}');
INSERT INTO `programquestions` VALUES ('11', '编程题', '3', 'import java. sql.*;\npublic class dbinsert {\n	public static void main(String args[]) {\n		try {\n			Class.forName(\"sun.jdbC odbC JdbcOdbcDriver\");\n			Connection con=DriverManager.getConnection(\"jdbc:odbc:testdsn\");\n			Statement stmt=con.createStatement();\n			ResultSet rs=stmt.executeQuery(\"select * from test\");\n			stmt.executeUpdate(\"Insert into student(id,name,age,sex)  \nvalues(2,\'huang\',30,true)\");\n			rs=stmt.executeQuery(\"select * from test\");\n			System.out.println(\"更新后的结果：\");\n			while(rs.next()) {\n				System.out.print(rs.getString(\"id\")+\"	\");\n				System.out.print(rs.getString(\"name\")+\"	\");\n				System.out.print(rs.getString(\"age\")+\"	\");\n				System.out.println(rs.getString(\"sex\"));\n			}\n			rs.close();\n			stmt.close();\n			con.close();\n		}\n		catch(Exception e)  \n		{\n			System.out.println(e);\n		}\n	}\n}');
INSERT INTO `programquestions` VALUES ('11', '编程题', '4', 'import javA sql.*;\npublic class dbinsert {\n	public static void main(String args[]) {\n		try {\n			Class.forName(\"sun.jdbC odbC JdbcOdbcDriver\");\n			Connection con=DriverManager.getConnection(\"jdbc:odbc:testdsn\");\n			Statement stmt=con.createStatement();\n			ResultSet rs=stmt.executeQuery(\"select * from test\");\n			stmt.executeUpdate(\"Delete from student where id=100\");\n			rs=stmt.executeQuery(\"select * from test\");\n			System.out.println(\"更新后的结果：\");\n			while(rs.next()) {\n				System.out.print(rs.getString(\"id\")+\"	\");\n				System.out.print(rs.getString(\"name\")+\"	\");\n				System.out.print(rs.getString(\"age\")+\"	\");\n				System.out.println(rs.getString(\"sex\"));\n			}\n			rs.close();\n			stmt.close();\n			con.close();\n		}\n		catch(Exception e)  \n		{\n			System.out.println(e);\n		}\n	}\n}');
INSERT INTO `programquestions` VALUES ('11', '编程题', '5', 'import javA sql.*;\npublic class dbinsert  \n{\n	public static void main(String args[])  \n	{\n		try {\n			Class.forName(\"sun.jdbC odbC JdbcOdbcDriver\");\n			Connection con=DriverManager.getConnection(\"jdbc:odbc:testdsn\");\n			Statement stmt=con.createStatement();\n			ResultSet rs=stmt.executeQuery(\"select * from test\");\n			stmt.executeUpdate(\"Update student set name=\'张三\' where id=101\");\n			rs=stmt.executeQuery(\"select * from test\");\n			System.out.println(\"更新后的结果：\");\n			while(rs.next()) {\n				System.out.print(rs.getString(\"id\")+\"	\");\n				System.out.print(rs.getString(\"name\")+\"	\");\n				System.out.print(rs.getString(\"age\")+\"	\");\n				System.out.println(rs.getString(\"sex\"));\n			}\n			rs.close();\n			stmt.close();\n			con.close();\n		}\n		catch(Exception e)  \n		{\n			System.out.println(e);\n		}\n	}\n}');

-- ----------------------------
-- Table structure for questions
-- ----------------------------
DROP TABLE IF EXISTS `questions`;
CREATE TABLE `questions` (
  `CHAPTER` int(11) NOT NULL,
  `TYPE` char(20) NOT NULL,
  `NUMBER` int(11) NOT NULL,
  `questiondescribe` text NOT NULL,
  PRIMARY KEY (`CHAPTER`,`TYPE`,`NUMBER`),
  CONSTRAINT `cc` FOREIGN KEY (`CHAPTER`) REFERENCES `knowledge` (`CHAPTER`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of questions
-- ----------------------------
INSERT INTO `questions` VALUES ('1', '判断题', '1', 'Java 语言不区分大小写。（      ');
INSERT INTO `questions` VALUES ('1', '判断题', '2', 'Java 程序源文件的扩展名为.class。（      ）');
INSERT INTO `questions` VALUES ('1', '判断题', '3', 'Java 程序中都含有 main 方法，因为它是所有 Java 程序执行的入口。 （      ）');
INSERT INTO `questions` VALUES ('1', '判断题', '4', 'Java 程序可以运行在任何操作系统上，只要有对应操作系统的虚拟机。（      ）');
INSERT INTO `questions` VALUES ('1', '判断题', '5', 'Java 程序源文件名应该与主类名保持一致。（      ）');
INSERT INTO `questions` VALUES ('1', '判断题', '6', '“//”即可以表示单行注释，也可以表示多行注释。（     ）');
INSERT INTO `questions` VALUES ('1', '判断题', '7', 'Java 中的整型 int 占 2个字节，取值范围为-32768～32767。（    ）');
INSERT INTO `questions` VALUES ('1', '判断题', '8', '在 Java 语言中，执行语句 ”boolean t=1 && 0;”的结果是给 boolean 类型变量 t 赋初值为 false。（     ）');
INSERT INTO `questions` VALUES ('1', '判断题', '9', '声明变量时必须定义一个类型。 （       ）');
INSERT INTO `questions` VALUES ('1', '判断题', '10', '注释的作用是使程序在执行时在屏幕上显示注释符号之后的内容。（       ）');
INSERT INTO `questions` VALUES ('1', '判断题', '11', 'Java 认为变量 Sum 与 sum 是相同的。 （      ）');
INSERT INTO `questions` VALUES ('1', '判断题', '12', '求模运算符（%）只可用于整型操作数。 （       ）');
INSERT INTO `questions` VALUES ('1', '判断题', '13', '算术运算符*，/，%，+和-有相同的优先级。 （     ）');
INSERT INTO `questions` VALUES ('1', '判断题', '14', 'Java 语言中的标识符可以以数字、字母或下划线开头。 （     ）');
INSERT INTO `questions` VALUES ('1', '判断题', '15', 'Java 中小数常量的默认类型为 float 类型，所以表示单精度浮点数时，可以不在后面加F 或 f。 （      ）');
INSERT INTO `questions` VALUES ('1', '判断题', '16', 'Java语言是IBM公司设计的一种面向对象程序设计语言。（       ）');
INSERT INTO `questions` VALUES ('1', '判断题', '17', '一个Unicode字符占4个字节。 （      ）');
INSERT INTO `questions` VALUES ('1', '判断题', '18', '假设x、y都是float型，分别等于5和7，而x1、y1则是double型，分别等于5.0和7.0，那么x/y与x1/y1的值不相等（     ）');
INSERT INTO `questions` VALUES ('1', '判断题', '19', '用Javac编译Java源文件后得到代码叫字节码。（       ）');
INSERT INTO `questions` VALUES ('1', '判断题', '20', 'applet可以运行在浏览器中。 （       ）');
INSERT INTO `questions` VALUES ('1', '填空题', '1', '___是唯一标志一个变量（variable）、方法（method）和类（class）等的名字。');
INSERT INTO `questions` VALUES ('1', '填空题', '2', '标识符是区分的，可以为任意长度（unlimited-length），但一般来说，长度适中即可。');
INSERT INTO `questions` VALUES ('1', '填空题', '3', '标识符以_______、___或_________开始，并包含这些字符和数字的字符序列。');
INSERT INTO `questions` VALUES ('1', '填空题', '4', '标识符不能使用java语言定义的___________。');
INSERT INTO `questions` VALUES ('1', '填空题', '5', '_________数据类型是不能简化的、内置的数据类型，用以表示真是的数字、字符等，通常用来构建更复杂的数据类型。');
INSERT INTO `questions` VALUES ('1', '填空题', '6', 'java的开发工具包包括_________，__________，_________三种不同的工具包。');
INSERT INTO `questions` VALUES ('1', '填空题', '7', 'JVM是（_______--javavirtualmachine），JDK是（_______--JavaDeveloper\'sKit）。');
INSERT INTO `questions` VALUES ('1', '填空题', '8', 'java中最简单的一种数据类型是______，其类型说明符为_______。');
INSERT INTO `questions` VALUES ('1', '填空题', '9', '布尔类型变量的值只有两种值，其值为___和__。');
INSERT INTO `questions` VALUES ('1', '填空题', '10', '整数类型包括________、______、_____、____，他们都是带符号的（即有正负之分），表示数学中的整个数。');
INSERT INTO `questions` VALUES ('1', '填空题', '11', 'byte类型数据占______位空间，short类型数据占______位空间，int类型数据占__位空间，long类型数据占位空间。');
INSERT INTO `questions` VALUES ('1', '填空题', '12', '除了常见的十进制表示外，还可以用____进制和_____进制来表示整数。');
INSERT INTO `questions` VALUES ('1', '填空题', '13', '浮点类型包括______和______两种数据类型，他们是带符号的（有正负之分），表示的是数学中的小数。');
INSERT INTO `questions` VALUES ('1', '填空题', '14', 'float类型数据占据_______位空间，double类型数据占据位空间。');
INSERT INTO `questions` VALUES ('1', '填空题', '15', '对于浮点型数据，其十进制形式由______和______组成，且必须含有小数点。');
INSERT INTO `questions` VALUES ('1', '填空题', '16', '在java中___也可以使用科学计数法来表示。');
INSERT INTO `questions` VALUES ('1', '填空题', '17', '常用的算术运算符有+，-，*，/，在java中用来表示_______、__、__和_____。');
INSERT INTO `questions` VALUES ('1', '填空题', '18', '_____运算符能够用于String的连接操作是java提供的一种特别支持。');
INSERT INTO `questions` VALUES ('1', '填空题', '19', '/运算对于两个整数的除法，返回值是他们的商的整数部分（int型）。可以通过取模运算符______来获取他们的余数。');
INSERT INTO `questions` VALUES ('1', '填空题', '20', 'java中递增符号为_______，java中递减符号为______，赋值运算符是_______。');
INSERT INTO `questions` VALUES ('1', '填空题', '21', '实际上，递增递减使用的是一种所谓的后缀形式，即递增，递减运算符在变量的后面，其实，递增递减也可以试用_____缀形式。');
INSERT INTO `questions` VALUES ('1', '填空题', '22', '新建一个对象的运算符是______，调用对象的属性和方法的运算符是________。');
INSERT INTO `questions` VALUES ('1', '填空题', '23', '关系运算符运算后的产生一个______类型的结果。');
INSERT INTO `questions` VALUES ('1', '填空题', '24', '关系运算中如果关系成立（为真），将返回______，否则返回_______。');
INSERT INTO `questions` VALUES ('1', '填空题', '25', '关系运算符包括_____（>）、____（<）、_____（==）、_____（>=）、_______（<=）和________（！=）。');
INSERT INTO `questions` VALUES ('1', '填空题', '26', 'boolean类型变量只能使用_______和______两个关系运算符进行比较。');
INSERT INTO `questions` VALUES ('1', '填空题', '27', '与关系运算一样，______运算也会产生boolean结果。');
INSERT INTO `questions` VALUES ('1', '填空题', '28', 'equals方法比较的是对象的________内容。');
INSERT INTO `questions` VALUES ('1', '填空题', '29', '逻辑运算符包括_______（逻辑与），_______（逻辑或），和________（逻辑非）。');
INSERT INTO `questions` VALUES ('1', '填空题', '30', '逻辑运算符中________和________是二目运算服，而______是一目运算符。');
INSERT INTO `questions` VALUES ('1', '填空题', '31', '一个基本的Java程序包括________，__________，________，_______和________五部分。');
INSERT INTO `questions` VALUES ('1', '填空题', '32', '短路逻辑运算包括_______和_______。');
INSERT INTO `questions` VALUES ('1', '填空题', '33', '在文件的路径使用中path1path2path3，java对他的描述为_______________。');
INSERT INTO `questions` VALUES ('1', '填空题', '34', 'java语言中使用”{”开始，应用”______”结束。');
INSERT INTO `questions` VALUES ('1', '填空题', '35', 'java允许的三种注释方法为、__________，__________，________。');
INSERT INTO `questions` VALUES ('1', '填空题', '36', '_Java语言中，小数默认为____________类型。');
INSERT INTO `questions` VALUES ('1', '填空题', '37', '在java中数据类型分为_______________和______________两大类。');
INSERT INTO `questions` VALUES ('1', '填空题', '38', '逻辑表达式：（34<=25）&&(68!=90)||(48*2<100)的值为________。');
INSERT INTO `questions` VALUES ('1', '填空题', '39', 'Math类的random()方法可以产生一个_________之间的_________型随机数。');
INSERT INTO `questions` VALUES ('1', '填空题', '40', '在Java语言中，逻辑常量只有_________和_________两个值。');
INSERT INTO `questions` VALUES ('1', '填空题', '41', '所谓N目运算符，是指参加运算的变量的个数为_______。');
INSERT INTO `questions` VALUES ('1', '填空题', '42', '当参加逻辑运算的两个变量都为_____时，逻辑与运算才返回true，否则返回false。');
INSERT INTO `questions` VALUES ('1', '填空题', '43', '有一个参与逻辑运算的变量为真时，逻辑或运算便会返回______。');
INSERT INTO `questions` VALUES ('1', '填空题', '44', '当且仅当逻辑运算的变量都为假时，逻辑或运算才会返回_______。');
INSERT INTO `questions` VALUES ('1', '填空题', '45', '逻辑非就是简单地取反、true变为______，false变为______。');
INSERT INTO `questions` VALUES ('1', '填空题', '46', '&&、||和！只能作用于____________类型值上。');
INSERT INTO `questions` VALUES ('1', '填空题', '47', '位运算允许直接操作一个整数的每个_______进制位。');
INSERT INTO `questions` VALUES ('1', '填空题', '48', '位运算符包括按位与(_______)、按位或(______)、按位异或(_______)等。');
INSERT INTO `questions` VALUES ('1', '填空题', '49', '位运算符会对参与运算的变量所对应的二进制位进行_______运算，并产生一个结果。');
INSERT INTO `questions` VALUES ('1', '填空题', '50', '在位运算中可以把0视为_______，1视为______。');
INSERT INTO `questions` VALUES ('1', '填空题', '51', '当且仅当参与位运算的两个位都为1时，位与运算才返回______，否则返回_______。');
INSERT INTO `questions` VALUES ('1', '填空题', '52', '只要有一个参与位运算的位为1时，位或运算就返回_______。');
INSERT INTO `questions` VALUES ('1', '填空题', '53', '当且仅当参与位运算的两个位都为0时，位或运算才返回_________。');
INSERT INTO `questions` VALUES ('1', '填空题', '54', '位运算中，非就是简单的取反、1变为______，0变为_____。');
INSERT INTO `questions` VALUES ('1', '填空题', '55', '在java中好哎呦左移位运算符（_______）和右移位运算符（_______）。');
INSERT INTO `questions` VALUES ('1', '填空题', '56', '若a为int型变量且赋值6。执行语句a--后a的值是___。执行语句a++后a的值是_________。');
INSERT INTO `questions` VALUES ('1', '填空题', '57', '表达式（10/3）的值是________。表达式（-10/3）的值是_________。');
INSERT INTO `questions` VALUES ('1', '填空题', '58', '在一个Java源文件中定义了3个类和15个方法，编译该Java源文件时会产生_______个字节码文件，其扩展名是_______。');
INSERT INTO `questions` VALUES ('1', '填空题', '59', '字符变量以char类型表示，它在内存中占________位bit。');
INSERT INTO `questions` VALUES ('1', '填空题', '60', '在Java语言中，如数字后没有任何字母，计算机默认为_________类型。');
INSERT INTO `questions` VALUES ('1', '填空题', '61', '在java中，赋值运算是通过数学符号中的______来完成的。');
INSERT INTO `questions` VALUES ('1', '填空题', '62', '在java赋值运算中等号的意思是获取等号_______边的值并将他复制到_________边。');
INSERT INTO `questions` VALUES ('1', '填空题', '63', '赋值运算中等号左边的值称为左值，右边的称为右值。右值可以是任何数、变量或是表达式，而左值则必须是一个_______。');
INSERT INTO `questions` VALUES ('1', '填空题', '64', '可以将一个常数赋值给_________（如x=1），但是不能为常数赋值。');
INSERT INTO `questions` VALUES ('1', '填空题', '65', '每个Java应用程序可以包括许多方法，但必须有且只能有一个_________方法。');
INSERT INTO `questions` VALUES ('1', '填空题', '66', 'Java编程的三个步骤、编辑源程序、______________和解释运行字节码。');
INSERT INTO `questions` VALUES ('1', '填空题', '67', '根据结构组成和运行环境的不同，Java程序可以分为两类、___________和________。');
INSERT INTO `questions` VALUES ('1', '填空题', '68', '__状态和行为是对象的主要属性。对象的状态在计算机内部是用___________来表示，而对象的行为在计算机内部是用_________来表示。');
INSERT INTO `questions` VALUES ('1', '填空题', '69', '关于main方法的方法头正确的书写格式是_________________________________。');
INSERT INTO `questions` VALUES ('1', '填空题', '70', 'Java语言的各种数据类型之间提供两种转换、____________和强制转换。');
INSERT INTO `questions` VALUES ('1', '填空题', '71', '开发与运行Java程序需要经过的三个主要步骤为、_____________、____________和___________。');
INSERT INTO `questions` VALUES ('1', '填空题', '72', '_若x=100，y=120，则x>y和x<=y的逻辑值分别为_________和___________。');
INSERT INTO `questions` VALUES ('1', '填空题', '73', '设x=60，则表达式(x++)／3的值是________。');
INSERT INTO `questions` VALUES ('1', '填空题', '74', '_Java语言的整型常量有十进制、十六进制和八进制三种形式，从这角度来说，4589是_________整数，0x3890是_______整数，02548是_______整数。');
INSERT INTO `questions` VALUES ('1', '填空题', '75', 'Java源文件中最多只能有一个________类，其他类的个数不限。');
INSERT INTO `questions` VALUES ('1', '填空题', '76', '创建包的语句应该放在程序的位置_________。');
INSERT INTO `questions` VALUES ('1', '选择题', '1', '语法错误由（      ）发现的。');
INSERT INTO `questions` VALUES ('1', '选择题', '2', 'Java的源代码文件具有（      ）的扩展名');
INSERT INTO `questions` VALUES ('1', '选择题', '3', 'JAVA 语言是在1991年有Jame Gosling 在（      ）创立的。');
INSERT INTO `questions` VALUES ('1', '选择题', '4', 'java运行环境只可以识别出（     ）文件。');
INSERT INTO `questions` VALUES ('1', '选择题', '5', '拥有扩展名为 （       ）的文件可以存储程序员所编写的Java源代码。');
INSERT INTO `questions` VALUES ('1', '选择题', '6', ' Java是（     ）语言的一个实例，其单条程序语句便可以完成任务。');
INSERT INTO `questions` VALUES ('1', '选择题', '7', 'Java编程言提供了可以由开发人员直接使用的（     ），因而每个应用程序不必从头创建，只需导入相应需要的就可以了。');
INSERT INTO `questions` VALUES ('1', '选择题', '8', '（      ）可将一个java文件转换成一个class文件');
INSERT INTO `questions` VALUES ('1', '选择题', '9', '在查找到应用程序的一个语法错误以后，编译程序将给用户通告此错误（      ）');
INSERT INTO `questions` VALUES ('1', '选择题', '10', '语法错误可因多种原因产生，例如，当（    ）');
INSERT INTO `questions` VALUES ('1', '选择题', '11', '为了编译应用程序，输入命令（      ）并跟上相应文件的名字。');
INSERT INTO `questions` VALUES ('1', '选择题', '12', '下面对标识符的描述，正确的是（        ）');
INSERT INTO `questions` VALUES ('1', '选择题', '13', '方法（       ）可将一个数值转换成文本。');
INSERT INTO `questions` VALUES ('1', '选择题', '14', '下面的数据类型强制转换中，需要把一个字符串转换为数字型的方法中，哪个是正确的（        ）。');
INSERT INTO `questions` VALUES ('1', '选择题', '15', '乘法运算符一侧的表达式被引述为它的（     ）');
INSERT INTO `questions` VALUES ('1', '选择题', '16', '在数据类型的强制转化中，其中方法Integer.parseInt（）的功能描述正确的是（      ）。');
INSERT INTO `questions` VALUES ('1', '选择题', '17', '（       ）字符是一个乘法运算符号');
INSERT INTO `questions` VALUES ('1', '选择题', '18', '一个（       ）运算拥有两个操作数');
INSERT INTO `questions` VALUES ('1', '选择题', '19', '下面对注释的功能描述正确的是（       ）');
INSERT INTO `questions` VALUES ('1', '选择题', '20', 'Java语句在遇到（      ）时将结束。');
INSERT INTO `questions` VALUES ('1', '选择题', '21', ' 文档注释的@version标识表示（        ）。');
INSERT INTO `questions` VALUES ('1', '选择题', '22', '文档注释的@param标识表示（      ）。');
INSERT INTO `questions` VALUES ('1', '选择题', '23', '（        ）是规范的类名。');
INSERT INTO `questions` VALUES ('1', '选择题', '24', '（       ）是规范的类包名字。');
INSERT INTO `questions` VALUES ('1', '选择题', '25', '（       ）是规范的常量名称。');
INSERT INTO `questions` VALUES ('1', '选择题', '26', 'Java语言中的关键字是（       ）。');
INSERT INTO `questions` VALUES ('1', '选择题', '27', '类的声明是以（          ）作为结束');
INSERT INTO `questions` VALUES ('1', '选择题', '28', '方法（        ）可以将文本转换成数值');
INSERT INTO `questions` VALUES ('1', '选择题', '29', '变量名必须是一个（           ）。');
INSERT INTO `questions` VALUES ('1', '选择题', '30', '一些已在Java 中定义的类型，如int，被认为是（        ）类型。');
INSERT INTO `questions` VALUES ('1', '选择题', '31', '在Java中，（     ）可由“”来表示。');
INSERT INTO `questions` VALUES ('1', '选择题', '32', '当一个变量被放置在内存中的某一个单元中时，此值会（     ）该单元中先前所存放的值。');
INSERT INTO `questions` VALUES ('1', '选择题', '33', '在Java中 ，在编写算术表达式的时候，必须（      ）才能输入进计算机中。');
INSERT INTO `questions` VALUES ('1', '选择题', '34', '赋值运算符（=）右侧的表达式总是在赋值发生之（     ）进行');
INSERT INTO `questions` VALUES ('1', '选择题', '35', '断点不能设置在（     ）中');
INSERT INTO `questions` VALUES ('1', '选择题', '36', '当应用程序在某个断点处暂时执行时，下一条即将执行的语句将位于该断点所在执行语句（       ）的语句');
INSERT INTO `questions` VALUES ('1', '选择题', '37', '为便于阅读表达式而添加在表达式中的括号被认识是（       ）括号');
INSERT INTO `questions` VALUES ('1', '选择题', '38', '运算符（       ）用于执行除法运算');
INSERT INTO `questions` VALUES ('1', '选择题', '39', '每一个变量都拥有一个（        ）');
INSERT INTO `questions` VALUES ('1', '选择题', '40', '在Java中，使用（      ）可强制运算符的执行次序。');
INSERT INTO `questions` VALUES ('1', '选择题', '41', '如果一个表达式中包含多个表示乘法、除法、和求余的运算符，那么他们将按照(    )的顺序进行执行');
INSERT INTO `questions` VALUES ('1', '选择题', '42', '调试程序中的（     ）命令能够对应应用程序源代码中的一个可执行的代码行设置断点。');
INSERT INTO `questions` VALUES ('1', '选择题', '43', '注释内容在代码编写中经常出现，下面对注释功能的说明正确的是(       )。');
INSERT INTO `questions` VALUES ('1', '选择题', '44', '用于完成某个特定任务并且可能会返回一个值的代码部分被认为是（    ）');
INSERT INTO `questions` VALUES ('1', '选择题', '45', '用于存储整数值的变量应使用关键字（        ）进行申明');
INSERT INTO `questions` VALUES ('1', '选择题', '46', '（       ）是帮助程序员开发算法的一个人工的、非正式的语言');
INSERT INTO `questions` VALUES ('1', '选择题', '47', '下面对伪代码的描述中，正确的是（    ）');
INSERT INTO `questions` VALUES ('1', '选择题', '48', '符号（         ）并不属于一个Java运算符');
INSERT INTO `questions` VALUES ('1', '选择题', '49', '下面哪些是java语言中的关键字？（          ）');
INSERT INTO `questions` VALUES ('1', '选择题', '50', '下面语句哪个是正确的？ （     ）');
INSERT INTO `questions` VALUES ('1', '选择题', '51', '以下程序测试String 类的各种构造方法，试选出其运行效果。  (       )\r\n  class STR{\r\n   public static void main(String args[]){\r\n    String s1=new String();\r\n    String s2=new String(\"String 2\");\r\n    char chars[]={\'a\',\' \',\'s\',\'t\',\'r\',\'i\',\'n\',\'g\'};\r\n    String s3=new String(chars);\r\n    String s4=new String(chars,2,6);\r\n    byte bytes[]={0,1,2,3,4,5,6,7,8,9};\r\n    StringBuffer sb=new StringBuffer(s3);\r\n    String s5=new String(sb);\r\n    System.out.println(\"The String No.1 is \"+s1);\r\n    System.out.println(\"The String No.2 is \"+s2);\r\n    System.out.println(\"The String No.3 is \"+s3);\r\n    System.out.println(\"The String No.4 is \"+s4);\r\n    System.out.println(\"The String No.5 is \"+s5);\r\n   }\r\n  }');
INSERT INTO `questions` VALUES ('1', '选择题', '52', '下面语句段的输出结果是什么？ (        )\r\n  int i = 9;\r\n  switch (i) {\r\n  default:\r\n  System.out.println(\"default\");\r\n  case 0:\r\n  System.out.println(\"zero\");\r\n  break;\r\n  case 1:\r\n  System.out.println(\"one\");\r\n  case 2:\r\n  System.out.println(\"two\"); }');
INSERT INTO `questions` VALUES ('1', '选择题', '53', '下列哪个是合法的标识符、(     )');
INSERT INTO `questions` VALUES ('1', '选择题', '54', ' 内部数据类型byte的取值范围是、(      )');
INSERT INTO `questions` VALUES ('1', '选择题', '55', ' 如果定义有变量double d1, d2=4.0则下列说法正确的是、(     )');
INSERT INTO `questions` VALUES ('1', '选择题', '56', '运行下面代码将将输出什么内容？（        ）\r\nint i = 1;\r\nswitch (i) {\r\ncase 0:\r\n  System.out.println(\"zero\");\r\n  break;\r\ncase 1:\r\n  System.out.println(\"one\");\r\ncase 2:\r\n  System.out.println(\"two\");\r\ndefault:\r\n  System.out.println(\"default\");\r\n}');
INSERT INTO `questions` VALUES ('1', '选择题', '57', '  Java的字符类型采用的是Unicode编码方案，每个Unicode码占用（       ）个比特位。');
INSERT INTO `questions` VALUES ('1', '选择题', '58', '选择下面正确的标识符（         ）');
INSERT INTO `questions` VALUES ('1', '选择题', '59', '对于X*=3+2算术，与他等价的是（         ）。');
INSERT INTO `questions` VALUES ('1', '选择题', '60', '下面哪个是Java语言中合法的标识符（        ）。');
INSERT INTO `questions` VALUES ('1', '选择题', '61', ' 下列代码中\r\nif(x>2){System.out.println(“first”);}\r\nelse if (x>-2){System.out.println(“second”);}\r\nelse { System.out.println(“third”);}\r\n要求打印字符串为“second”时，x的取值范围是（      ）');
INSERT INTO `questions` VALUES ('1', '选择题', '62', ' 以下标识符中哪项是不合法的（       ）');
INSERT INTO `questions` VALUES ('1', '选择题', '63', '下面的数据类型是float型的是（     ）');
INSERT INTO `questions` VALUES ('1', '选择题', '64', ' 定义一个长整型变量a的语句是（        ）');
INSERT INTO `questions` VALUES ('1', '选择题', '65', '下式的运算后i的结果是：（      ）\r\nint i=3;  i*=4;');
INSERT INTO `questions` VALUES ('1', '选择题', '66', '下面赋值语句正确的是：（     ）');
INSERT INTO `questions` VALUES ('1', '选择题', '67', '下面说法错误．．的是：（        ）');
INSERT INTO `questions` VALUES ('1', '选择题', '68', '下述字符组合不能作为Java程序标识符的是（   ）');
INSERT INTO `questions` VALUES ('1', '选择题', '69', '以下程序代码的输出的结果是（    ）\r\nint x=53;\r\nSystem. out. println(1.0+x/2);');
INSERT INTO `questions` VALUES ('1', '选择题', '70', '编译java程序时出现error: cannot read: aaa.java，则下列原因最正确的是（      ）');
INSERT INTO `questions` VALUES ('1', '选择题', '71', '指出不正确的表达式（     ）');
INSERT INTO `questions` VALUES ('1', '选择题', '72', '关于Float，下列说法不正确的是（     ）');
INSERT INTO `questions` VALUES ('1', '选择题', '73', '下面哪个单词是Java语言的关键字（      ）');
INSERT INTO `questions` VALUES ('1', '选择题', '74', '以下代码段执行后的输出结果为（       ）\r\n        int x=3；int y=10；\r\n        System.out.println(y%x);');
INSERT INTO `questions` VALUES ('1', '选择题', '75', '下列选项中不是JAVA语言特点的是（        ）');
INSERT INTO `questions` VALUES ('1', '选择题', '76', '下列选项中，哪一个是打印语句的正确表达式：（        ）');
INSERT INTO `questions` VALUES ('1', '选择题', '77', '下列哪一个是JAVA语言的关键字（      ）');
INSERT INTO `questions` VALUES ('1', '选择题', '78', '关于数据类型转换下面描述错误的是（       ）');
INSERT INTO `questions` VALUES ('1', '选择题', '79', '下列定义String变量s的语句中，错误的是（        ）');
INSERT INTO `questions` VALUES ('1', '选择题', '80', '下列关于注释语句的描述错误的是（       ）');
INSERT INTO `questions` VALUES ('1', '选择题', '81', '下列哪一个是合法的标识符（       ）');
INSERT INTO `questions` VALUES ('1', '选择题', '82', '下列哪一个不是JAVA语言中保留字、  (       )');
INSERT INTO `questions` VALUES ('1', '选择题', '83', '下列描述中正确的一项是  (        )');
INSERT INTO `questions` VALUES ('1', '选择题', '84', '下列哪一项不属于变量的组成部分、 (           )');
INSERT INTO `questions` VALUES ('1', '选择题', '85', '下列关于变量组成部分描述正确的一项是  (       )');
INSERT INTO `questions` VALUES ('1', '选择题', '86', '下列选项中，哪一项不属于JAVA语言的简单数据类型  (        )');
INSERT INTO `questions` VALUES ('1', '选择题', '87', '下列关于基本数据类型的说法中，不正确的一项是   (       )');
INSERT INTO `questions` VALUES ('1', '选择题', '88', '下列关于溢出的说法中，正确的一项是   (       )');
INSERT INTO `questions` VALUES ('1', '选择题', '89', '下列关于char类型的数据说法中，正确的一项是  (       )');
INSERT INTO `questions` VALUES ('1', '选择题', '90', '下列关于基本数据类型的取值范围描述中，正确的是  (        )');
INSERT INTO `questions` VALUES ('1', '选择题', '91', '下列哪个不是正确标识符  (       )');
INSERT INTO `questions` VALUES ('1', '选择题', '92', '下列关于JAVA语言简单数据类型的说法中，哪个是正确的(        )');
INSERT INTO `questions` VALUES ('1', '选择题', '93', '下列关于JAVA语言中要使用的一个变量，不正确的是(        )');
INSERT INTO `questions` VALUES ('1', '选择题', '94', '下列JAVA语句中，不正确的一项是  (       )');
INSERT INTO `questions` VALUES ('1', '选择题', '95', '在编写JAVA程序时候，如果不为类的成员变量定义初始值，JAVA会给它默认值，下面说法不正确的是、  (        )');
INSERT INTO `questions` VALUES ('1', '选择题', '96', '下列关于自动类型转型的说法中，哪个正确(       )');
INSERT INTO `questions` VALUES ('1', '选择题', '97', '下列语法中不正确的一个是  (        )');
INSERT INTO `questions` VALUES ('1', '选择题', '98', '下列哪一项属于JAVA语言的复合数据类型  (        )');
INSERT INTO `questions` VALUES ('1', '选择题', '99', '下列对整型常量定义的解释中，正确的是(       )');
INSERT INTO `questions` VALUES ('1', '选择题', '100', '下列关于整型类型的说法中，正确的是  (       )');
INSERT INTO `questions` VALUES ('1', '选择题', '101', 'Java application中的主类需包含main方法，main方法的返回类型是什么？（     ）');
INSERT INTO `questions` VALUES ('1', '选择题', '102', ' 下面用来编译Java应用程序的命令是(       )');
INSERT INTO `questions` VALUES ('1', '选择题', '103', ' 下面用来运行Java应用程序的命令是(         )');
INSERT INTO `questions` VALUES ('1', '选择题', '104', '(      )字符是一个乘法运算符。');
INSERT INTO `questions` VALUES ('1', '选择题', '105', '下列语句中，不正确的是  (      )');
INSERT INTO `questions` VALUES ('1', '选择题', '106', '下列哪一个不属于JAVA语言的数据类型   (      )');
INSERT INTO `questions` VALUES ('1', '选择题', '107', '下列哪个数代表八进制整数？(        )');
INSERT INTO `questions` VALUES ('1', '选择题', '108', '下列哪个代表单精度浮点数？(         )');
INSERT INTO `questions` VALUES ('1', '选择题', '109', '下列哪个代表十六进制整数？(        )');
INSERT INTO `questions` VALUES ('1', '选择题', '110', '下列哪个是反斜杠字符的正确表示？(         )');
INSERT INTO `questions` VALUES ('1', '选择题', '111', '下列说法中，哪个是正确的？(         )');
INSERT INTO `questions` VALUES ('1', '选择题', '112', 'JAVA虚拟机的执行过程有多个特点，下列哪个特点不属于JVM执行特点？(      )');
INSERT INTO `questions` VALUES ('1', '选择题', '113', '在JAVA语言有多种实现的机制，下列哪种技术属于垃圾回收机制？(        )');
INSERT INTO `questions` VALUES ('1', '选择题', '114', '设有定义:float a=2,b=4,h=3;,以下表达式中与代数式1/2(a+b)h计\r\n算结果不相符的是（      ）');
INSERT INTO `questions` VALUES ('1', '选择题', '115', '下列正确的标识符是（     ）');
INSERT INTO `questions` VALUES ('1', '选择题', '116', ' 下列选项中,不能用作标识符的是（      ）');
INSERT INTO `questions` VALUES ('1', '选择题', '117', ' 若x,a,b,c四个变量都是int型变量,则执行下面的表达式后,x的值是（      ） x=(a=1,b=2,c=a+b+3);');
INSERT INTO `questions` VALUES ('1', '选择题', '118', ' 下列描述中不正确的是（    ）');
INSERT INTO `questions` VALUES ('1', '选择题', '119', '以下4个选项,不能看作一条语句的是（      ）.');
INSERT INTO `questions` VALUES ('1', '选择题', '120', ' 以下叙述中错误的是（      ）.');
INSERT INTO `questions` VALUES ('1', '选择题', '121', ' 可以正确表达x≤0或x≥1的关系的表达式是（      ）.');
INSERT INTO `questions` VALUES ('1', '选择题', '122', 'double 类型可以用做存储（     ）');
INSERT INTO `questions` VALUES ('1', '选择题', '123', '常量应使用（      ）关键字进行声明');
INSERT INTO `questions` VALUES ('1', '选择题', '124', '（     ）运算符能够在其左操作数大于右操作数时返回false');
INSERT INTO `questions` VALUES ('1', '选择题', '125', '一个类型为Boolean 的变量可以被赋予的值为（       ）');
INSERT INTO `questions` VALUES ('1', '选择题', '126', '一种在初始声明变后其值不能再改变的变量称为（       ）');
INSERT INTO `questions` VALUES ('1', '选择题', '127', '（     ）运算符是将左操作数与右操作数的和再赋予左操作数的一种运算符');
INSERT INTO `questions` VALUES ('1', '选择题', '128', '单目运算符（    ）');
INSERT INTO `questions` VALUES ('1', '选择题', '129', '（    ）运算符可以用确保两个条件都为真');
INSERT INTO `questions` VALUES ('1', '选择题', '130', '下面对运算符&&描述正确的是（        ）');
INSERT INTO `questions` VALUES ('1', '选择题', '131', '当（     ）则条件expreaaion1&&expression2的计算结果为true');
INSERT INTO `questions` VALUES ('1', '选择题', '132', '当（     ）则条件expreaaion1||expression2的计算结果为false');
INSERT INTO `questions` VALUES ('1', '选择题', '133', '当（      ）则条件expreaaion1^expression2的计算结果为true');
INSERT INTO `questions` VALUES ('1', '选择题', '134', '假设a=3，当赋值操作b=a—完成以后，变量a和b的值变为（       ）');
INSERT INTO `questions` VALUES ('1', '选择题', '135', '假设c=5,当赋值操作d=c*++c完成后，变量d的制变为（      ）');
INSERT INTO `questions` VALUES ('1', '选择题', '136', '一个int 型变量能够被隐式的转换为（      ）');
INSERT INTO `questions` VALUES ('1', '选择题', '137', '当一个int型值和double型值相加，会出现（      ）');
INSERT INTO `questions` VALUES ('1', '选择题', '138', '一个double型值可被隐式转换为（     ）型值');
INSERT INTO `questions` VALUES ('1', '选择题', '139', '一个Boolean型值可被隐式转换为（      ）型值');
INSERT INTO `questions` VALUES ('1', '选择题', '140', '通过使用关键字（      ）来定义常量');
INSERT INTO `questions` VALUES ('1', '选择题', '141', '（     ）对象的println方法用于在命令提示符窗口中显示文本');
INSERT INTO `questions` VALUES ('1', '选择题', '142', 'System类在哪个包中? （        ）');
INSERT INTO `questions` VALUES ('1', '选择题', '143', '给出下面代码：\r\n  public class test{     static int a[] = new a[10];     public static void main(String args[]) {      System.out.println(arr[10]);     }    }  那个选项是正确的？（       ）');
INSERT INTO `questions` VALUES ('1', '选择题', '144', 'switch语句不能用于下列哪种数据类型（    ）');
INSERT INTO `questions` VALUES ('1', '选择题', '145', '下列哪个数代表十六进制整数（        ）');
INSERT INTO `questions` VALUES ('1', '选择题', '146', '定义整型变量：int n=456;,表达式的值为5的是（    ）');
INSERT INTO `questions` VALUES ('1', '选择题', '147', '符号(       )并不属于一个java运算符。');
INSERT INTO `questions` VALUES ('1', '选择题', '148', ' 已知ch是字符型变量，下面正确的赋值语句是（      ） 。');
INSERT INTO `questions` VALUES ('1', '选择题', '149', 'Java语言中数值数据的类型能自动转换，按照从左到右的转换次序为 (        )');
INSERT INTO `questions` VALUES ('1', '选择题', '150', '下面供选字符序列中，不属于Java语言关键字的是(        )');
INSERT INTO `questions` VALUES ('1', '选择题', '151', '以下程序代码的输出结果是(        )\r\nint x=73；System.out.println(x>>1)；');
INSERT INTO `questions` VALUES ('1', '选择题', '152', '  下列变量定义错误的是 （       ）');
INSERT INTO `questions` VALUES ('1', '选择题', '153', '下列哪个是Java语言的编译工具（       ）');
INSERT INTO `questions` VALUES ('1', '选择题', '154', 'java平台是由那部分组成的（       ）');
INSERT INTO `questions` VALUES ('1', '选择题', '155', '定义字符串常量用（      ）括起来的字符序列。（     ）');
INSERT INTO `questions` VALUES ('1', '选择题', '156', '在java中，表示换行的转义字符是（      ）');
INSERT INTO `questions` VALUES ('1', '选择题', '157', '一下的选项中能正确表示Java语言中的一个整形常量的是（       ）');
INSERT INTO `questions` VALUES ('1', '选择题', '158', '下列哪个不是Java的关键字（      ）');
INSERT INTO `questions` VALUES ('1', '选择题', '159', 'JDK中提供的文本文档生成器是（      ）\r\nA．jav.exe    B、javap.exe    C、javadoc.exe    D、javaprof.exe');
INSERT INTO `questions` VALUES ('1', '选择题', '160', '下列叙述中正确的是（       ）');
INSERT INTO `questions` VALUES ('1', '选择题', '161', '下列表达式不合法的是（       ）');
INSERT INTO `questions` VALUES ('1', '选择题', '162', '下面描述错误的是（       ）');
INSERT INTO `questions` VALUES ('1', '选择题', '163', '能够支持javadoc命名的注释语句是（      ）');
INSERT INTO `questions` VALUES ('1', '选择题', '164', '下列变量定义中，正确的是（       ）');
INSERT INTO `questions` VALUES ('1', '选择题', '165', '在下列说法中，选出最正确的一项是（       ）');
INSERT INTO `questions` VALUES ('1', '选择题', '166', '下列注释语句的描述中，正确的一项是（       ）');
INSERT INTO `questions` VALUES ('1', '选择题', '167', '下列说法中错误的一个是（       ）');
INSERT INTO `questions` VALUES ('1', '选择题', '168', '下列标识符中，正确的是（      ）');
INSERT INTO `questions` VALUES ('1', '选择题', '169', '下面哪一个是符合java语言语法的语句    （      ）');
INSERT INTO `questions` VALUES ('1', '选择题', '170', 'Java语言能做到“编写一次，随处可用”，是指Java语言具有（          ）');
INSERT INTO `questions` VALUES ('1', '选择题', '171', '.ASCII码与Unicode码的区别是 （        ）');
INSERT INTO `questions` VALUES ('1', '选择题', '172', 'JDK的组成描述中，以下哪几部分组成是不正确的（      ）');
INSERT INTO `questions` VALUES ('1', '选择题', '173', '以下哪个包不是Java标准库中常用的包？（      ）');
INSERT INTO `questions` VALUES ('1', '选择题', '174', '使用JDK工具生成的Java文档的文件格式是（       ）');
INSERT INTO `questions` VALUES ('1', '选择题', '175', '下列有关main()方法的签名正确的是（      ）');
INSERT INTO `questions` VALUES ('1', '选择题', '176', '以下关于Applet的描述，错误的是（     ）');
INSERT INTO `questions` VALUES ('1', '选择题', '177', '下列不是int类型数据的选项是（      ）');
INSERT INTO `questions` VALUES ('1', '选择题', '178', '下列不是Java语言中所规定的注释样式的是（      ）');
INSERT INTO `questions` VALUES ('1', '选择题', '179', '下列不是Java语言的关键字的是（      ）');
INSERT INTO `questions` VALUES ('1', '选择题', '180', 'Java语言中表达式10/3的结果是（     ）');
INSERT INTO `questions` VALUES ('1', '选择题', '181', 'Java语言中表达式-12>>3的结果是（       ）');
INSERT INTO `questions` VALUES ('1', '选择题', '182', '下列赋值语句正确的是（     ）');
INSERT INTO `questions` VALUES ('1', '选择题', '183', '假设有2个整数x和y，表达式x>=y ? x : y的含义是（     ）');
INSERT INTO `questions` VALUES ('1', '选择题', '184', 'Java语言中常量的定义是（     ）');
INSERT INTO `questions` VALUES ('1', '选择题', '185', '作为 Java 程序应用程序入口的 main 方法，其声明格式是：（     ）');
INSERT INTO `questions` VALUES ('1', '选择题', '186', '设有一个 Java 小程序，源程序名为 Appfirst.java,其 HTML 文件为 Appfirst.html，则 运行该小程序的命令为。（      ）');
INSERT INTO `questions` VALUES ('1', '选择题', '187', '下面命令正确的是。（     ）');
INSERT INTO `questions` VALUES ('1', '选择题', '188', '对主类的说明正确的是。（      ）\r\npublic class Helloworld {\r\npublic static void main(String args[ ]) {\r\nSystem.out.println(\"欢迎访问 Java 世界!\");}\r\n}');
INSERT INTO `questions` VALUES ('1', '选择题', '189', '如果已经编写了 Java 小程序 Appfirst.java，在编写它所对应的 HTML 文件时能正确将 其嵌入到 HTML 网页文件的语句是。（      ）');
INSERT INTO `questions` VALUES ('1', '选择题', '190', '下面这些标识符那个是错误的：（     ）');
INSERT INTO `questions` VALUES ('1', '选择题', '191', '下列那组基本数据类型所占的字节数相同。（     ）');
INSERT INTO `questions` VALUES ('1', '选择题', '192', '下列那一组运算符的优先级顺序是那由高到低排序的。(     )');
INSERT INTO `questions` VALUES ('1', '选择题', '193', '下面哪个赋值语句不会产生编译错误（       ）');
INSERT INTO `questions` VALUES ('1', '选择题', '194', '下面哪个单词是 Java 语言的关键字。（     ）');
INSERT INTO `questions` VALUES ('1', '选择题', '195', '有如下的程序：（      ）\r\npublic class Welcome3 {\r\npublic static void main( String args[] ) {\r\nSystem.out.println( \"How\nare\nyou！\n\" );\r\n}\r\n}\r\n则它的输出结果是：');
INSERT INTO `questions` VALUES ('1', '选择题', '196', '执行下面程序后，哪个结论是正确的（      ）\r\nint a，b，c;\r\na=1 ;\r\nb=3 ;\r\nc=(a+b>3 ?++a：b++)');
INSERT INTO `questions` VALUES ('1', '选择题', '197', '设各个变量的定义如下，哪些选项的值为 true（      ）\r\nint a=3，b=3;\r\nboolean flag=true;');
INSERT INTO `questions` VALUES ('1', '选择题', '198', '使整值变量 x 加 1，下面写出的形式不对的是：（     ）');
INSERT INTO `questions` VALUES ('1', '选择题', '199', '下面表达式的值的类型为（     ）\r\n（int）6.5/7.5*3');
INSERT INTO `questions` VALUES ('1', '选择题', '200', '设 a，b，x，y，z均为 int 型变量，并已赋值，下列表达式的结果属于非逻辑值的是(       )。\r\nＡ、x>y && b<a    B、–z>x-y     C 、y==++x     D 、y+x*x++');
INSERT INTO `questions` VALUES ('1', '选择题', '201', '下面语句输出的结果为（      ）\r\nsystem . out . println(5^2)');
INSERT INTO `questions` VALUES ('1', '选择题', '202', '设 x 为 int 型变量，则执行以下语句段后，x 的值为(      )\r\nx=15;\r\nx+=x-=x-x;');
INSERT INTO `questions` VALUES ('1', '选择题', '203', '对下面的语句执行完正确的说法是（     ）\r\nint c=’c’/3;\r\nSystem.out.println(c) ;');
INSERT INTO `questions` VALUES ('1', '选择题', '204', '以下选项中变量 a 以定义类型，合法的赋值语句为（    ）');
INSERT INTO `questions` VALUES ('1', '选择题', '205', '阅读以下程序，选择正确的答案（     ）\r\nint x=7,y=8,z=9;\r\n6 char ch=\'A\';\r\nx++;z--;\r\nSystem.out.println(x= =y);\r\nSystem.out.println(y=z--);\r\nSystem.out.println(x= =z);\r\nSystem.out.println(ch++= =\'A\');\r\nSystem.out.println(ch++= =\'B\');');
INSERT INTO `questions` VALUES ('2', '判断题', '1', '在JAVA中，流程控制主要是由相应保留字和条件表达式所构成的。（   ）');
INSERT INTO `questions` VALUES ('2', '判断题', '2', 'Java支持两种分支语句，分别是If语句和while语句。（     ）');
INSERT INTO `questions` VALUES ('2', '判断题', '3', '如果程序中的语句是以选择性语句来判断选择下一步操作，此语法结构就是选择结构，也叫条件结构。（    ）');
INSERT INTO `questions` VALUES ('2', '判断题', '4', '选择结构是根据表达式和变量的不同状态下选择不同的执行分支进行运行。（    ）');
INSERT INTO `questions` VALUES ('2', '判断题', '5', '如果程序中的语句是以重复性语句来做程序的结构称为循环结构，也叫重复结构。（    ）');
INSERT INTO `questions` VALUES ('2', '判断题', '6', '正如汉语中的“如果……，那么就……”，“如果……那么就……否则就……”，这样的语句我们称之为选择语句，也称为重复语句。（    ）');
INSERT INTO `questions` VALUES ('2', '判断题', '7', '分支语句提供了这样一种控制机制，它根据条件使得程序的执行可以跳过某些语句不执行，而转去执行特定的语句。（      ）');
INSERT INTO `questions` VALUES ('2', '判断题', '8', 'if语句是选择结构中最基本的语句，它有两种形式、if及else~if语句。（    ）');
INSERT INTO `questions` VALUES ('2', '判断题', '9', '语法格式中的“布尔表达式”为关系表达式或逻辑表达式，其值为布尔类型。（   ）');
INSERT INTO `questions` VALUES ('2', '判断题', '10', '在if语句末可以加分号。（     ）');
INSERT INTO `questions` VALUES ('2', '判断题', '11', '在if语句中，布尔表达式无需用括号括起来。（     ）');
INSERT INTO `questions` VALUES ('2', '判断题', '12', 'else if可以有任意多个，而且后一个else if能在前面else if{}后出现。（       ）');
INSERT INTO `questions` VALUES ('2', '判断题', '13', 'else总是与离它最近的if想匹配，可以通过使用大括号｛｝来改变if~else的配对关系。（    ）');
INSERT INTO `questions` VALUES ('2', '判断题', '14', 'Java语言提供3种循环语句、while语句,do-while语句和if语句。(     )');
INSERT INTO `questions` VALUES ('2', '判断题', '15', '在双重循环中，在for循环中还潜逃了另一个for循环,这样就形成了一个双重循环结构。（     ）');
INSERT INTO `questions` VALUES ('2', '判断题', '16', 'if语句语法格式中的“布尔表达式”为关系表达式或逻辑表达式，其值为布尔类型（    )');
INSERT INTO `questions` VALUES ('2', '判断题', '17', ' continue 语句只用于循环语句中，它起到终止本次循环的作用。（    ）');
INSERT INTO `questions` VALUES ('2', '判断题', '18', '结构化程序设计提高了程序的清晰简单性，并且它只需使用三种形式的控制结构就足够了。 （     ）');
INSERT INTO `questions` VALUES ('2', '判断题', '19', 'else子句可以单独使用,同样if子句也可以单独使用(     )');
INSERT INTO `questions` VALUES ('2', '判断题', '20', 'default 在 switch 选择结构中是必需的。（      ）');
INSERT INTO `questions` VALUES ('2', '判断题', '21', 'break 语句在 switch 选择结构是必需的。（   ）');
INSERT INTO `questions` VALUES ('2', '判断题', '22', 'while 循环中循环体至少执行一次。（   ）');
INSERT INTO `questions` VALUES ('2', '判断题', '23', 'if 结构和 if/else 结构所做的动作是相同。（   ）');
INSERT INTO `questions` VALUES ('2', '判断题', '24', 'break 语句只用于循环语句中，它起到终止本次循环的作用。（   ）');
INSERT INTO `questions` VALUES ('2', '判断题', '25', 'break语句可以用在循环和switch语句中。 （      ）');
INSERT INTO `questions` VALUES ('2', '填空题', '1', '流程控制分为三种，分别是_________、________和___________。');
INSERT INTO `questions` VALUES ('2', '填空题', '2', 'Java支持两种分支语句，分别是__________和__________。');
INSERT INTO `questions` VALUES ('2', '填空题', '3', 'Java支持三种循环语句，分别是_____________，______________，___________。');
INSERT INTO `questions` VALUES ('2', '填空题', '4', '如果程序中的语句是以选择性语句来判断选择下一步操作，此语法结构就是_________。');
INSERT INTO `questions` VALUES ('2', '填空题', '5', '如果程序中的语句是以重复性语句来做程序的结构称为__________，也叫重复结构。');
INSERT INTO `questions` VALUES ('2', '填空题', '6', '正如汉语中的“如果……，那么就……”，“如果……那么就……否则就……”，这样的语句我们称之为_________，也称为分支语句。');
INSERT INTO `questions` VALUES ('2', '填空题', '7', '分支语句提供了这样一种控制机制，它根据条件使得程序的执行可以跳过某些语句不执行，而转去执行特定的语句。分支语句主要有两种、________和__________。');
INSERT INTO `questions` VALUES ('2', '填空题', '8', 'if语句是选择结构中最基本的语句，它有两种基本形式：_________与_________语句。');
INSERT INTO `questions` VALUES ('2', '填空题', '9', '语法格式中的“布尔表达式”为关系表达式或逻辑表达式，其值类型为___________。');
INSERT INTO `questions` VALUES ('2', '填空题', '10', '________首先执行循环体，然后再判断循环条件。');
INSERT INTO `questions` VALUES ('2', '填空题', '11', '__________的作用是中断当前循环的执行，如果是放在一个多重循环结构中，它只会中断当前的循环，而不会完全结束循环。');
INSERT INTO `questions` VALUES ('2', '填空题', '12', '________的作用是中断当次循环的执行，循环将直接进入下一次循环。');
INSERT INTO `questions` VALUES ('2', '填空题', '13', '能保证循环体至少被执行1次的循环语句是__________。');
INSERT INTO `questions` VALUES ('2', '填空题', '14', 'If语句中的表达式的值必须是_________的。');
INSERT INTO `questions` VALUES ('2', '填空题', '15', 'If语句中也可以是布尔类型的___________、_________，或_________。如果是其他类型，则编译出错。');
INSERT INTO `questions` VALUES ('2', '填空题', '16', 'java中的选择结构分为___________、________及________三种。');
INSERT INTO `questions` VALUES ('2', '填空题', '17', 'java中的选择结构分别用___________和__________实现。');
INSERT INTO `questions` VALUES ('2', '填空题', '18', '一种结构执行完毕后，就进入下一个结构。从宏观上看，任何算法结构都是_____________。');
INSERT INTO `questions` VALUES ('2', '填空题', '19', 'java语句的循环语句实现循环结构的操作，循环语句由_______和_______两部分构成，循环体是要被反复执行的语句，循环条件决定循环的开始、重复执行以及结束循环。');
INSERT INTO `questions` VALUES ('2', '填空题', '20', '_________可以有条件或无条件地改变程序的执行顺序。');
INSERT INTO `questions` VALUES ('2', '填空题', '21', 'java支持三种控制转移语句、_________,_________和________。');
INSERT INTO `questions` VALUES ('2', '填空题', '22', 'break语句的作用是使程序的流程从一个语句块内部转移出去，只在______和_______中使用，允许从switch语句的case子句中跳出，或从循环体内部跳出，不允许跳入任何语句块内。');
INSERT INTO `questions` VALUES ('2', '填空题', '23', 'if（）语句括号中是个__________。');
INSERT INTO `questions` VALUES ('2', '填空题', '24', 'while 是关键字，循环条件结果是________，当值为true时，执行循环体；当值为false时，循环结束。');
INSERT INTO `questions` VALUES ('2', '填空题', '25', 'while语句在循环一开始就计算循环条件表达式，若表达式的值为________，则循环体一次也不会执行');
INSERT INTO `questions` VALUES ('2', '填空题', '26', '________循环是先判断后执行，_______循环先执行后判断，___________先执行初始化部分，再执行循环条件的布尔表达式，为false，___则不执行循环体，退出循环，.如果为true，就执行循环体.接着执行迭代部分。');
INSERT INTO `questions` VALUES ('2', '填空题', '27', '_________是多个单循环的嵌套使用，循环语句的循环体内又有循环语句，则构成多重循环结构。');
INSERT INTO `questions` VALUES ('2', '填空题', '28', '常用的多重循环有________和________。');
INSERT INTO `questions` VALUES ('2', '填空题', '29', '单循环结构只有一个for循环，而在双重循环中，在for循环中还嵌套了另一个for循环，这样就形成了一个__________。');
INSERT INTO `questions` VALUES ('2', '填空题', '30', 'for循环中还可以嵌套while循环，同样，我们也可以在while循环中嵌套for循环 。有三个循环结构嵌套使用的叫_______。');
INSERT INTO `questions` VALUES ('2', '填空题', '31', '当需要处理二维数据时，就会采用________来处理。');
INSERT INTO `questions` VALUES ('2', '填空题', '32', 'break语句的作用、中断当前循环的执行,如果break语句是放在一个__________，它只会中断当前层次的循环，而不是完全结束循环');
INSERT INTO `questions` VALUES ('2', '填空题', '33', '________是多个单循环的嵌套使用。');
INSERT INTO `questions` VALUES ('2', '填空题', '34', '循环语句的________又有循环语句，则构成多重循环结构；');
INSERT INTO `questions` VALUES ('2', '填空题', '35', '_______中break语句的作用、中断当前循环的执行；');
INSERT INTO `questions` VALUES ('2', '填空题', '36', '______的作用、是（中断）当次循环的执行，循环将直接进入下一次循环 ；');
INSERT INTO `questions` VALUES ('2', '填空题', '37', '_______的作用、中断当前所有（循环），并且直接跳出当前的方法。');
INSERT INTO `questions` VALUES ('2', '填空题', '38', '如果循环体包含多条______，必须将其放在大括号内，若循环体只有一条语句，虽然不用写花括号表示也是可以的，但作为代码规范，我们要求不能省略花括号。');
INSERT INTO `questions` VALUES ('2', '填空题', '39', '__________、__________和do-while语句 的循环体可以为_______，这是因为一个空语句（仅由一个分号组成的语句）在语法上是合法的。');
INSERT INTO `questions` VALUES ('2', '填空题', '40', '_while循环语句中，循环条件的测试都是在循环开始前进行的，称为__________。如果一开始条件就不成立，则循环体语句可能一次也不执行。');
INSERT INTO `questions` VALUES ('2', '填空题', '41', 'do-while循环，它对循环条件的测试是在执行循环语句之后进行的，称为_____________，这意味着一个do-while循环至少要执行一次。');
INSERT INTO `questions` VALUES ('2', '填空题', '42', '在执行for语句时，先执行_______，这部分只会被执行一次，接下来执行循环条件的布尔表达式，为_______，___则不执行循环体，退出循环，如果为_______，就执行循环体接着执行迭代部分，.然后再计算作为循环条件的表达式');
INSERT INTO `questions` VALUES ('2', '填空题', '43', '_______语句是三个循环语句中功能最强，使用最广泛的一个');
INSERT INTO `questions` VALUES ('2', '填空题', '44', 'Java语言没有提供_________语句来控制程序的跳转，这种做法提高了程序流程控制的可读性，但降低了程序流程控制的灵活性。');
INSERT INTO `questions` VALUES ('2', '填空题', '45', 'Java提供了______和_______来控制循环结构。除此之外，return可以结束整个方法，当然也就结束了一次循环。');
INSERT INTO `questions` VALUES ('2', '填空题', '46', '程序遇到一个__________语句，这行代码将会导致结束outer标签指定的循环，不是结束break所在的循环，而是结束break循环的外层循环。');
INSERT INTO `questions` VALUES ('2', '填空题', '47', '顺序结构是按照____________的顺序执行的结构。');
INSERT INTO `questions` VALUES ('2', '填空题', '48', '选择结构是以__________来判断选择下一步操作的。');
INSERT INTO `questions` VALUES ('2', '填空题', '49', '_三种循环语句都能解决循环次数已经确定的次数型循环，其中_______循环语句最适合。');
INSERT INTO `questions` VALUES ('2', '填空题', '50', '循环结构是以__________语句来做程序的结构。');
INSERT INTO `questions` VALUES ('2', '填空题', '51', '在java中，执行控制的关键字包括_________、_______、_______、_______和______语句。');
INSERT INTO `questions` VALUES ('2', '填空题', '52', '半段语句（if-else）中的if括号后是一个________值。');
INSERT INTO `questions` VALUES ('2', '填空题', '53', 'else和_________的if产生了匹配。');
INSERT INTO `questions` VALUES ('2', '填空题', '54', '循环语句中_________语句用于已知循环次数的循环中。');
INSERT INTO `questions` VALUES ('2', '填空题', '55', '循环语句中__________语句用于不知道循环次数的语句中。');
INSERT INTO `questions` VALUES ('2', '填空题', '56', 'do-while也是迭代的一种，它和______语句大同小异。');
INSERT INTO `questions` VALUES ('2', '填空题', '57', '______语句也称开关语句。');
INSERT INTO `questions` VALUES ('2', '填空题', '58', '下面是一个java应用程序(Application),它的功能是在屏幕上输出26个小写英文字母,其中每个字母相隔一个制表符,请完成程序填空。 public___________Class1{ public static void main( String args[] ){__char c=\'a\'; for (int i=1;i<=26;i++) { System.out.print(___________); } } }');
INSERT INTO `questions` VALUES ('2', '填空题', '59', '下面是一个java应用程序(Application),它的功能是计算 s=1+2+3+...+10 ,请完成程序填空。 public__________Class1{ public static void main( String args[] ){ int__s=0; for (int i=1;i<=10;i++){ s+=_______; } System.out.println(\"s=\"+s); } }');
INSERT INTO `questions` VALUES ('2', '编程题', '1', '求分段函数的值。           F(x)=0 (x<0) F(x)= 2X+1 (x>=0)');
INSERT INTO `questions` VALUES ('2', '编程题', '2', '已知函数\r\n               y=    x + 3   ( x > 0 )\r\n               y=    0       ( x = 0 )\r\n               y=    x2 – 1   ( x < 0 )\r\n编程输入x的值，输出y的值。');
INSERT INTO `questions` VALUES ('2', '编程题', '3', '用switch语句编写程序，给学生写评语，若学生成绩在60-69则打印“及格”，70-89“良好”，90-100“优秀”，60分以下“不及格”。');
INSERT INTO `questions` VALUES ('2', '编程题', '4', '编写程序，输出1到1000之间所有可以被3整除又可以被7整除的数。');
INSERT INTO `questions` VALUES ('2', '编程题', '5', '编写程序，输出1到100之间，所有素数，每输出5个换行一次。');
INSERT INTO `questions` VALUES ('2', '编程题', '6', '从键盘输入某个月份（1--12），并输出通过使用if-else-if阶梯来确定某个月是什么季节。');
INSERT INTO `questions` VALUES ('2', '编程题', '7', '编写程序，计算邮局汇款的汇费。如果汇款金额小于100元，汇费为1元；如果汇费在100元与5000元之间，按1%收取汇费；如果金额大于5000元，汇费为50元。汇款金额由命令行输入。');
INSERT INTO `questions` VALUES ('2', '编程题', '8', '编写一个应用程序，由命令行输入年份，判断该年份是平年还是闰年，并打印出相应的结果。');
INSERT INTO `questions` VALUES ('2', '编程题', '9', '由命令行输入一个4位整数，求将该数反转以后的数，如原数为1234，反转以后的数为4321。');
INSERT INTO `questions` VALUES ('2', '编程题', '10', '编写程序，键盘输入两个数，计算并输出它们的积。');
INSERT INTO `questions` VALUES ('2', '编程题', '11', ' 编写程序，接受用户输入1～7之间的整数，若不符合条件则重\r\n新输入，利用swith语句输出星期几。');
INSERT INTO `questions` VALUES ('2', '编程题', '12', '编写一段程序，实现求三个数中的最大数。');
INSERT INTO `questions` VALUES ('2', '编程题', '13', '编写一个程序，从1开始，计算需要多少个连续的自然数相加，其和才会超过1000，并打印出这个数字。');
INSERT INTO `questions` VALUES ('2', '编程题', '14', '请编写一段代码输出如下图形、\r\n********\r\n********\r\n     ********\r\n     ********');
INSERT INTO `questions` VALUES ('2', '编程题', '15', '请编写一段代码输出如下图形、\r\n     *\r\n     **\r\n     ***\r\n     ****\r\n     *****');
INSERT INTO `questions` VALUES ('2', '编程题', '16', '根据考试成绩确定分数等级，当考试成绩大雨或等于90分，等级为‘A’，当成绩在80~89分之间，等级为‘B’；在70~79之间，为‘C’级，60~69之间为‘D’级；低于60分为‘E’。');
INSERT INTO `questions` VALUES ('2', '编程题', '17', '编写一个程序，找出大于200的最小的质数');
INSERT INTO `questions` VALUES ('2', '编程题', '18', '整型变量a的值可能是1、2、3和4，如果a为1，则输出“进行加法运算”，a为2，则进行减法运算，a为3，则进行乘法运算，a为4，则进行除法运算。');
INSERT INTO `questions` VALUES ('2', '编程题', '19', '山上有一口缸可以装50升水,现在有15升，水.老和尚叫小和尚下山挑水,每次可以挑5升。问:小和尚要挑几次水才可以把水港挑满?');
INSERT INTO `questions` VALUES ('2', '编程题', '20', '分别用三种循环语句求前100个自然数的和。');
INSERT INTO `questions` VALUES ('2', '编程题', '21', '求1+2+3 +…+ N < 1000的N的最大数。');
INSERT INTO `questions` VALUES ('2', '编程题', '22', '编写一个程序段，输出一个三角形形式的九九乘法表。\r\n1×1=1\r\n2×1=2   2×2=4\r\n3×1=3   3×2=6   3×3=9\r\n4×1=4   4×2=8   4×3=12  4×4=16\r\n5×1=5   5×2=10  5×3=15  5×4=20  5×5=25\r\n6×1=6   6×2=12  6×3=18  6×4=24  6×5=30  6×6=36\r\n7×1=7   7×2=14  7×3=21  7×4=28  7×5=35  7×6=42  7×7=49\r\n8×1=8   8×2=16  8×3=24  8×4=32  8×5=40  8×6=48  8×7=56  8×8=64\r\n9×1=9   9×2=18  9×3=27  9×4=36  9×5=45  9×6=54  9×7=63  9×8=72  9×9=81');
INSERT INTO `questions` VALUES ('2', '编程题', '23', '编写一个程序段，当用户从输入一个参数MONTH为月份值，由此确定出这个月的天数DAY值，用switch语句执行该功能。提示：\r\n不同的月份有不同的天数，这需要判断后才能确定。把月份归为三类，30天的月份有4、6、9、11月份，28或29天（由年份再确定）的月份是2月份，其余皆为31天。');
INSERT INTO `questions` VALUES ('2', '编程题', '24', '编写一个程序段，输入一个自然数，判断该数是否为素数。\r\n提示：先确认什么样的数为素数。根据数学定义知，一个自然数除了1和本身之外没有其他的因子，该数便为素数。2专门规定为素数，且是最小的素数。对于自然数n，我们只要用2到n-1去测试，如果它们中没有一个是n的因子，n就为素数，否则n不是素数。');
INSERT INTO `questions` VALUES ('2', '编程题', '25', '编写一个程序段，求所有三位素数。分析：本题是上题的拓展。不是判断某一个数，而是判断所有三位数。这就需要用一个循环变量遍历三位数，因为所有的三位偶数都非素数，所以可直接遍历三位奇数。对于确定的三位数判断其是否为素数的方法同上。');
INSERT INTO `questions` VALUES ('2', '编程题', '26', '编写一个程序段，输出如下菲波那契数列的前20项，并求其和。\r\n1，1，2，3，5，8，13……\r\n提示：菲波那契数列的前两项均为1，以后的每一项都是前两项之和。这是一个重复求和处理的问题，可用循环解决。循环次数是所要求的项数18。对所有项求和的问题可以设置一个累加器变量sum，初值为前两项之和，后在循环中每求得一新项，即将该项加进sum。');
INSERT INTO `questions` VALUES ('2', '编程题', '27', '有父子二人，已知父亲年龄不大于90岁，儿子年龄不大于50岁。10年前父亲的年龄是儿子的4倍，10年后父亲的年龄是儿子年龄的整数倍。求父子的年龄。');
INSERT INTO `questions` VALUES ('2', '编程题', '28', '有面值为一元、二元、五元的人民币若干，从中取出20张使其总值为60元，问有多少种取法？每种取法的人民币各为多少张？');
INSERT INTO `questions` VALUES ('2', '编程题', '29', '编写一个程序段，由键盘输入一个大写字母，要求输出其小写字母。');
INSERT INTO `questions` VALUES ('2', '编程题', '30', '编写一个程序段，输入一个3位整数，将它反向输出。如输入123，输出321。');
INSERT INTO `questions` VALUES ('2', '编程题', '31', '编写一个程序段，把100～200之间的不能被3整除的数输出。');
INSERT INTO `questions` VALUES ('2', '编程题', '32', '编写一个程序段，输入两个正整数m和n，求其最大公约数和最小公倍数。');
INSERT INTO `questions` VALUES ('2', '编程题', '33', '设计个人纳税计算程序。“税法”规定，工资、薪金所得、适用超额累进税率，以每月收入额减去1200元后的余额，为相应纳税所得额。');
INSERT INTO `questions` VALUES ('2', '编程题', '34', '编写一个程序段，输入一个自然数，判断该数是否为素数。');
INSERT INTO `questions` VALUES ('2', '编程题', '35', '幸运猜猜猜\r\n需求说明：游戏随机给出一个0~99（包括0，99）的数字，然后你猜是什么数字。你可以随便猜一个数字，游戏会提示太小还是太大，从而缩小结果范围。经过几次猜测与提示后，最终推出答案。在游戏过程中，记录你最终猜对时所需要的次数，游戏结束后公布结果。');
INSERT INTO `questions` VALUES ('2', '编程题', '36', '编写一个程序段，有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？ 程序分析：可填在百位、十位、个位的数字都是1、2、3、4。组成所有的排列后再去掉不满足条件的排列。');
INSERT INTO `questions` VALUES ('2', '编程题', '37', '回文字符串判断。所谓回文是指正读和反读都一样的数或文本段，如abcba、1234321等。编写程序，从键盘输入字符串，由程序判断是否为回文串，并给出提示。');
INSERT INTO `questions` VALUES ('2', '编程题', '38', '编写一个程序段，打印出如下图形\r\n     ***\r\n    *****\r\n   *******\r\n  *********\r\n ***********\r\n    *****\r\n    *****\r\n*****');
INSERT INTO `questions` VALUES ('2', '编程题', '39', '编程实现如下功能、请你从键盘上读入一个整数n，然后打印n行。每行包括n个字符。每行的首个和最后一个字符是符号‘#’，中间的是符号‘+’。举例、如果你从键盘上读入的整数是5，那么打印结果如下、\r\n# + + + #\r\n# + + + #\r\n# + + + #\r\n# + + + #\r\n# + + + #');
INSERT INTO `questions` VALUES ('2', '选择题', '1', ' 所有的java应用程序都是按照（ ）类型的程序控制来进行的编写的。（      ）');
INSERT INTO `questions` VALUES ('2', '选择题', '2', ' 应用程序中的语句按照它们所缩写的次序逐条的执行过程被称为（      ）');
INSERT INTO `questions` VALUES ('2', '选择题', '3', '下面几个选项中是循环语句的是（     ）');
INSERT INTO `questions` VALUES ('2', '选择题', '4', 'if….else 是一个（        ）的选择语句');
INSERT INTO `questions` VALUES ('2', '选择题', '5', '将一个if…else 语句放置在另一个if…else语句的内部，属于（    ）的一个例子');
INSERT INTO `questions` VALUES ('2', '选择题', '6', '能从循环语句的循环体中跳出的语句是（    ）');
INSERT INTO `questions` VALUES ('2', '选择题', '7', '下面对continue的用法叙述正确的是：（     ）');
INSERT INTO `questions` VALUES ('2', '选择题', '8', '下面哪条语句可对某次考试中凡成绩在90或者90分以上的学生显示出A？（         ）');
INSERT INTO `questions` VALUES ('2', '选择题', '9', '执行语句for(int  i=1;i++<4; );后变量i的值是.(       )');
INSERT INTO `questions` VALUES ('2', '选择题', '10', '以下的描述中，正确的是(     )');
INSERT INTO `questions` VALUES ('2', '选择题', '11', '下面程序段的运行结果是(          )\r\n     int n=0;\r\n     while(n++<=2); System.out.println (n);');
INSERT INTO `questions` VALUES ('2', '选择题', '12', '下面程序的运行结果是(      )\r\n     {\r\n     int num=0;\r\n     while(num<=2){\r\n      num++;\r\n      System.out.println(num);\r\n      }\r\n     }');
INSERT INTO `questions` VALUES ('2', '选择题', '13', '能从循环语句中跳出来的语句是（      ）');
INSERT INTO `questions` VALUES ('2', '选择题', '14', '对java嵌套语句描述错误的是（     ）');
INSERT INTO `questions` VALUES ('2', '选择题', '15', 'java程序基本结构不包括（       ）');
INSERT INTO `questions` VALUES ('2', '选择题', '16', '运行以下程序段，其正确的运行结果是（      ）\r\n x=-1;\r\n do{\r\n    x=x*x;\r\n   }\r\n while(!x);');
INSERT INTO `questions` VALUES ('2', '选择题', '17', '若有如下语句\r\n   int x=3;\r\n   do{ System.out.println(x);\r\nx-=2;}\r\nwhile(--x>0);\r\n 则上面程序段运行的结果为（          ）');
INSERT INTO `questions` VALUES ('2', '选择题', '18', '设有程序段\r\n int k=10;\r\n while(k==0)k=k-1;\r\n 这下面描述中正确的是(        )');
INSERT INTO `questions` VALUES ('2', '选择题', '19', '下面语句执行结果为（      ）\r\n   public static void main(String[] args){\r\n     int i=4;\r\n     if(i<0){\r\n       i=1;}\r\nelse{i=2;}\r\n     System.out.println(i);');
INSERT INTO `questions` VALUES ('2', '选择题', '20', '下面执行语句输出结果为（          ）\r\n   public class nam {\r\n public static void main(String[] args) {\r\n  int sum = 0;\r\n  for(int i=0;i<=10;i++){\r\n   sum=sum+i;\r\n  }\r\n  System.out.println(sum);\r\n }\r\n}');
INSERT INTO `questions` VALUES ('2', '选择题', '21', '下列语句序列执行后,m 的值是(         ). int a=10, b=3, m=5; if( a==b ) m+=a; else m=++a*m;\r\nSystem.out.println(m);');
INSERT INTO `questions` VALUES ('2', '选择题', '22', '下列语句序列执行后,x 的值是(        ) int a=2, b=4, x=5; if( a<--b ) x*=a;\r\nSystem.out.println(x);');
INSERT INTO `questions` VALUES ('2', '选择题', '23', '位于switch关键字之后且处于圆括号内的表达式被称为一个（      ）');
INSERT INTO `questions` VALUES ('2', '选择题', '24', '（       ）将用于确定循环是否继续迭代');
INSERT INTO `questions` VALUES ('2', '选择题', '25', '在一个for循环中，对控制变量的自增或自减运算时发生在（        ）');
INSERT INTO `questions` VALUES ('2', '选择题', '26', 'switch是一条（     ）选择语句');
INSERT INTO `questions` VALUES ('2', '选择题', '27', '（      ）将导致程序控制进入位于switch后的条件语句');
INSERT INTO `questions` VALUES ('2', '选择题', '28', '（      ）表示一条switch语句结束');
INSERT INTO `questions` VALUES ('2', '选择题', '29', '下列语句序列执行后,k 的值是  (          ) int i=10, j=18, k=30; switch( j - i ) { case 8 : k++;  case 9 : k+=2; case 10: k+=3;  default : k/=j; }');
INSERT INTO `questions` VALUES ('2', '选择题', '30', '若a和b均是整型变量并已正确赋值,正确的switch语句是(         )');
INSERT INTO `questions` VALUES ('2', '选择题', '31', '下列语句序列执行后，i的值是(       )\r\n   int  i=16;\r\n   do {  i/=2; } while( i > 3 );\r\nSystem.out.println(i)');
INSERT INTO `questions` VALUES ('2', '选择题', '32', '下列语句序列执行后，k的值是(        )\r\n   int j=8, k=15;\r\n   for( int i=2; i!=j; i++ ) { j-=2; k++; }\r\n   System.out.println(k)');
INSERT INTO `questions` VALUES ('2', '选择题', '33', '下列语句序列执行后,r 的值是(        ) char ch=\'8\'; int r=10; switch( ch+1 ) {  case \'7\': r=r+3;  case \'8\': r=r+5;  case \'9\': r=r+6; break;  default: r=r+8;\r\n}');
INSERT INTO `questions` VALUES ('2', '选择题', '34', '设int 型变量 a,b,float 型变量 x,y,char 型变量 ch 均已正确定义并赋值,正确的switch语句是(        ).');
INSERT INTO `questions` VALUES ('2', '选择题', '35', '下列语句序列执行后,k 的值是(          ). int x=6, y=10, k=5; switch( x%y ) {  case 0: k=x*y;  case 6: k=x/y;  case 12: k=x-y;  default: k=x*y-x; } System.out.println(k);');
INSERT INTO `questions` VALUES ('2', '选择题', '36', '下列语句序列执行后,r 的值是(         ). char ch=\'A\'; int r=6; switch( ch+5 ) {  case \'A\': r=r+3;  case \'B\': r=r+5; case \'C\': r-=6; break;  default : r/=2; }');
INSERT INTO `questions` VALUES ('2', '选择题', '37', '下列语句序列执行后,j 的值是(         ). int j=1; for( int i=5; i>0; i-=2 ) j*=i;');
INSERT INTO `questions` VALUES ('2', '选择题', '38', '包含多条语句的if语句体应放置在一对（     ）中');
INSERT INTO `questions` VALUES ('2', '选择题', '39', '以下for循环的执行次数是(          ). for(int x=0;(x==0)&(x0; i-=2 ) j*=2;');
INSERT INTO `questions` VALUES ('2', '选择题', '40', '以下for循环的执行次数是(            ). for(int x=0,y=0;(y!=0)&&(x0; i-- ) j+=i;');
INSERT INTO `questions` VALUES ('2', '选择题', '41', '以下由 for 语句构成的循环执行的次数是(        ). for ( int i = 0; true ; i++) ;');
INSERT INTO `questions` VALUES ('2', '选择题', '42', '下面语句执行后,i 的值是(         ). for( int i=0, j=1; j < 5; j+=3 ) i=i+j;');
INSERT INTO `questions` VALUES ('2', '选择题', '43', '下列语句序列执行后,k的值是(           ). int j=8, k=15; for( int i=2; i!=j; i++ ) { j-=2; k++; }');
INSERT INTO `questions` VALUES ('2', '选择题', '44', '下列语句序列执行后,k 的值是(         ). int m=3, n=6, k=0; while( (m++) < ( -- n) ) ++k;');
INSERT INTO `questions` VALUES ('2', '选择题', '45', '下列语句序列执行后,i 的值是(        ). int s=1,i=1; while( i<=4 ) {s*=i;i++;}');
INSERT INTO `questions` VALUES ('2', '选择题', '46', ' 下列语句序列执行后,k 的值是(           ). int m=3, n=6, k=0; while( m 4 ) --j;');
INSERT INTO `questions` VALUES ('2', '选择题', '47', '下列语句序列执行后,j 的值是(             ). int j=8, i=6; while( i >4 ) i-=2; - -j;');
INSERT INTO `questions` VALUES ('2', '选择题', '48', '下列语句序列执行后,j 的值是(            ). int j=9, i=6; while( i-- >3 ) --j;');
INSERT INTO `questions` VALUES ('2', '选择题', '49', '下列语句序列执行后,j 的值是(            ). int j=3, i=2; while( --i!=i/j ) j=j+2;');
INSERT INTO `questions` VALUES ('2', '选择题', '50', ' 若有循环: int x=5,y=20; do { y-=x; x+=2; }while(x<Y); 则循环体将被执行(        ).');
INSERT INTO `questions` VALUES ('2', '选择题', '51', '以下由do-while语句构成的循环执行的次数是(          ).\r\nint m = 8; do { ++m; } while ( m 1 );');
INSERT INTO `questions` VALUES ('2', '选择题', '52', '下列语句序列执行后,i的值是(       ). int i=10; do { i/=2; } while( i--> 1 );');
INSERT INTO `questions` VALUES ('2', '选择题', '53', '下列语句序列执行后,i的值是(           ). int i=10; do { i-=2; } while( i>6 );');
INSERT INTO `questions` VALUES ('2', '选择题', '54', '下列语句序列执行后,i的值是(         ). int i=16; do { i/=2; } while( i > 3 );');
INSERT INTO `questions` VALUES ('2', '选择题', '55', '以下由do-while语句构成的循环执行的次数是(        ). int k = 0; do { ++k; }while ( k < 1 );');
INSERT INTO `questions` VALUES ('2', '选择题', '56', ' 若有循环: int x=5,y=20; do{ y-=x; x++; } while(++x<--y); 则循环体将被执行(          ).');
INSERT INTO `questions` VALUES ('2', '选择题', '57', 'MAX_LENGTH是int型public成员变量, 变量值保持为常量100，用简短语句定义这个变量。（          ）');
INSERT INTO `questions` VALUES ('2', '选择题', '58', '在一个do…while语句中，关键字while出现在（       ）');
INSERT INTO `questions` VALUES ('2', '选择题', '59', '计数器控制循环中的（       ）要素将用于确定循环变量在每次的循环迭代中如何进行修改');
INSERT INTO `questions` VALUES ('2', '选择题', '60', 'for语句内，位于第一个分号前的值表示（       ）');
INSERT INTO `questions` VALUES ('2', '选择题', '61', 'for循环语句的第1行常量被非正式的称为（        ）');
INSERT INTO `questions` VALUES ('2', '选择题', '62', '若switch语句中控制表达式不与任何一个case标签相等且不存在defunct case，则（     ）');
INSERT INTO `questions` VALUES ('2', '选择题', '63', '若存在一个case标签与控制表达式相匹配，则应用（       ）把该case标签痛所要执行的代码相分离');
INSERT INTO `questions` VALUES ('2', '选择题', '64', '基本类型（       ）不能用与switch语句相兼容');
INSERT INTO `questions` VALUES ('2', '选择题', '65', '对于下列代码、    public class Parent {     public int addValue( int a, int b) {       int s;       s = a+b;       return s;     }    }    class Child extends Parent {    }   下述哪些方法可以加入类Child? （     ）');
INSERT INTO `questions` VALUES ('2', '选择题', '66', '下面哪些选项是正确的main方法说明？（       ）');
INSERT INTO `questions` VALUES ('2', '选择题', '67', '已知代码、\r\nPublic class ex_3_1_2_if{\r\nPublic static void main(String []asd){\r\nint a=5;\r\nif(a>=5){\r\nSystem.out.println(“a>=5是真值”);}\r\nelse{System.out.println(“a>=5是假值”;)\r\n}\r\n}\r\n}\r\n请问最终将打印什么语句（        ）');
INSERT INTO `questions` VALUES ('2', '选择题', '68', '已知代码、\r\npublic class ex_3_1_2_switch{\r\npublic static void main(String []asd){\r\nint a=2\r\nswitch(a){\r\ncase 1:\r\nSystem.out.println(“a=1”);\r\ncase 2:\r\nSystem.out.println(“a=2”);\r\nbreak;\r\ncase 3:\r\nSystem.out.println(“a=3”);\r\nbreak;\r\ndefault:\r\nSystem.out.println(“a!=1&&a!=2&&a!=3”);\r\nbreak;\r\n}\r\n}\r\n}\r\n请问结果将输出什么（       ）');
INSERT INTO `questions` VALUES ('2', '选择题', '69', '下列语句序列执行后，i的值是(       )。\r\n   int  i=16;\r\n   do {  i/=2; } while( i > 3 );');
INSERT INTO `questions` VALUES ('2', '选择题', '70', '下列语句序列执行后，k的值是(        )。\r\n   int j=8, k=15;\r\n   for( int i=2; i!=j; i++ ) { j-=2; k++; }');
INSERT INTO `questions` VALUES ('2', '选择题', '71', '阅读下面的代码，回答问题，（           ）\r\nfor( m = 0 ; m > -2 ; m -- ){….}\r\nFor循环执行多少次、');
INSERT INTO `questions` VALUES ('2', '选择题', '72', '阅读下面的代码，回答问题，\r\nfor( m = 0; m < 5; m++ )\r\n {\r\n     System.out.print( m + \",\" );\r\n  if( m == 3 )\r\n     break;\r\n }\r\n执行结果是、（        ）');
INSERT INTO `questions` VALUES ('2', '选择题', '73', '编译运行下面的代码，会有什么结果产生、（        ） int i = 1; switch (i) { case 0: System.out.println(\"zero\"); break; case 1: System.out.println(\"one\"); case 2: System.out.println(\"two\"); default: System.out.println(\"default\"); }');
INSERT INTO `questions` VALUES ('2', '选择题', '74', '编译运行下面的代码，会有什么结果产生、（         ） int i = 9; switch (i) { default: System.out.println(\"default\"); case 0: System.out.println(\"zero\"); break; case 1:\r\nSystem.out.println(\"one\"); case 2: System.out.println(\"two\"); }');
INSERT INTO `questions` VALUES ('2', '选择题', '75', '下面不会在编译时出错的是（         ）');
INSERT INTO `questions` VALUES ('2', '选择题', '76', '当x的值为2时，下面代码的运行结果是、（         ）\r\nswitch (x) {\r\ncase 1:\r\nSystem.out.println(1);\r\ncase 2:\r\ncase 3:\r\nSystem.out.println(3);\r\ncase 4:\r\nSystem.out.println(4);\r\n}');
INSERT INTO `questions` VALUES ('2', '选择题', '77', '以下哪个不是循环语句的内容(        )');
INSERT INTO `questions` VALUES ('2', '选择题', '78', '以下4个for语句，合法的是（      ）');
INSERT INTO `questions` VALUES ('2', '选择题', '79', '下面循环体内的运算x+=i执行了（       ）次\r\n  int x=0;\r\nfor(int i=0;i<6;i++){\r\nx+=i;}');
INSERT INTO `questions` VALUES ('2', '选择题', '80', '下面循环体内的运算x+=j执行了（    ）次。\r\n  int x=0;\r\nfor(int i=0;j<6;i++){\r\nfor(int j=0;j<6;j++){\r\nx+=j;}\r\n}');
INSERT INTO `questions` VALUES ('2', '选择题', '81', '当一个被执行的语句并不是按照应用程序编写的次序来执行的，则是被认为是发生了（      ）');
INSERT INTO `questions` VALUES ('2', '选择题', '82', 'if语句被称为是一个（      ）语句，因为它能够选择忽略一个操作');
INSERT INTO `questions` VALUES ('2', '选择题', '83', '程序控制的三种类型是顺序、选择和（    ）');
INSERT INTO `questions` VALUES ('2', '选择题', '84', 'while语句的循环体将（     ）');
INSERT INTO `questions` VALUES ('2', '选择题', '85', '计数器控制的循环有时也被称为（      ） 因此新欢次数在循环开始执行前是已知的');
INSERT INTO `questions` VALUES ('2', '选择题', '86', '（    ）语句将一直执行直至其循环-继续条件变为FALSE时为止');
INSERT INTO `questions` VALUES ('2', '选择题', '87', '当while语句中的条件语句不会变为FALSE时，为导致出现（      ）循环');
INSERT INTO `questions` VALUES ('2', '选择题', '88', 'do…while 语句对循环-继续条件的测试时发生在（     ）');
INSERT INTO `questions` VALUES ('2', '选择题', '89', '当do…while语句中循环-继续条件（     ）时，会出现一个无限循环');
INSERT INTO `questions` VALUES ('2', '选择题', '90', '当一个do…while中循环-继续条件不会变为FALSE时，会出现（    ）');
INSERT INTO `questions` VALUES ('2', '选择题', '91', '（    ）语句将至少执行一次他的语句体，且能够继续执行下去直至其循环-继续条件变为FALSE时为止');
INSERT INTO `questions` VALUES ('2', '选择题', '92', '某循环其执行的迭代次数多一次或少一次的现象被称为（        ）');
INSERT INTO `questions` VALUES ('2', '选择题', '93', '如果循环-继续条件在首次计算中就为FALSE，则接下来的do…while循环语句（      ）');
INSERT INTO `questions` VALUES ('2', '选择题', '94', '阅读下列代码');
INSERT INTO `questions` VALUES ('2', '选择题', '95', '关于以下程序段，正确的说法是（       ）');
INSERT INTO `questions` VALUES ('2', '选择题', '96', ' 若有如下程序段,其中s、a、b、c均已定义为整型变量,且a、c均已赋值（c大于0）.\r\n s=a;\r\nfor(b=1;b<=c;b++) s=s+1;\r\n则与上述程序段功能等价的赋值语句是（      ）.');
INSERT INTO `questions` VALUES ('2', '选择题', '97', '认真阅读下面的程序：\r\nclass  TestApp{\r\n  public static void main(String[] args){\r\n   for(int i=0;i<5;i++)\r\n              System.out.print(i+1);\r\n         System.out.println(i);\r\n    }\r\n}\r\n上述程序运行后的结果是（          ）');
INSERT INTO `questions` VALUES ('2', '选择题', '98', '认真阅读下面的程序：\r\nclass  TestApp{\r\n  public static void main(String[] args){\r\n   for(int i=0;i<10;i++){\r\n            if(i==3)\r\n                 break;\r\n   System.out.print(i);\r\n         }\r\n    }\r\n}\r\n程序运行后的输出是（   ）');
INSERT INTO `questions` VALUES ('2', '选择题', '99', '所有的程序均可以用几种类型控制结构编写。(     )');
INSERT INTO `questions` VALUES ('2', '选择题', '100', '当条件为真和条件为假时，(         )控制结构可以执行不同的动作。');
INSERT INTO `questions` VALUES ('2', '选择题', '101', '下面程序片段输出的是什么？ (       )\r\nint  a=3;\r\nint  b=1;\r\nif(a=b)\r\nSystem.out .println(“a=”+a);');
INSERT INTO `questions` VALUES ('2', '选择题', '102', '下面程序的输出结果是：(       )\r\npublic class Test{\r\nvoid printValue(int m){\r\ndo { System .out .println(“The value is”+m);\r\n}\r\nwhile(- - m>10);\r\n}\r\npublic static void main(String arg[]){\r\nint i=10;\r\nTest t= new Test();\r\nt.printValue(i);\r\n}\r\n}');
INSERT INTO `questions` VALUES ('2', '选择题', '103', '下列语句执行后，x 的值为(      )\r\nint a=4，b=5，x=3;\r\nif(++a==b)  x=x*a;');
INSERT INTO `questions` VALUES ('2', '选择题', '104', '下列语句执行后，z 的值为(       )\r\nint x=3,y=4,z=0;\r\nswitch(x%y+2)\r\n{\r\ncase 0:z=x*y;break;\r\ncase 6:z=x/y;break;\r\ncase 12:z=x-y;break;\r\ndefault:z=x*y-x;\r\n}');
INSERT INTO `questions` VALUES ('2', '选择题', '105', '请看下面的程序代码：(       )\r\nif(x>0) { System .out .println(“first”);}\r\nelse if(x<20) { System .out .println(“second”);}\r\nelse { System .out .println(“third”) }\r\n当程序输出“second”时，x 的范围为：');
INSERT INTO `questions` VALUES ('2', '选择题', '106', '请看下面的程序代码：(       )\r\nswitch(n) {\r\ncase 0: System .out .println(“first”);\r\ncase 1:\r\ncase 2: System .out .println(“second”); break;\r\ndefault: System .out .println(“end”);\r\n}\r\n当 n 为何值时，程序段将输出字符串 second：');
INSERT INTO `questions` VALUES ('2', '选择题', '107', '下列语句执行后，x 的值是（     ）\r\nint x=2;\r\ndo\r\n{x+=x; }while(x<17);');
INSERT INTO `questions` VALUES ('2', '选择题', '108', '下列语句执行后，j 的值是（     ）\r\nint j=3,i=3;\r\nwhile(--i!=i/j)\r\nj=j+2;');
INSERT INTO `questions` VALUES ('2', '选择题', '109', '下列语句执行后，i，j 的值是（      ）\r\nint i=1, j=8;\r\ndo\r\n{if(i++>--j)\r\ncontinue；}while(i<4);');
INSERT INTO `questions` VALUES ('2', '选择题', '110', '下列语句执行后，k 的值是（        ）\r\nint j=4,i,k=10;\r\nfor(i=2;i!=j;i++)\r\nk=k-i;');
INSERT INTO `questions` VALUES ('2', '选择题', '111', '下列语句执行后，c 的值是(       )\r\nchar c=\'\0\';\r\nfor(c=\'a\';c<\'z\';c+=3)\r\n{\r\nif(c>=\'e\')\r\nbreak;\r\n}');
INSERT INTO `questions` VALUES ('2', '选择题', '112', '下列语句执行后，k 的值是（       ）\r\nint i,j,k=1;\r\nlable:for(i=1;i<8;i++)\r\n{\r\nfor(j=1;j<6;j++) {\r\nk*=i+j;\r\nif(j==3)\r\nbreak lable;\r\n}\r\n}');
INSERT INTO `questions` VALUES ('3', '判断题', '1', '类String对象和类StringBuffer对象都是字符串变量，建立后都可以修改(    )');
INSERT INTO `questions` VALUES ('3', '判断题', '2', '字符串中的索引从0开始 (    )');
INSERT INTO `questions` VALUES ('3', '判断题', '3', '连接字符子串，当前字符串本身不改变(     )');
INSERT INTO `questions` VALUES ('3', '判断题', '4', '用“+”可以实现字符串的拼接，用“-” 可以从一个字符串中去除一个字符子串。(     )');
INSERT INTO `questions` VALUES ('3', '判断题', '5', 'Java中的String类的对象既可以是字符串常量，也可以是字符串变量。(     )');
INSERT INTO `questions` VALUES ('3', '判断题', '6', '用运算符“==”比较字符串对象时，只要两个字符串包含的是同一个值，结果便为 true。（   ）');
INSERT INTO `questions` VALUES ('3', '判断题', '7', 'String 类字符串在创建后可以被修改。（   ）');
INSERT INTO `questions` VALUES ('3', '判断题', '8', '方法 replace (String srt1, String srt2)将当前字符串中所有 srt1 子串换成 srt2子串。（  ）');
INSERT INTO `questions` VALUES ('3', '判断题', '9', '方法 compareTo 在所比较的字符串相等时返回 0。（  ）');
INSERT INTO `questions` VALUES ('3', '判断题', '10', '方法 IndexOf((char ch，-1)返回字符 ch 在字符串中最后一次出现的位置。（ ）');
INSERT INTO `questions` VALUES ('3', '填空题', '1', '_字符串分为两大类，一类是字符串常量，使用_______类的对象表示；另一类是字符串变量，使用类__________的对象表示。');
INSERT INTO `questions` VALUES ('3', '填空题', '2', '_.对于字符串String s1=new String(\"ok\");string s2=new String(\"ok\"); 表达式s1==s2的值是_________，s1.equals(s2)的值是');
INSERT INTO `questions` VALUES ('3', '填空题', '3', '对于字符串String s1=\"ok\";String s2=\"ok\";表达式s1==s2的值是_______,s1.equals(s2)的值是');
INSERT INTO `questions` VALUES ('3', '填空题', '4', 'Math.min(-25,-9)=_________; Math.sqrt(16)=________;');
INSERT INTO `questions` VALUES ('3', '填空题', '5', '创建字符串对象a的两种方式_________和___________。');
INSERT INTO `questions` VALUES ('3', '填空题', '6', '字符串的两大类________和_________。');
INSERT INTO `questions` VALUES ('3', '填空题', '7', '设String对象s= “Hello ”，运行语句System.out.println(s.concat(“World!”));后String对象s的内容为______________，所以语句输出为_____________。');
INSERT INTO `questions` VALUES ('3', '填空题', '8', '已知 String 对象 s=“hello”，运行语句 System.out.println(s.concat(“World !”)); 后 s 的值为__________。');
INSERT INTO `questions` VALUES ('3', '填空题', '9', '使用+ =将字符串 s2 添加到字符串 s1后的语句是_________。');
INSERT INTO `questions` VALUES ('3', '填空题', '10', '比较 s1 中的字符串和 s2 中的字符串的内容是否相等的语句是________。');
INSERT INTO `questions` VALUES ('3', '填空题', '11', '已知 sb 为 StringBuffer 的一个实例， 且 sb= \"abcde \"， 则 sB reverse()后 sb 的值为_____________。');
INSERT INTO `questions` VALUES ('3', '填空题', '12', '已知 sb 为 StringBuffer 的一个实例，且 sb= \"abcde \"，则 sB delete(1,2)后 sb 的值为_____________。');
INSERT INTO `questions` VALUES ('3', '编程题', '1', '怎么样获得字符串的第一个字符？怎么样获得字符串的最后一个字符？？怎么样删除第一个字符？？怎么样删除最后一个字符？？？');
INSERT INTO `questions` VALUES ('3', '编程题', '2', '编写一个程序，给定一个字符串“aaa果4金5a”。要求：如果出现数字，把数字后面的字符替换成数字的个数个。比如这个字符串要求被替换成“aaa果金金金金aaaaa”。');
INSERT INTO `questions` VALUES ('3', '编程题', '3', '编写一个程序，比较输入的两个字符串的长度大小。');
INSERT INTO `questions` VALUES ('3', '编程题', '4', '编写一个程序，判断两个字符串是否相同：s1=”you are a student”，s2=”how are you”；');
INSERT INTO `questions` VALUES ('3', '编程题', '5', '编写一个程序，判断字符串”22030219851022024”的前缀、后缀是否和某个字符串”220302”相同。');
INSERT INTO `questions` VALUES ('3', '编程题', '6', '编写一个程序，按字典顺序比较两个字符串”你”和”我”的大小关系。');
INSERT INTO `questions` VALUES ('3', '编程题', '7', '将数字型字符串”100”和”123.678”转换为数字；');
INSERT INTO `questions` VALUES ('3', '编程题', '8', '将字符串”FEDCBA”存放到数组中，调用for循环读出数组数据显示在屏幕上。');
INSERT INTO `questions` VALUES ('3', '编程题', '9', '从键盘输入两个整数，在程序中计算这两个整数的和，并输出。');
INSERT INTO `questions` VALUES ('3', '编程题', '10', '判断回文字符串。回文是一种“从前向后读”和“从后向前读”都相同的字符串。如“rotor”是一个回文字符串。要求利用命令行参数输入一个字符串，判断是否为回文。');
INSERT INTO `questions` VALUES ('3', '编程题', '11', '编写应用程序，把字符串“ABCDEFHIJKLM”逆序输出。');
INSERT INTO `questions` VALUES ('3', '编程题', '12', '编写应用程序，实现从命令行参数中输入一字符串，统计该字符串中字符‘e’出现的次数。');
INSERT INTO `questions` VALUES ('3', '编程题', '13', '编写应用程序，实现从命令行参数中输入一字符串，屏蔽掉字符\'s\'后打印出来。');
INSERT INTO `questions` VALUES ('3', '编程题', '14', '编写应用程序，实现从命令行参数中提取出所有的数字，然后将这些数字按出现的顺序转换成一个整数。');
INSERT INTO `questions` VALUES ('3', '编程题', '15', '编写一个应用程序，设有字符串\"yekmaakkccekymbvb\",求出该字符串中有多少种字符,以及每个字符的个数?');
INSERT INTO `questions` VALUES ('3', '编程题', '16', '编写一个截取字符串的方法， 输入为一个字符串和字节数，输出为按字节数截取的字符串。 但是要保证汉字不被截半个，如\"我ABC\"4，应该截为\"我AB\"，输入\"我ABC汉DEF\"6， 应该输出为\"我ABC\"而不是\"我ABC+汉的半个\"。');
INSERT INTO `questions` VALUES ('3', '编程题', '17', '编写一个应用程序，对字符串sbc，fds,des按字母的升序输出。');
INSERT INTO `questions` VALUES ('3', '编程题', '18', '编写自定义方法生成 k 个 50~100 之间的随机整数，再另写一个输出方法。在应用程序的 main（ ）方法中调用这两个方法，生成一个整型数组并输出该数组的所有元素。');
INSERT INTO `questions` VALUES ('3', '编程题', '19', '编写一个 Application 程序，比较命令行中给出的两个字符串是否相等，并输出比较的结果。');
INSERT INTO `questions` VALUES ('3', '编程题', '20', '请编写一个 Application 实现如下功能：接受命令行中给出的一个字母串，先将该串原样 输出，然后判断该串的第一个字母是否为大写，若是大写则统计该串中大写字母的个数，并将 所有大写字母输出；否则输出信息串”第一个字母不是大写字母!”。');
INSERT INTO `questions` VALUES ('3', '编程题', '21', '一个应用程序，接受用户输入的一行字符串，统计字符个数，然后反序输出。');
INSERT INTO `questions` VALUES ('3', '编程题', '22', '给你一个字符串数组 String []strings=new String{\"tom\",\"is\",\"a\",\"boy\"}; 然后让你输入一句话,如果你的输入和他给的一样的话，就原文不动的输出。如你输入 tom is a boy就输出 tom is a boy。但是如果你输入tom is an open，输出的时候要把一样的写下来,不一样的找有没有对应的字母一样的,如果有就在那个一样的字母后加一个\"?\"');
INSERT INTO `questions` VALUES ('3', '选择题', '1', ' String str = new String(\"abc\")  此代码中有几个对象（        ）');
INSERT INTO `questions` VALUES ('3', '选择题', '2', '下面哪个是对字符串String的正确定义 （          ）');
INSERT INTO `questions` VALUES ('3', '选择题', '3', ' 给出下面一段程序，选择运行结果（        ）\r\npublic class X{\r\n   public static void main(String [] args){\r\n String names[]=new String[5];\r\n for(int x=0;x<args.length;x++)  names[x]=args[x];\r\n    System.out.println(names[2]);\r\n}}\r\n命令行执行、  java X a b   结果是下面哪一个？');
INSERT INTO `questions` VALUES ('3', '选择题', '4', '如何将字符串转换为数值？（      ）');
INSERT INTO `questions` VALUES ('3', '选择题', '5', '阅读下面代码\r\n      if(x==0){System.out.println(“小明”);}\r\n       else if(x<-2){System.out.println(“小华”);}\r\n      else{System.out.println(“小军”);}\r\n 若要求打印字符串“小军”，则变量x的取值范围是（        ）。');
INSERT INTO `questions` VALUES ('3', '选择题', '6', ' 下面那个选项是正确的包含50个字符串数组的声明？（       ）');
INSERT INTO `questions` VALUES ('3', '选择题', '7', ' 用于存放创建后则不变的字符串常量是（         ）');
INSERT INTO `questions` VALUES ('3', '选择题', '8', ' 要为程序的子窗口设定一个由字符串s指定的名字，可以采用的代码是（     ）');
INSERT INTO `questions` VALUES ('3', '选择题', '9', 'Math类的（       ）方法可用于计算所传递参数的平方根');
INSERT INTO `questions` VALUES ('3', '选择题', '10', 'Math.（         ）方法可返对某数求幂后的结果');
INSERT INTO `questions` VALUES ('3', '选择题', '11', '（        ）方法可返回一个Integer对象的int数据');
INSERT INTO `questions` VALUES ('3', '选择题', '12', '（      ）中包含了一个Random类');
INSERT INTO `questions` VALUES ('3', '选择题', '13', 'Random对象能够生成（     ）类型的随机数');
INSERT INTO `questions` VALUES ('3', '选择题', '14', 'import语句使应用程序能够从Java类库中访问到（       ）');
INSERT INTO `questions` VALUES ('3', '选择题', '15', 'Random类的nextInt方法能够（         ）');
INSERT INTO `questions` VALUES ('3', '选择题', '16', '语句（    ）是将一个5到20之间的随机数赋值给变量value');
INSERT INTO `questions` VALUES ('3', '选择题', '17', 'Java.util包中的Random类（           ）');
INSERT INTO `questions` VALUES ('3', '选择题', '18', '表达式example.substring（3，4）返回的子都为（        ）');
INSERT INTO `questions` VALUES ('3', '选择题', '19', '代码片段、sample（     ）可返回String 型sample的长度');
INSERT INTO `questions` VALUES ('3', '选择题', '20', 'String类的（      ）方法将返回该字符串的字符个数');
INSERT INTO `questions` VALUES ('3', '选择题', '21', '字符串是由（       ）组成');
INSERT INTO `questions` VALUES ('3', '选择题', '22', '通过调用（    ）方法可在某个字符串中定位出一个字符串首次出现的位置');
INSERT INTO `questions` VALUES ('3', '选择题', '23', '在一个接收String和int作为其参数的lastIndexOf方法中，传递至lastIndexOf方法中的第二个参数表示（    ）');
INSERT INTO `questions` VALUES ('3', '选择题', '24', 'substring方法（    ）');
INSERT INTO `questions` VALUES ('3', '选择题', '25', '当调用喊两个参数的substring方法时，第二个参数表示（    ）');
INSERT INTO `questions` VALUES ('3', '选择题', '26', '（     ）方法可删除某个字符串中的所有空格');
INSERT INTO `questions` VALUES ('3', '选择题', '27', '如果某个字符串起始于参数字符串，那么调用startsWith方法时将返回（     ）');
INSERT INTO `questions` VALUES ('3', '选择题', '28', '假若indexOf方法未能找到所指定的子字符串，自责返回(         )');
INSERT INTO `questions` VALUES ('3', '选择题', '29', '以下是关于字符串运算的代码，执行该代码段的输出结果是(        )\r\nString  s=″0123456789″，sl，s2；\r\nsl=s.substring(2)；s2=s.substring(2，5)；System.out.println(s1+s2)；');
INSERT INTO `questions` VALUES ('3', '选择题', '30', 'string类允许开发人员（     ）');
INSERT INTO `questions` VALUES ('3', '选择题', '31', '（      ）方法用于返回字符串中一个指定索引的字符');
INSERT INTO `questions` VALUES ('3', '选择题', '32', '（   ）方法通过复制现有String对象中的一部分，一创建一个新的String对象');
INSERT INTO `questions` VALUES ('3', '选择题', '33', '所有的String对象（       ）');
INSERT INTO `questions` VALUES ('3', '选择题', '34', '作为接受两个参数的indexOf方法，将不会考虑任何出现在（    ）之前的所有字符');
INSERT INTO `questions` VALUES ('3', '选择题', '35', '（     ）方法能够判断出某个字符串是否以一个给定的子字符串作为结尾');
INSERT INTO `questions` VALUES ('3', '选择题', '36', 'trim方法将出现在字符串（    ）的空格删除');
INSERT INTO `questions` VALUES ('3', '选择题', '37', '方法（        ）可返回某个数的绝对值');
INSERT INTO `questions` VALUES ('3', '选择题', '38', 'min方法和abs方法都属于（        ）类');
INSERT INTO `questions` VALUES ('3', '选择题', '39', '语句（       ）返回的整数范围为8到30');
INSERT INTO `questions` VALUES ('3', '选择题', '40', '语句（           ）返回的整数范围为15到35');
INSERT INTO `questions` VALUES ('3', '选择题', '41', '下面哪些语句能够正确地生成5个空字符串？(          )');
INSERT INTO `questions` VALUES ('3', '选择题', '42', ' 下列定义String变量s的语句中，错误的是（         ）');
INSERT INTO `questions` VALUES ('3', '选择题', '43', '需要分析字符串，并将字符串分解成可被独立使用的单词，可使用java. util包中的类是\r\n（     ）');
INSERT INTO `questions` VALUES ('3', '选择题', '44', '已知 String 对象 s=\"abcdefg\"，则 s.substring(2, 5)的返回值为（    ）');
INSERT INTO `questions` VALUES ('3', '选择题', '45', '请看下面的代码\r\nString s = “people”;\r\nString t = “people”;\r\nString c[ ] = {‘p’,’e’,’o’,’p’,’l’ ,’e’};\r\n下面哪一选项的语句返回值为真：（     ）');
INSERT INTO `questions` VALUES ('3', '选择题', '46', '已知 s 为一个 String 对象，s=\"abcdefg\"，则 s.charAt(1)的返回值为（       ）');
INSERT INTO `questions` VALUES ('3', '选择题', '47', '请看下面的代码\r\nString s = “good”;\r\n下面选项语句书写正确的是：（     ）');
INSERT INTO `questions` VALUES ('3', '选择题', '48', '正确创建一个含有 5 个元素的字符串数组的选项是：（     ）');
INSERT INTO `questions` VALUES ('3', '选择题', '49', '请看下面的代码\r\npublic class class1{\r\nString str = new String(\"Girl\");\r\nchar ch[ ]={\'d\',\'b\',\'c\'};\r\npublic static void main(String args[ ]){\r\nclass1 x=new class1( );\r\nx.change(x.str,x.ch);\r\nSystem .out .println(x.str +\" and \"+x.ch[0]+x.ch[1]+x.ch[2]);\r\n}\r\npublic void change(String str,char ch[ ]){\r\nstr=\"Boy\";\r\nch[0]=\'a\';\r\n}\r\n}该程序的输出结果是：(      )');
INSERT INTO `questions` VALUES ('4', '判断题', '1', '数组的下标比它的长度少1(       ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '2', '多维数组不是由简单的一维数组组成（       ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '3', '用length（）方法求数组的长度（     ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '4', '数组的长度一旦定义了，就不能再改了（        ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '5', '数组作参数时，数组名后必须加方括号。（       ）');
INSERT INTO `questions` VALUES ('4', '判断题', '6', '如果数组大小超过了原来的范围，那么他的范围可以自动的增长到所需的范围（       ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '7', '数组是具有相同数据类型的一系列数据元素的集合（         ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '8', '定义一个长度为4整型数组: int a[]=new int [4];(       )');
INSERT INTO `questions` VALUES ('4', '判断题', '9', 'int[] a={12,23,45,1,8,9,34}数组的长度是8（        ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '10', '定义一个String数组String[]  C={“123”，“678”，“你好”,“  ”,“67”，“Java”}（     ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '11', '数组String []  C={\"123\"，\"678\"，\"你好\",\"  \",\"67\"，\"Java\"}的长度是6（     ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '12', 'int[][] a=new int [2 ][3]里的2表示2行，3表示每行有三列（    ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '13', 'int[][] a=new int [2 ][3]里的2表示2维数组，3表示每行有三列（     ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '14', 'int[][] a=new int [2 ][3]是2维数组（     ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '15', 'int[] a=new int [2 ]的长度为3(     )；');
INSERT INTO `questions` VALUES ('4', '判断题', '16', 'int[]a=new int [2 ]的最大下标数是1（      ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '17', '可以用length（）方法求字符串，所以也可以用它来求数组的长度（     ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '18', '判断int a[]=new int[3]; a[0]=12;   a[1]=0;  a[2]=\"你好\"；  的对错（   ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '19', '判断数组String [] a={123,345,adfg,\"你好\"}的对错（     ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '20', '数组可以跟数组比大小（    ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '21', '数组可以跟数轴比长度（     ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '22', '数组的长度定义后还可以改变（     ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '23', '在int型的数组里可以放字符型的值（     ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '24', '如果一个字符串未给他付初值，那么程序内部将自动赋值为0（     ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '25', '定义一个数组可以不给他付初值，但一定要标明他的长度（      ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '26', 'String a[]的正确书写方式是String a[]={1232,4354,\"234\"，“java”}(       );');
INSERT INTO `questions` VALUES ('4', '判断题', '27', '表示一个长度为6的int型的一维数组，int a[]=new int [6];(        )');
INSERT INTO `questions` VALUES ('4', '判断题', '28', '一维数组是多维数组的基础，即多维数组是由N给一维数组组成（      ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '29', '要打印一个数组时，一定要人为的给他先付初值（      ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '30', '程序内部可以给基本数据类型的数组自动的付初值为0（        ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '31', '程序内部可以给String数组自动的付初值为0（       ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '32', '在Java里只有int ，String二种类型的数组（       ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '33', '数组的下标等于他的长度（      ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '34', '数组属于基本数据类型（      ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '35', '数组属于类（     ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '36', '数组属于复合类型（      ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '37', '数组可以用关系运算符来比较大小（      ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '38', '可以用“=”来给数组赋值（     ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '39', '数轴的长度大小规定后就不能在改变了（       ）');
INSERT INTO `questions` VALUES ('4', '判断题', '40', '数组的大小可以自动增长（       ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '41', '数组与数组的内容可以用length（）进行比较（       ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '42', '在Java语言中，数组的定义形式为、数组元素类型 数组名[],或数组元素类型[] 数组名[];(       )');
INSERT INTO `questions` VALUES ('4', '判断题', '43', '在Java中数组元素是通过访问下标来实现的（     ）；');
INSERT INTO `questions` VALUES ('4', '判断题', '44', 'java有复合类型，复合类型也叫参考数据类型（     ）');
INSERT INTO `questions` VALUES ('4', '判断题', '45', '下标是用于指出数组中某个元素位置的数字或变量。（    ）');
INSERT INTO `questions` VALUES ('4', '判断题', '46', '同一个数组中可以存放多个不同类型的数据。（     ）');
INSERT INTO `questions` VALUES ('4', '判断题', '47', '数组的下标可以是 int 型或 float 型。（     ）');
INSERT INTO `questions` VALUES ('4', '判断题', '48', '数组可以声明为任何数据类型。（    ）');
INSERT INTO `questions` VALUES ('4', '判断题', '49', '执行语句 int a[]后数组元素的值为 0。（     ）');
INSERT INTO `questions` VALUES ('4', '判断题', '50', '假定整形数组的某个元素被传递给一个方法并被该方法修改。当调用方法执行完毕时，这 个元素中含有修改过的数值。（     ）');
INSERT INTO `questions` VALUES ('4', '判断题', '51', '执行语句 int a[] = new int[50]后数组元素的值为 0。（      ）');
INSERT INTO `questions` VALUES ('4', '判断题', '52', '对于二维数组 s 来说，s [2].length 给出数组 s 第 2 行的元素个数。（     ）');
INSERT INTO `questions` VALUES ('4', '判断题', '53', '定义完数组后，我们可以根据实际需要，再动态调整数组大小（      ）');
INSERT INTO `questions` VALUES ('4', '判断题', '54', '数组、类和接口都是引用数据类型 （      ）');
INSERT INTO `questions` VALUES ('4', '判断题', '55', 'int x=9; if(x>8 and x<10) System.out.println(\"true\"); 以上语句运行的结果是显示true （    ）');
INSERT INTO `questions` VALUES ('4', '判断题', '56', 'String str; System.out.println(str.length()); 以上语句运行的结果是显示0 （     ）');
INSERT INTO `questions` VALUES ('4', '判断题', '57', 'float x=26f; int y=26; int z=x/y; 以上语句能正常编译和运行 （      ）');
INSERT INTO `questions` VALUES ('4', '判断题', '58', 'if(\"Hunan\".indexOf(\'n\')==2) System.out.println(\"true\"); 以上语句运行的结果是显示true （      ）');
INSERT INTO `questions` VALUES ('4', '填空题', '1', 'int []a={12,45};a[0]=12;a[1]=_______;');
INSERT INTO `questions` VALUES ('4', '填空题', '2', 'int []a=new int [_______];a[0]=12;a[1]=23;a[2]=45;');
INSERT INTO `questions` VALUES ('4', '填空题', '3', 'String a={\"12\",\"34\",\"顺水\",\"23\"}的长度是_______;');
INSERT INTO `questions` VALUES ('4', '填空题', '4', 'int a[][]=___________[2][2];');
INSERT INTO `questions` VALUES ('4', '填空题', '5', 'int a[]={12,23,45,_____,34,67};a[3]=56;');
INSERT INTO `questions` VALUES ('4', '填空题', '6', 'String C={\"123\",\"23\",\"a你不好\"，\"  \"，\"他人同意\"}的长度是____;');
INSERT INTO `questions` VALUES ('4', '填空题', '7', 'String a[2][2]={{\"123\",\"678\"},{\"你好\"，\"书Java\"}}String[1][1]=__________;');
INSERT INTO `questions` VALUES ('4', '填空题', '8', '数轴String[23][3]长度是_____;');
INSERT INTO `questions` VALUES ('4', '填空题', '9', 'String[][][]是由_______个一维数组组成的;');
INSERT INTO `questions` VALUES ('4', '填空题', '10', '数轴的下标是从______开始的;');
INSERT INTO `questions` VALUES ('4', '填空题', '13', 'String b={\"23\",\"90\",\"try\",\"catch\",\"finaly\"},String b的最大下标是_____;');
INSERT INTO `questions` VALUES ('4', '填空题', '14', 'String b={\"23\",\"90\",\"try\",\"catch\",\"finaly\"},b[4]=________;');
INSERT INTO `questions` VALUES ('4', '填空题', '15', 'String b={\"23\",\"90\",\"try\",\"catch\",\"finaly\"},b.length=_______;');
INSERT INTO `questions` VALUES ('4', '填空题', '16', 'int a=new int [4]; 计算机自动的为它赋的初值是a[0]=_____;a[2]=____;');
INSERT INTO `questions` VALUES ('4', '填空题', '21', '数组可以跟数轴比长度（     ）；');
INSERT INTO `questions` VALUES ('4', '编程题', '1', '编写一个程序，求出数组中20,10,50,40,30,70,95,80,90,100的最小值。并查找该数组中是否有95这个数，如果有，打印出它的位置；如果没有，请给出提示。');
INSERT INTO `questions` VALUES ('4', '编程题', '2', '编写一个程序，随机抽取100以内的10个数赋值给一个数组。求这个整数数组的最大值、最小值、平均值和所有数组元素的和。');
INSERT INTO `questions` VALUES ('4', '编程题', '3', '编写一个长度为10的一维数组，并付初值；');
INSERT INTO `questions` VALUES ('4', '编程题', '4', '编写一个二维数组，并付初值；');
INSERT INTO `questions` VALUES ('4', '编程题', '5', '编写一个用for循环的一维数轴，并打印；');
INSERT INTO `questions` VALUES ('4', '编程题', '6', '随机抽取100以内的10个数，把这个些数用数组表示出来，并打印。');
INSERT INTO `questions` VALUES ('4', '编程题', '7', ' 是一个计算天数的例子。已知日期是某年某月某日，计算这一天是这一年的第几天，预先将一年前11个月的天数存放在Montn-day中，先将指定月份之前的各个月份天数累加，在添加上当月的天数，就得到这年的天数total。在定义数轴的同时付初值，由于数组下表从0开始，第一个数可以是任意值，下标为1的数组元素值为1月份的天数，当闰年是2月份的天数为29天。');
INSERT INTO `questions` VALUES ('4', '编程题', '8', '编写一个程序，用选择法对数组a[]={20,10,50,40,30,70,60,80,90,100}进行从大到小的排序。');
INSERT INTO `questions` VALUES ('4', '编程题', '9', '编写一个方法halfArray()，要求该方法有一个元素类型为int的数组参数，方法返回一个新数组，新数组的长度与参数数组的长度相同，而新数组元素的值是参数数组各元素的一半。');
INSERT INTO `questions` VALUES ('4', '选择题', '1', 'int [] s=new int[3]；s数组中元素最大的下标值为（     ）;');
INSERT INTO `questions` VALUES ('4', '选择题', '2', 'int a[]={45,  4 ,  67,  23,  657,  787,  34,  52,  56}；数组中a[5]的值为（       ）；');
INSERT INTO `questions` VALUES ('4', '选择题', '3', 'int a[]={45, 4,  67, 23,  657,  787,  34,  52, 56}数组中，a . length的值为 （     ）；');
INSERT INTO `questions` VALUES ('4', '选择题', '4', 'int a[]=___  int [4]; 空格中正确的填空为  (     );');
INSERT INTO `questions` VALUES ('4', '选择题', '5', 'int a[]={13,45}, a=int b[],  其中b.length的值为（     ）;');
INSERT INTO `questions` VALUES ('4', '选择题', '6', '数组的下标最大为（      ）；');
INSERT INTO `questions` VALUES ('4', '选择题', '7', '定义一个数组，但未赋初值，系统会自动赋值，其值为（       ）；');
INSERT INTO `questions` VALUES ('4', '选择题', '8', ' int a=new int [__];a[0]=1;a[1]=4;a[2]=2; 空格中最小能够填的数据为     (       )');
INSERT INTO `questions` VALUES ('4', '选择题', '9', '阅读后面的程序：该程序运行的结果为  (         )\r\n    int a[]={13,45,67};\r\n int b[]=a;\r\n b[1]=23;\r\n for(int i=0;i<b.length;i++)\r\n System.out.print(b[i]);');
INSERT INTO `questions` VALUES ('4', '选择题', '10', 'int a []={34,56,67,78,36};    _ __=56; 请在下面选择空格处正确的填写为  (        )');
INSERT INTO `questions` VALUES ('4', '选择题', '11', '声明一个数组，____a[]=new String[3];  空格处应该填写的的内容为  (        )');
INSERT INTO `questions` VALUES ('4', '选择题', '12', '阅读本列代码：int a[]={12,34,  ,34,56};下面的描述错误的是(          )');
INSERT INTO `questions` VALUES ('4', '选择题', '13', '阅读本列代码：String a=new String[2],下面表达式正确的是（       ）；');
INSERT INTO `questions` VALUES ('4', '选择题', '14', '阅读本列代码：String[] a=new String[2]；a.length的值为（      ）;');
INSERT INTO `questions` VALUES ('4', '选择题', '15', '数组用什么方法进行比较（      ）');
INSERT INTO `questions` VALUES ('4', '选择题', '16', '用来访问数组中某特定元素的数据被称为（      ）');
INSERT INTO `questions` VALUES ('4', '选择题', '17', '(    )_表示一维数组units中的第三个元素。');
INSERT INTO `questions` VALUES ('4', '选择题', '18', '通过使用关键字（     ）可以创建一个数组');
INSERT INTO `questions` VALUES ('4', '选择题', '19', '数组元素之所以相关，是因为它们具有相同的（      ）');
INSERT INTO `questions` VALUES ('4', '选择题', '20', '数组的长度等于（    ）');
INSERT INTO `questions` VALUES ('4', '选择题', '21', '将数组中的元素按照某种特定顺序来排列的过程被称为数组的（       ）');
INSERT INTO `questions` VALUES ('4', '选择题', '22', '数组可以被声明为（       ）类型');
INSERT INTO `questions` VALUES ('4', '选择题', '23', '数组中的元素之所以是相互有联系的是，因为他们具有相同的名称和（          ）');
INSERT INTO `questions` VALUES ('4', '选择题', '24', '表达式（      ）可以返回数组arrayName的最大索引。');
INSERT INTO `questions` VALUES ('4', '选择题', '25', '设有定义语句 int  a[ ]={66,88,99}; 则以下对此语句的叙述错误的是（       ）');
INSERT INTO `questions` VALUES ('4', '选择题', '26', '数组（       ）');
INSERT INTO `questions` VALUES ('4', '选择题', '27', '使用两个索引的数组被称为（    ）');
INSERT INTO `questions` VALUES ('4', '选择题', '28', '能正确创建一个2行5列的int型数组的语句是（     ）');
INSERT INTO `questions` VALUES ('4', '选择题', '29', '在一个m*n的数组中，m 代表（           ）');
INSERT INTO `questions` VALUES ('4', '选择题', '30', '语句（        ）将把一个5行3列的数组赋值给一个int型二维数组变量myArray');
INSERT INTO `questions` VALUES ('4', '选择题', '31', '二维数组通常用来表示（         ）');
INSERT INTO `questions` VALUES ('4', '选择题', '32', '数组的一个局限性是 （       ）');
INSERT INTO `questions` VALUES ('4', '选择题', '33', '下面哪个语句正确地声明一个整型的二维数组？ (        )');
INSERT INTO `questions` VALUES ('4', '选择题', '34', '若已定义：int a[]={0,1,2,3,4,5,6,7,8,9};则对a数组元素正确的引用是（       ）');
INSERT INTO `questions` VALUES ('4', '选择题', '35', '在下述Java语言语句中,错误的创建数组的方法是 (         )');
INSERT INTO `questions` VALUES ('4', '选择题', '36', '为了定义三个整型数组 a1．a2．a3,下面声明正确的语句是（     ）');
INSERT INTO `questions` VALUES ('4', '选择题', '37', '在创建数组时，下列创建的方法中合法的是   （         ）');
INSERT INTO `questions` VALUES ('4', '选择题', '38', '下面哪条语句定义了5个元素的数组，其中正确的是（      ）');
INSERT INTO `questions` VALUES ('4', '选择题', '39', '执行完以下代码int [ ] x = new  int[25]；后，以下哪项说明是正确的（     ）');
INSERT INTO `questions` VALUES ('4', '选择题', '40', '设有定义 int[ ]  a=new  int[4]; ，a 的所有数组元素是（       ）');
INSERT INTO `questions` VALUES ('4', '选择题', '41', '已知：int[] a = new int[88];在下列给出的数组元素中，非法的是（      ）');
INSERT INTO `questions` VALUES ('4', '选择题', '42', '下面哪个选项正确地声明了一个字符串数组：(       )');
INSERT INTO `questions` VALUES ('5', '判断题', '1', '类体中private修饰的变量在本类中能访问，类生成的对象也能访问。(   )');
INSERT INTO `questions` VALUES ('5', '判断题', '2', '一个类中，只能拥有一个构造器方法。(   )');
INSERT INTO `questions` VALUES ('5', '判断题', '3', '抽象类中不可以有非抽象的方法。   （    ）');
INSERT INTO `questions` VALUES ('5', '判断题', '4', '如果将一个对象强制类型转换为一个不兼容的类型，将引发NullPointerException 异常。    （   ）');
INSERT INTO `questions` VALUES ('5', '判断题', '5', 'Java中Object类是最顶层的类。 （   ）');
INSERT INTO `questions` VALUES ('5', '判断题', '6', '程序在编译通过以后，仍然可能出现运行时错误和逻辑错误。   （   ）');
INSERT INTO `questions` VALUES ('5', '判断题', '7', ' 可以通过javac来运行一个Java Application。 （   ）');
INSERT INTO `questions` VALUES ('5', '判断题', '8', '可以在子类构造函数中通过this关键字调用基类的构造函数。   （   ）');
INSERT INTO `questions` VALUES ('5', '判断题', '9', 'Java语言是IBM公司设计的一种面向对象程序设计语言。（   ）');
INSERT INTO `questions` VALUES ('5', '判断题', '10', '一个Unicode字符占4个字节。 （   ）');
INSERT INTO `questions` VALUES ('5', '判断题', '11', '在循环语句中，使用continue;语句可以跳出循环。   （   ）');
INSERT INTO `questions` VALUES ('5', '判断题', '12', '在Java Application中如果没有定义main()方法，则程序不能编译。 （   ）');
INSERT INTO `questions` VALUES ('5', '判断题', '13', 'Java 语言的模块只有类。（     ）');
INSERT INTO `questions` VALUES ('5', '判断题', '14', '定义方法时方法名可以是任何标识符。（    ）');
INSERT INTO `questions` VALUES ('5', '判断题', '15', '方法体中至少有一条 return 语句。（   ）');
INSERT INTO `questions` VALUES ('5', '判断题', '16', '如果需要可以在方法中再声明一个方法。（   ）');
INSERT INTO `questions` VALUES ('5', '判断题', '17', '方法定义语句 void x( int a,int b ) { return (a-b); }是正确的。（   ）');
INSERT INTO `questions` VALUES ('5', '判断题', '18', '方法内定义的变量是可以在方法外使用的。（   ）');
INSERT INTO `questions` VALUES ('5', '判断题', '19', '只有直接调用自身的方法才叫递归方法。（   ）');
INSERT INTO `questions` VALUES ('5', '判断题', '20', 'Java 中允许两方法同名，只要它们参数的类型或个数不同就行。（   ）');
INSERT INTO `questions` VALUES ('5', '判断题', '21', '每个应用程序都必须要有 main 方法。 （    ）');
INSERT INTO `questions` VALUES ('5', '判断题', '22', '方法定义语句 float x( int a,int b ) { return (a-b); }是正确的。（    ）');
INSERT INTO `questions` VALUES ('5', '判断题', '23', '对象可以赋值，只要使用赋值号（等号）即可，相当于生成了一个各属性与赋值对象相同的新对象。（     ）');
INSERT INTO `questions` VALUES ('5', '判断题', '24', '有的类定义时可以不定义构造方法，所以构造方法不是必需的。（    ）');
INSERT INTO `questions` VALUES ('5', '填空题', '1', '通常用关键字_______来新建对象，通过类创建对象的基本格式为：_________________。');
INSERT INTO `questions` VALUES ('5', '填空题', '2', '通过类MyClass中的不含参数的构造方法，生成该类的一个对象obj，可通过以下语句实现_________________________。');
INSERT INTO `questions` VALUES ('5', '填空题', '3', '面向对象程序设计的主要特点是__________、________和________。');
INSERT INTO `questions` VALUES ('5', '填空题', '4', '构造方法是类中的一种特殊方法，它用来定义对象的____________。');
INSERT INTO `questions` VALUES ('5', '填空题', '5', '在Java程序中定义的类中包括有两种成员，分别是：_______、_______。');
INSERT INTO `questions` VALUES ('5', '填空题', '6', '用static修饰的方法，称为静态方法。它们不是对象的方法，而是整个类的方法。静态方法只能处理用关键字__________修饰的数据。');
INSERT INTO `questions` VALUES ('5', '填空题', '7', '列举三个常用类库的包、_________、________________和_______________。');
INSERT INTO `questions` VALUES ('5', '填空题', '8', 'Java中所有类都是类________的子类。');
INSERT INTO `questions` VALUES ('5', '填空题', '9', 'Java中类成员的限定词有以下几种：private、 public、 friendly、protected其中，_______的限定的范围最大。');
INSERT INTO `questions` VALUES ('5', '填空题', '10', '被关键字_________修饰的方法是不能被当前类的子类重新定义的方法。');
INSERT INTO `questions` VALUES ('5', '填空题', '11', 'JAVA程序的基本元素是________。');
INSERT INTO `questions` VALUES ('5', '填空题', '12', '________是JAVA语言中定义类时必须使用的关键字。');
INSERT INTO `questions` VALUES ('5', '填空题', '13', '定义在类中方法之外的变量称为_________。');
INSERT INTO `questions` VALUES ('5', '填空题', '14', '方法声明包括________和________两部分。');
INSERT INTO `questions` VALUES ('5', '填空题', '15', '方法头确定方法的________，形式参数的名字和_____、____的类型和绯闻限制。');
INSERT INTO `questions` VALUES ('5', '填空题', '16', '方法体 由包括在花括号内的声明部分和语句部分组成，描述方法的功能。');
INSERT INTO `questions` VALUES ('5', '填空题', '17', '类头定义的基本格式要求为________、________、__________和________。');
INSERT INTO `questions` VALUES ('5', '填空题', '18', '________是指Java程序通过规则引擎调用此规则包时，将数据存储在Java的类中，以对象的形式传入。');
INSERT INTO `questions` VALUES ('5', '填空题', '19', '在Java类对象的________中直接输入需要导入的类的完成类名。');
INSERT INTO `questions` VALUES ('5', '填空题', '20', '________是Java的核心内容，是用来创建对象的模板。');
INSERT INTO `questions` VALUES ('5', '填空题', '21', '类有两种基本成员是__________和_________。');
INSERT INTO `questions` VALUES ('5', '填空题', '22', '一个Java源文件就是由若干个_________构成的。');
INSERT INTO `questions` VALUES ('5', '填空题', '23', '______是抽象，而________是具体。');
INSERT INTO `questions` VALUES ('5', '填空题', '24', '对象的创建、创建对象的过程就是__________的过程');
INSERT INTO `questions` VALUES ('5', '填空题', '25', '对象的创建的步骤___________、___________及___________。');
INSERT INTO `questions` VALUES ('5', '填空题', '26', '使用new运算符实例化一个已经声明的');
INSERT INTO `questions` VALUES ('5', '填空题', '27', '实例化一个对象时，会同时调用类的构造方法对它进行______。');
INSERT INTO `questions` VALUES ('5', '填空题', '28', '类的________是特殊的类方法，它必须和类同名，并且不能有返回类型，也不能用void来标注。');
INSERT INTO `questions` VALUES ('5', '填空题', '29', '构造方法是具有特殊地位的方法，_______不可以调用构造方法。');
INSERT INTO `questions` VALUES ('5', '填空题', '30', '一个类中可以有多个');
INSERT INTO `questions` VALUES ('5', '填空题', '31', '类里面如果没有_______，系统会调用默认的构造方法，默认的构造方法是不带任何参数的。');
INSERT INTO `questions` VALUES ('5', '填空题', '32', '包主要来解决_________的问题。');
INSERT INTO `questions` VALUES ('5', '填空题', '33', '_______既是命名机制，又是可见度控制机制。');
INSERT INTO `questions` VALUES ('5', '填空题', '34', 'java语言的属性与方法的引用均使用_______运算符。');
INSERT INTO `questions` VALUES ('5', '填空题', '35', '定义类时通常使用关键字__________，_________，_________。');
INSERT INTO `questions` VALUES ('5', '填空题', '36', '写出成员变量的定义格式____________________________________________。');
INSERT INTO `questions` VALUES ('5', '填空题', '37', '对象的生命周期包括三个阶段________、_______、_______。');
INSERT INTO `questions` VALUES ('5', '填空题', '38', 'Java中类成员的访问控制符有以下几种、private, public，_______,________。其中，_________的限定的范围最大。');
INSERT INTO `questions` VALUES ('5', '填空题', '39', 'Java中所有类都是类____的子类。Applet类是系统类______类的子类，存在于______包中。');
INSERT INTO `questions` VALUES ('5', '填空题', '40', '按作用域分类，变量有局部变量、________、方法变量和异常处理参数。');
INSERT INTO `questions` VALUES ('5', '填空题', '41', 'JAVA语言通过接口支持__________继承，使类继承具有更灵活的扩展性。');
INSERT INTO `questions` VALUES ('5', '编程题', '1', '学生有姓名(name)和成绩(score)信息。成绩有科目(course)和分数(grade)信息。学生类的getResult方法显示输出成绩信息，setData方法实现初始化学生信息。编写学生类(Student)和成绩类(Score)，并测试。');
INSERT INTO `questions` VALUES ('5', '编程题', '2', ' 定义一个学生类，包含三个属性（学号，姓名，成绩）均为私有的，分别给这三个属性定义两个方法，一个设置它的值，另一个获得它的值。然后在一个测试类里试着调用。');
INSERT INTO `questions` VALUES ('5', '编程题', '3', '编写程序，模拟银行账户功能。要求如下、\r\n属性、账号、储户姓名、地址、存款余额、最小余额。方法、存款、取款、查询。根据用户操作显示储户相关信息。如存款操作后，显示储户原有余额、今日存款数额及最终存款余额；取款时，若最后余额小于最小余额，拒绝收款，并显示“至少保留余额XXX”');
INSERT INTO `questions` VALUES ('5', '编程题', '4', '编程实现、以电话Phone为父类（例、电话有本机号码、打电话、接电话等属性和功能，当然还有一些其它的特性），移动电话Mobilephone和固定电话Fixedphone为两个子类，并使移动电话实现接口、可移动Moveable。固定电话又有子类、无绳电话Cordlessphone。设计并定义这几个类，明确它们的继承关系，定义子类时给出子类有别于父类的新特性。');
INSERT INTO `questions` VALUES ('5', '编程题', '5', '声明测试类、声明Phone类的数组（含5个元素），生成五个对象存入数组、其中二个Phone类的对象、一个Mobilephone类的对象、一个Fixedphone类的对象和一个Cordlessphone类的对象，打印输出每个对象的某个成员变量。将一个父类的引用指向一个子类对象，用这个塑型后的对象来调用某个方法实现多态性。');
INSERT INTO `questions` VALUES ('5', '编程题', '6', '设计一个动物类，它包含动物的基本属性。例如名称、大小、重量等，并设计相应的动作，例如跑、跳、走等。');
INSERT INTO `questions` VALUES ('5', '编程题', '7', '设计一个长方形类，成员变量包括长和宽。类中有计算面积和周长的方法，并有相应的set方法和get方法设置和获得长和宽。编写测试类测试是否达到预定功能。要求使用自定义的包。');
INSERT INTO `questions` VALUES ('5', '编程题', '8', '创建一个People类，定义成员变量如编号、姓名、性别、年龄；定义成员方法“获得编号”、“获得姓名”、“获得年龄”等，再创建People类的对象。');
INSERT INTO `questions` VALUES ('5', '编程题', '9', '设计Point类用来定义平面上的一个点，用构造函数传递坐标位置。编写测试类，在该类中实现Point类的对象。');
INSERT INTO `questions` VALUES ('5', '编程题', '10', '编写程序说明静态成员和实例成员的区别。');
INSERT INTO `questions` VALUES ('5', '编程题', '11', '设计雇员Employee类，记录雇员的情况，包括姓名、年薪、受雇时间，要求定义MyDate类作为受雇时间，其中包括工作的年、月、日，并用相应的方法对Employee类进行设置。编写测试类测试Employee类。要求使用自己的包。');
INSERT INTO `questions` VALUES ('5', '编程题', '12', '编写一个学生的类，要求有姓名、年龄、兴趣、班级编号和一个教员类，要求有姓名、教授课程、专业方向、教龄，设计一个主方法，要求在主方法中调用这两个类。');
INSERT INTO `questions` VALUES ('5', '编程题', '13', '声明Patient类表示在门诊中的病人,此类对象应包括name(a string),sex(a char),age(an integer),weight(a float),allergies(a boolean).声明存取及修改方法.在一个单独的类中,声明测试方法,并生成两个patient对象,设置其状态并将信息显示在屏幕上。');
INSERT INTO `questions` VALUES ('5', '编程题', '14', '声明并测试一个负数类,其方法包括toString()及负数的加,减,乘运算。');
INSERT INTO `questions` VALUES ('5', '编程题', '15', '定义一Student类:包括姓名的属性值，Statics类:');
INSERT INTO `questions` VALUES ('5', '编程题', '16', '定义一个类，成员变量是String数组s，成员方法有s的setter和getter，显示s中使用字符串元素的方法。');
INSERT INTO `questions` VALUES ('5', '编程题', '17', '构造一个类来描述屏幕上的一个点，该类的构成包括点的x和y两个坐标，以及一些对点进行的操作，包括、取得点的坐标值，对点的坐标进行赋值，编写应用程序生成该类的对象并对其进行操作。');
INSERT INTO `questions` VALUES ('5', '编程题', '18', '用两个方法打印出 200 以内的全部素数（一个是 main()方法，一个是专门判定一个数是 否为素数的方法）。');
INSERT INTO `questions` VALUES ('5', '编程题', '19', '已知菲波那契数列的数学表达式为：\r\nfibonacci(n)=n,     n=0,1;  \r\nfibonacci(n)=fibonacci(n-1)+fibonacci(n-2),    n≥2；  \r\n用递归方法计算 Fibonacci序列，并打印出其前 15项的值。');
INSERT INTO `questions` VALUES ('5', '编程题', '20', '编写一个 Application，其中包含三个同名方法 mySqrt()，它们都只有一个参数，参数的 类型分别为 int 型、float 型和 double 型，它们的功能均为返回参数的平方根，返回值的类 型与参数的类型相同。在方法 main( ) 中调用上面的三个方法并输出结果。');
INSERT INTO `questions` VALUES ('5', '编程题', '21', '编程生产 100 个 1到 6 之间的随机数，统计 1到 6 每个数出现的概率。');
INSERT INTO `questions` VALUES ('5', '选择题', '1', '下面对方法的作用描述不正确的是：（        ）');
INSERT INTO `questions` VALUES ('5', '选择题', '2', '方法内定义的变量：（       ）');
INSERT INTO `questions` VALUES ('5', '选择题', '3', '方法的形参：（    ）');
INSERT INTO `questions` VALUES ('5', '选择题', '4', '方法的调用：（    ）');
INSERT INTO `questions` VALUES ('5', '选择题', '5', 'return 语句：(     )');
INSERT INTO `questions` VALUES ('5', '选择题', '6', 'void 的含义：（     ）');
INSERT INTO `questions` VALUES ('5', '选择题', '7', 'main()方法的返回类型是：（        ）');
INSERT INTO `questions` VALUES ('5', '选择题', '8', '方法重载所涉及的方法：（         ）');
INSERT INTO `questions` VALUES ('5', '选择题', '9', '下面关于类和对象之间关系的描述，正确的是（       ）');
INSERT INTO `questions` VALUES ('5', '选择题', '10', '下面关于java中类的说法哪个是不正确的（       ）');
INSERT INTO `questions` VALUES ('5', '选择题', '11', '下列哪个类声明是正确的(        )');
INSERT INTO `questions` VALUES ('5', '选择题', '12', '下面的方法声明中，哪个是正确的（      ）');
INSERT INTO `questions` VALUES ('5', '选择题', '13', '下述哪些说法是不正确的？（      ）');
INSERT INTO `questions` VALUES ('5', '选择题', '14', '下面对构造方法的描述不正确是(        )。');
INSERT INTO `questions` VALUES ('5', '选择题', '15', '定义类头时，不可能用到的关键字是(      )。');
INSERT INTO `questions` VALUES ('5', '选择题', '16', '下列类头定义中，错误的是(       )。');
INSERT INTO `questions` VALUES ('5', '选择题', '17', '设 A为已定义的类名，下列声明A类的对象a的语句中正确的是 (      ) 。');
INSERT INTO `questions` VALUES ('5', '选择题', '18', '设i , j为类X中定义的int型变量名，下列X类的构造方法中不正确的是 (     )。');
INSERT INTO `questions` VALUES ('5', '选择题', '19', '有一个类A，以下为其构造方法的声明，其中正确的是(       )。');
INSERT INTO `questions` VALUES ('5', '选择题', '20', '下列方法定义中，不正确的是(      )。');
INSERT INTO `questions` VALUES ('5', '选择题', '21', '设i , j为类X中定义的double型变量名，下列X类的构造方法中不正确的是(  A   )。');
INSERT INTO `questions` VALUES ('5', '选择题', '22', '设 ClassA为已定义的类名，下列声明Class A类的对象ca的语句\r\n中正确的是(      )。\r\n A、public ClassA ca=new ClassA( );     B、 public  ClassA  ca=ClassA( );\r\n C、 Class');
INSERT INTO `questions` VALUES ('5', '选择题', '23', '设m , n为类A中定义的int型变量名，下列A类的构造方法中不正确的是(      )。');
INSERT INTO `questions` VALUES ('5', '选择题', '24', '设i、j、k为类School中定义的int型变量名，下列类School的构造方法中不正确的是(      )。');
INSERT INTO `questions` VALUES ('5', '选择题', '25', '下列选项中，哪个是java语言所有类的父类(      )');
INSERT INTO `questions` VALUES ('5', '选择题', '26', 'Java中所有的类都是通过直接或间接地继承（   ）类得到的。（      ）');
INSERT INTO `questions` VALUES ('5', '选择题', '27', '对于任意一个类，用户所能定义的构造方法的个数至多为（    ）。');
INSERT INTO `questions` VALUES ('5', '选择题', '28', '构造方法何时被调用（     ）');
INSERT INTO `questions` VALUES ('5', '选择题', '29', '类Test1定义如下  public class Test1{  public float aMethod（float a，float b）{ }  （   ） }  将以下哪种方法插入（ ）是不合法的。（        ）');
INSERT INTO `questions` VALUES ('5', '选择题', '30', '用来导入已定义好的类或包的语句是（     ）');
INSERT INTO `questions` VALUES ('5', '选择题', '31', '类是具有相同（    ）的集合，是对对象的抽象描述。（     ）');
INSERT INTO `questions` VALUES ('5', '选择题', '32', '一个对象的生命周期分（   ）3个阶段。（    ）');
INSERT INTO `questions` VALUES ('5', '选择题', '33', '以下（ ）是专门用于创建对象的关键字。（        ）');
INSERT INTO `questions` VALUES ('5', '选择题', '34', '表达式（ ）将返回当前的系统时间和日期 （      ）');
INSERT INTO `questions` VALUES ('5', '选择题', '35', '（）为程序员提供了一些可完成通用任务的现有类  （     ）');
INSERT INTO `questions` VALUES ('5', '选择题', '36', '程序员通常会使用（         ）');
INSERT INTO `questions` VALUES ('5', '选择题', '37', '利用方法中的（） 语句可为调用方法返回一个值（      ）');
INSERT INTO `questions` VALUES ('5', '选择题', '38', '（ ）方法用做返回两个参数中的较大值（      ）');
INSERT INTO `questions` VALUES ('5', '选择题', '39', '（  ）将被传送至一个被调用的方法（    ）');
INSERT INTO `questions` VALUES ('5', '选择题', '40', '方法的参数可以是（      ）');
INSERT INTO `questions` VALUES ('5', '选择题', '41', '（）是位于方法头中的一个以逗号分隔的声明列表（      ）');
INSERT INTO `questions` VALUES ('5', '选择题', '42', '方法的定义是由（ ）组成的（      ）');
INSERT INTO `questions` VALUES ('5', '选择题', '43', '一个（ ）对象将包括int型数据（      ）');
INSERT INTO `questions` VALUES ('5', '选择题', '44', '在方法调用过程中。位于方法名之后圆括号的变量被称为（     ）');
INSERT INTO `questions` VALUES ('5', '选择题', '45', '一条return语句将给调用程序返回（）个值（      ）');
INSERT INTO `questions` VALUES ('5', '选择题', '46', '方法的第一行被称为方法的（      ）');
INSERT INTO `questions` VALUES ('5', '选择题', '47', '实例变量的作用域整个的(        )');
INSERT INTO `questions` VALUES ('5', '选择题', '48', '在某个方法内部定义的变量被称为（      ）');
INSERT INTO `questions` VALUES ('5', '选择题', '49', '在一个类的内部声明，但又处于该类方法外部的变量被称为（     ）');
INSERT INTO `questions` VALUES ('5', '选择题', '50', '从定义局部变量语句的外部访问该局部变量，会导致（）出现 （     ）');
INSERT INTO `questions` VALUES ('5', '选择题', '51', '实例变量（       ）');
INSERT INTO `questions` VALUES ('5', '选择题', '52', '当方法内传递一个参数时，将该参数值的一个拷贝传递给方法的传递方式称为（      ）');
INSERT INTO `questions` VALUES ('5', '选择题', '53', '当一个变量在应用程序的整个生命周期中被使用，且整个过程中的其他值也不能被改变时，那么将他声明为一个（       ）');
INSERT INTO `questions` VALUES ('5', '选择题', '54', '关键字（）表示一个类定义的开始（      ）');
INSERT INTO `questions` VALUES ('5', '选择题', '55', '类的定义必须包含在一对（）内（     ）');
INSERT INTO `questions` VALUES ('5', '选择题', '56', '实例变量的初始化（     ）');
INSERT INTO `questions` VALUES ('5', '选择题', '57', '某个方法，在保证参数值有效性的前提下设置其实例变量number，该方法的方法名最好取（        ）');
INSERT INTO `questions` VALUES ('5', '选择题', '58', '某个方法，在保证参数值有效性的前提下获取其实例变量number，该方法的方法名最好取（      ）');
INSERT INTO `questions` VALUES ('5', '选择题', '59', '通过使用关键字（）创建对象（    ）');
INSERT INTO `questions` VALUES ('5', '选择题', '60', '参照以下Java代码，以下四个叙述中最确切的是（    ）\r\nclass A{\r\nint x; static int y;\r\nvoid fac(String s){System. out. println(＂字符串:＂+s);}\r\n}');
INSERT INTO `questions` VALUES ('5', '选择题', '61', '下列关于变量作用域的描述中，不正确的一项是 (        )');
INSERT INTO `questions` VALUES ('5', '选择题', '62', '下列关于变量作用域的说法中，正确的一项是  (       )');
INSERT INTO `questions` VALUES ('5', '选择题', '63', 'System类在哪个包中?（       ）');
INSERT INTO `questions` VALUES ('5', '选择题', '64', '给出下面代码段    1) public class Test {    2) int m, n;    3) public Test() {}    4) public Test(int a) { m=a; }    5) public static void main(String arg[]) {    6) Test t1,t2;    7) int j,k;    8) j=0; k=0;    9) t1=new Test();    10) t2=new Test(j,k);    11) }    12) }   哪行将引起一个编译时错误？ （      ）');
INSERT INTO `questions` VALUES ('5', '选择题', '65', '对于下列代码、   1) class Person {    2) public void printValue(int i, int j) {//... }    3) public void printValue(int i){//... }   4) }    5) public class  Teacher extends Person {    6) public void printValue() {//... }    7) public void printValue(int i) {//...}    8) public static void main(String args[]){    9) Person t = new Teacher();\r\n  10) t.printValue(10);    11) }    第10行语句将调用哪行语句？（         ）');
INSERT INTO `questions` VALUES ('5', '选择题', '66', '下列关于构造方法的说话正确的是（    ）');
INSERT INTO `questions` VALUES ('5', '选择题', '67', '下列语句中，对构造方法的描述错误的是（      ）');
INSERT INTO `questions` VALUES ('5', '选择题', '68', '下面关于java中类的说法哪个是不正确的（      ）');
INSERT INTO `questions` VALUES ('5', '选择题', '69', '下列哪个 不是 面向对象的三大特性之一（      ）');
INSERT INTO `questions` VALUES ('5', '选择题', '70', '下面哪种语言 不是 面向对象语言 ? (       )');
INSERT INTO `questions` VALUES ('5', '选择题', '71', '在创建对象时 必须（      ）');
INSERT INTO `questions` VALUES ('5', '选择题', '72', '以下叙述不正确的是（     ）');
INSERT INTO `questions` VALUES ('6', '判断题', '1', '一个接口不可以继承其他接口。（     ）');
INSERT INTO `questions` VALUES ('6', '判断题', '2', '一个类可以实现抽象类的所有方法，也可以只实现部分方法，但实现部分方法的类仍然是一个抽象类。（  ）');
INSERT INTO `questions` VALUES ('6', '判断题', '3', '在实现接口的时候，要实现接口的所有方法。（   ）');
INSERT INTO `questions` VALUES ('6', '判断题', '4', '抽象方法必须在抽象类中，所以抽象类中的方法都必须是抽象方法。（      ）');
INSERT INTO `questions` VALUES ('6', '判断题', '5', 'final 类中的属性和方法都必须被 final 修饰符修饰。（      ）');
INSERT INTO `questions` VALUES ('6', '判断题', '6', '最终类不能派生子类，最终方法不能被覆盖。（      ）');
INSERT INTO `questions` VALUES ('6', '判断题', '7', '子类要调用父类的方法，必须使用 super 关键字。（      ）');
INSERT INTO `questions` VALUES ('6', '判断题', '8', '一个 Java 类可以有多个父类。（     ）');
INSERT INTO `questions` VALUES ('6', '判断题', '9', '如果 p 是父类 Parent 的对象，而 c 是子类 Child 的对象，则语句 c = p 是正确的。（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '10', '一个类如果实现了某个接口，那么它必须覆盖该接口中的所有方法。（      ）');
INSERT INTO `questions` VALUES ('6', '判断题', '11', '接口是特殊的类，所以接口也可以继承，子接口将继承父接口的所有常量和抽象方法。（  ）');
INSERT INTO `questions` VALUES ('6', '判断题', '12', '接口其实是一个特殊的 abstract class。（   ）');
INSERT INTO `questions` VALUES ('6', '判断题', '13', '所谓数据封装就是将一组数据和与这一组数据有关的操作组装在一起，形成一个实体，这个实体也就是对象（     ）。');
INSERT INTO `questions` VALUES ('6', '判断题', '14', '静态初始化器是构造方法加上static 修饰符。（      ）');
INSERT INTO `questions` VALUES ('6', '判断题', '15', '在定义一个类的时候，若想让类中的成员不能在类的外部访问，则必须在成员前面加上private修饰符。（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '16', '类的静态成员所属于类所有，实例成员属于对象所有。(     )');
INSERT INTO `questions` VALUES ('6', '判断题', '17', '外部类能访问static变量(        )');
INSERT INTO `questions` VALUES ('6', '判断题', '18', '抽象类中不可以有非抽象的方法。   （      ）');
INSERT INTO `questions` VALUES ('6', '判断题', '19', '程序在编译通过以后，仍然可能出现运行时错误和逻辑错误。   （     ）');
INSERT INTO `questions` VALUES ('6', '判断题', '20', '可以在子类构造方法中通过this关键字调用基类的构造方法。   （      ）');
INSERT INTO `questions` VALUES ('6', '判断题', '21', '由于Java 中类只支持单重继承，所以一个类只能继承一个抽象类和实现一个接口。（     ）');
INSERT INTO `questions` VALUES ('6', '判断题', '22', '内部类始终可以访问外部类。（     ）');
INSERT INTO `questions` VALUES ('6', '判断题', '23', '对于一个抽象类，改变它的属性和方法一定会改变它所有子类的属性和方法。（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '24', '对象可以赋值，只要使用赋值号（等号）即可，相当于生成了一个各属性与赋值对象相同的新对象（   ）');
INSERT INTO `questions` VALUES ('6', '判断题', '25', '有的类定义时可以不定义构造方法，所以构造方法不是必需的(   )');
INSERT INTO `questions` VALUES ('6', '判断题', '26', '类及其属性、方法可以同时有一个以上的修饰符来修饰。(     )');
INSERT INTO `questions` VALUES ('6', '判断题', '27', '抽象方法必须在抽象类中，所以抽象类中的方法都必须是抽象方法   (      )');
INSERT INTO `questions` VALUES ('6', '判断题', '28', '超类对象的集合通常比它的任何一个子类对象集合大。（     ）');
INSERT INTO `questions` VALUES ('6', '判断题', '29', '子类可以从多个超类中派生出来。（     ）');
INSERT INTO `questions` VALUES ('6', '判断题', '30', 'Java 中的类和接口都只支持单重继承。（     ）');
INSERT INTO `questions` VALUES ('6', '判断题', '31', 'Java程序里,创建新的类对象用关键字new，回收无用的类对象使用关键字free。 （      ）');
INSERT INTO `questions` VALUES ('6', '判断题', '32', '由继承性可知，程序中子类拥有的成员数目一定大于等于父类拥有的成员数目。 （    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '33', 'Java中Object类是最顶层的类。 （   ）');
INSERT INTO `questions` VALUES ('6', '判断题', '34', '可以在子类构造函数中通过this关键字调用基类的构造函数。   （     ）');
INSERT INTO `questions` VALUES ('6', '判断题', '35', '子类只能继续父类的非私有属性，不能继续父类的方法（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '36', '子类能直接继续父类所有的非私有属性，也可通过接口继续父类的私有属性（     ）');
INSERT INTO `questions` VALUES ('6', '判断题', '37', '抽象，封装，继承，多态是面向对象程序设计中得四个特点（     ）.');
INSERT INTO `questions` VALUES ('6', '判断题', '38', '面向对象程序设计方法的优点是、可重用性，可扩展性，可管理性（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '39', 'class前的修饰符分为访问控制符和非访问控制符两大类.访问控制符包括public和private. （     ）');
INSERT INTO `questions` VALUES ('6', '判断题', '40', 'final类是最终类，是能有子类的类，abstract和final不能同时修饰一个类，因为抽象类本身没有具体对象（     ）');
INSERT INTO `questions` VALUES ('6', '判断题', '41', '创建对象的格式为： 类名 对象名=new 构造方法(参数);注意前面是类名后面是构造方法名。（     ）');
INSERT INTO `questions` VALUES ('6', '判断题', '42', '构造方法没有返回类型，也不能写void，主要用于完成类对象的初始化工作，一般不能直接编程（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '43', '如果class前面有public修饰符，则默认构造方法的前面也应该有public 修饰符. （    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '44', '类中有static修饰的域或方法，可用类名或对象名访问。 （     ）');
INSERT INTO `questions` VALUES ('6', '判断题', '45', '类变量的最本质的特点是，他们是类的域，不属于任何一个类的具体对象实例，不是保存在某个对象实例的内存空间中，而是保存在类的内存区域的公共存储单元中。 （    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '46', '用static修饰的变量或方法都为类成员，类成员可以用类名或实例名访问，实例成员只能用实例名来访问。（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '47', '如果一个类中含有抽象方法，则此类必须为抽象类，如果抽象类的子类不为抽象类，则子类必须实现父类的所有抽象方法。（   ）');
INSERT INTO `questions` VALUES ('6', '判断题', '48', 'this变量用在一个方法的内部，指向当前对象，当前对象指的是调用当前正在执行的方法的那个对象。super变量是直接指向父类的构造方法，用来引用父类中的变量和方法。由于他们指的是对象，所以不能通过它来引用类变量和类方法（   ）');
INSERT INTO `questions` VALUES ('6', '判断题', '49', '访问修饰符、类中限定为public的成员可以被所有的类访问。（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '50', '类中限定为protected的成员可以被这个类本身，它的子类(包括同一个包中和不同包中的子类)，以及同一个包中的其他类访问。（   ）');
INSERT INTO `questions` VALUES ('6', '判断题', '51', 'abstract和private，static，final，native能并列修饰同一个方法。（      ）');
INSERT INTO `questions` VALUES ('6', '判断题', '52', 'abstract类中不能有private修饰的域和方法（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '53', 'abstract修饰符可修饰字段、方法和类（     ）');
INSERT INTO `questions` VALUES ('6', '判断题', '54', '在类方法中可用this来调用本类的类方法（      ）');
INSERT INTO `questions` VALUES ('6', '判断题', '55', '在类方法中调用本类的类方法时可直接调用（   ）');
INSERT INTO `questions` VALUES ('6', '判断题', '56', ' 在类方法中只能调用本类中的类方法（     ）');
INSERT INTO `questions` VALUES ('6', '判断题', '57', ' 在类方法中绝对不能调用实例方法（     ）');
INSERT INTO `questions` VALUES ('6', '判断题', '58', 'Java面向对象语言容许单独的过程与函数存在（     ）');
INSERT INTO `questions` VALUES ('6', '判断题', '59', 'Java面向对象语言容许单独的方法存在（   ）');
INSERT INTO `questions` VALUES ('6', '判断题', '60', 'Java语言中的方法必定隶属于某一类（对象），调用方法与过程或函数相同（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '61', 'Java程序中的起始类名称必须与存放该类的文件名相同。（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '62', '数组是一种对象（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '63', '数组属于一种原生类（       ）');
INSERT INTO `questions` VALUES ('6', '判断题', '64', 'constructor必须与class同名，但方法不能与class同名（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '65', 'Java的类分为两大量、系统定义的类和用户自定义的类（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '66', '类的静态属性和全局变量的概念完全一样，只是表达形式不同（   ）');
INSERT INTO `questions` VALUES ('6', '判断题', '67', '类的成员至少有一个属性和一个方法（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '68', '类是对象的实例化（      ）');
INSERT INTO `questions` VALUES ('6', '判断题', '69', '一个类的构造方法可以有多个（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '70', '子类不能继续父类的私有属性  （     ）');
INSERT INTO `questions` VALUES ('6', '判断题', '71', ' 构造方法只能由对象中的其它方法调用（      ）');
INSERT INTO `questions` VALUES ('6', '判断题', '72', '构造方法可以用于给类的 private 实例变量赋值。（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '73', '对象一经声明就可以立即使用。（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '74', '在定义变量和方法时，必须清楚地在其面前标上访问权限修饰符。（   ）');
INSERT INTO `questions` VALUES ('6', '判断题', '75', 'Java 程序中的参数传递都是把参数值传递给方法定义中的参数。（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '76', '在类定义中，成员访问权限修饰符不能多次出现。（   ）');
INSERT INTO `questions` VALUES ('6', '判断题', '77', 'new 操作符动态地为对象按其指定的类型分配内存，并返回该类型的一个引用。（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '78', '类的方法通常设为 public，而类的实例变量一般也设为 public。（   ）');
INSERT INTO `questions` VALUES ('6', '判断题', '79', '构造方法在创建对象时被调用。（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '80', '通过点运算符与类对象的引用相连，可以访问此类的成员。（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '81', '声明为 protected 的类成员只能被此类中的方法访问。（   ）');
INSERT INTO `questions` VALUES ('6', '判断题', '82', '同一个类的对象使用不同的内存段，但静态成员共享相同的内存空间。（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '83', '类的成员变量可以放在类体的任意位置。（   ）');
INSERT INTO `questions` VALUES ('6', '判断题', '84', '声明为 protected 的类成员可以被此类作用域中的任何对象访问。（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '85', '没有返回值的方法可以用 void 来表示，也可以不加。（   ）');
INSERT INTO `questions` VALUES ('6', '判断题', '86', '不需要定义类，就能创建对象。（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '87', '在子类中可以用完全相同的 signature 重新定义一个超类方法，这称为方法的覆盖  （override）。（   ）');
INSERT INTO `questions` VALUES ('6', '判断题', '88', 'final 修饰的方法是不能被子类覆盖的，只能被覆盖。（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '89', '声明为 final的类不能是超类。（   ）');
INSERT INTO `questions` VALUES ('6', '判断题', '90', '当一个超类成员不适合该子类时，子类会以恰当的方式重新定义它。（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '91', '对子类实例化对象需要调用超类的构造函数进行初始化工作， 完成对子类中的超类实例变量 的初始化，则子类可以继承超类的构造函数。（   ）');
INSERT INTO `questions` VALUES ('6', '判断题', '92', '在类的定义中如果不明确给出超类，那么默认超类就是 Object 类。（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '93', 'protected 类型的实例变量或方法只能由声明该变量或方法的类本身及其子类访问。（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '94', 'Java 的每个子类的构造函数都要显式的调用它的直接超类的构造函数。（   ）');
INSERT INTO `questions` VALUES ('6', '判断题', '95', '抽象方法不能是静态方法和最终方法。（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '96', '抽想方法只有方法头的声明，而用分号来替代方法体，没有大括号。（    ）');
INSERT INTO `questions` VALUES ('6', '判断题', '97', '如果存储空间十分宝贵，应使用 Vector 类的 trimToSize 方法将 Vector 调整到准确的大小。（     ）');
INSERT INTO `questions` VALUES ('6', '判断题', '98', 'Java 的 Vector类提供了能自动调整大小的类似数组的数据结构。（   ）');
INSERT INTO `questions` VALUES ('6', '判断题', '99', '创建 Vector 对象时构造方法给定的是其中可以包容的元素个数，使用中应注意不能超越这个数值。（      ）');
INSERT INTO `questions` VALUES ('6', '判断题', '100', '一个Applet编译后的类名是Test.class，运行此小程序的命令是Java Test （       ）');
INSERT INTO `questions` VALUES ('6', '判断题', '101', '接口中的所有方法都没有被实现 （      ）');
INSERT INTO `questions` VALUES ('6', '判断题', '102', '实现一个接口，则在类中一定要实现接口中的所有方法。 （      ）');
INSERT INTO `questions` VALUES ('6', '判断题', '103', '类体中private修饰的变量在本类中能访问，类生成的对象也能访问。 （      ）');
INSERT INTO `questions` VALUES ('6', '判断题', '104', '抽象类不能实例化 （      ）');
INSERT INTO `questions` VALUES ('6', '判断题', '105', '一个方法最多能有一个return语句 （      ）');
INSERT INTO `questions` VALUES ('6', '判断题', '106', '在Java程序中，通过类的定义只能实现单重继承 （      ）');
INSERT INTO `questions` VALUES ('6', '判断题', '107', '类A和类B位于同一个包中，则除了私有成员，类A可以访问类B的所有其他成员 （     ）');
INSERT INTO `questions` VALUES ('6', '判断题', '108', '一个类中，只能拥有一个构造器方法 （     ）');
INSERT INTO `questions` VALUES ('6', '判断题', '109', '可以用new来创建一个类的实例，即\"对象\"。（     ）');
INSERT INTO `questions` VALUES ('6', '判断题', '110', '类的public类型的成员变量不可以被继承。（      ）');
INSERT INTO `questions` VALUES ('6', '判断题', '111', '子类可以继承父类所有的成员变量及成员函数。（      ）');
INSERT INTO `questions` VALUES ('6', '判断题', '112', 'Java类中不能存在同名的两个成员函数。（     ）');
INSERT INTO `questions` VALUES ('6', '判断题', '113', '对象是类的一个实例。 （     ）');
INSERT INTO `questions` VALUES ('6', '判断题', '114', '类的public类型的成员变量不可以被继承。（      ）');
INSERT INTO `questions` VALUES ('6', '填空题', '1', '方法重载实现多态时，要求____________、_________、__________三个中的一个必须不同。');
INSERT INTO `questions` VALUES ('6', '填空题', '2', '在Java语言中， 仅支持类间的_________继承。');
INSERT INTO `questions` VALUES ('6', '填空题', '3', '抽象方法只有________，没有__________的方法。');
INSERT INTO `questions` VALUES ('6', '填空题', '4', '面向对象程序设计语言的三大特征是________、________和_________。');
INSERT INTO `questions` VALUES ('6', '填空题', '5', '用于创建类实例对象关键字是_________。');
INSERT INTO `questions` VALUES ('6', '填空题', '6', 'JAVA中类成员的限定词有以下几种、private ,public ,____________，__________其中，____________的限定范围最大。');
INSERT INTO `questions` VALUES ('6', '填空题', '7', '被关键字__________修饰符的方法是不能被当前类的子类重新定义的方法');
INSERT INTO `questions` VALUES ('6', '填空题', '8', '创建类的对象时，使用运算符_____________给对象分配类存空间');
INSERT INTO `questions` VALUES ('6', '填空题', '9', 'JAVA中所有类都是类____________的子类');
INSERT INTO `questions` VALUES ('6', '填空题', '10', '定义类的构造方法不能有返回值类型，其名称与________名相同');
INSERT INTO `questions` VALUES ('6', '填空题', '11', '接口中的成员只有静态常量和___________。');
INSERT INTO `questions` VALUES ('6', '填空题', '12', '在子类中使用关键字_________做前缀可以调用被子类覆盖的父类中的方法');
INSERT INTO `questions` VALUES ('6', '填空题', '13', '关键字________用于导入包中的类到程序中，供程序使用');
INSERT INTO `questions` VALUES ('6', '填空题', '14', '__________方法是一种仅有方法头，没有具体方法体和操作实现的方法，该方法必须在抽象类之中定义.________方法是不能被当前类的子类重新定义的方法');
INSERT INTO `questions` VALUES ('6', '填空题', '15', '在Java程序中，通过类的定义只能实现___________重继承，但通过接口的定义可以实现__________重继承关系。');
INSERT INTO `questions` VALUES ('6', '填空题', '16', '当类未用访问权限修饰符（public 或private）修饰时，java语言默认此类的访问权限是______________');
INSERT INTO `questions` VALUES ('6', '填空题', '17', '类是一组同种对象集合与抽象。即是具有相同_______和_______的一组对象集合。');
INSERT INTO `questions` VALUES ('6', '填空题', '18', '一个类可以派生出_______子类，但只允许有______个父类，而不允许存在______个父类。');
INSERT INTO `questions` VALUES ('6', '填空题', '19', '在Java中有两种方法实现多态，一种是使用方法的______实现多态，另一种是使用方法的_____实现多态。');
INSERT INTO `questions` VALUES ('6', '填空题', '20', 'Java中定义类必须使用关键字_____作为标志，用___________关键字声明该类将要实现哪些接口。');
INSERT INTO `questions` VALUES ('6', '填空题', '21', '在java语言中通过________方法实现多继承问题。');
INSERT INTO `questions` VALUES ('6', '填空题', '22', '接口是一种特殊的类，它只能定义_______________________。');
INSERT INTO `questions` VALUES ('6', '填空题', '23', '调用应用包中类的两种方法是________________、____________和______________。');
INSERT INTO `questions` VALUES ('6', '填空题', '24', 'java语言异常处理三种方式是________、_______、_________。');
INSERT INTO `questions` VALUES ('6', '填空题', '25', '在java语言中中，用（try catch final）结构来捕获异常。在接口声明变量时，其变量在缺省状况下就是__________、____________和_________。');
INSERT INTO `questions` VALUES ('6', '填空题', '26', '对于接口的实现，不可以构造一个接口对象，但可以声明一个接口__________。');
INSERT INTO `questions` VALUES ('6', '填空题', '27', '在JAVA语言中，所有的类都是直接或间接继承_________类而得到的。');
INSERT INTO `questions` VALUES ('6', '填空题', '28', '多态是指____________________________。');
INSERT INTO `questions` VALUES ('6', '填空题', '29', '如果子类中的某个变量的变量名与它的父类中的某个变量完全一样，则称子类中的这个变量________了父类的同名变量。');
INSERT INTO `questions` VALUES ('6', '填空题', '30', '属性的隐藏是指子类重新定义从父类继承来的___________。');
INSERT INTO `questions` VALUES ('6', '填空题', '31', '如果子类中的某个方法的名字、返回值类型和_________与它的父类中的某个方法完全一样，则称子类中的这个方法覆盖了父类的同名方法。');
INSERT INTO `questions` VALUES ('6', '填空题', '32', '同一类中的不同对象具有相同的____________和________。');
INSERT INTO `questions` VALUES ('6', '填空题', '33', 'java.lang.String类的访问修饰符权限是________类型的。');
INSERT INTO `questions` VALUES ('6', '填空题', '34', 'java 语言的接口是特殊的类，其中包含________常量和________方法。');
INSERT INTO `questions` VALUES ('6', '填空题', '35', '_如果接口中定义了一个方法methodA()，一个属性attA，那么一个类ClassA要实现这个接口的话，就必须实现其中的__________方法。');
INSERT INTO `questions` VALUES ('6', '填空题', '36', '一个类如果实现一个接口，那么它就必须实现接口中定义的所有方法，否则该类就必须定义成_______的。');
INSERT INTO `questions` VALUES ('6', '填空题', '37', '_Java 仅支持类间的单重继承，接口可以弥补这个缺陷，支持______继承');
INSERT INTO `questions` VALUES ('6', '填空题', '38', '_在方法头用abstract修饰符进行修饰的方法叫做_________方法。');
INSERT INTO `questions` VALUES ('6', '填空题', '39', 'Java语言中用于表示类间继承的关键字是____________。');
INSERT INTO `questions` VALUES ('6', '填空题', '40', 'Java语言中，表示一个类不能再被继承的关键字是_________。');
INSERT INTO `questions` VALUES ('6', '填空题', '41', '创建类的对象时，使用运算符______________给对象分配内存空间。');
INSERT INTO `questions` VALUES ('6', '填空题', '42', '同一个类中多个方法具有相同的方法名，不同的______________称为方法的重载。');
INSERT INTO `questions` VALUES ('6', '填空题', '43', '通过类MyClass中的不含参数的构造方法，生成该类的一个对象obj，可通过以下语句实现');
INSERT INTO `questions` VALUES ('6', '填空题', '44', '在java的接口中声明的成员变量全部是_____，声明的方法是___________。');
INSERT INTO `questions` VALUES ('6', '填空题', '45', '类及其_______、________可以同时有一个以上的修饰符来修饰。');
INSERT INTO `questions` VALUES ('6', '填空题', '46', '一个Java类可以有_______个父类。');
INSERT INTO `questions` VALUES ('6', '填空题', '47', '关于被私有保护访问控制符private protected修饰的成员变量， 可以被两种类来引用______、');
INSERT INTO `questions` VALUES ('6', '填空题', '48', 'abstract类中不可以有_______的成员');
INSERT INTO `questions` VALUES ('6', '填空题', '49', 'abstract方法必须在________类中');
INSERT INTO `questions` VALUES ('6', '填空题', '50', '_int是java的________，Integer是java为int提供的封装类');
INSERT INTO `questions` VALUES ('6', '填空题', '51', '如果源文件包含import语句，则该语句必须是_______和_______外的第一个语句行。');
INSERT INTO `questions` VALUES ('6', '填空题', '52', '如果某源文件包含package语句，则该语句必须是_______非空、非注释行。');
INSERT INTO `questions` VALUES ('6', '填空题', '53', '接口中的方法必定是______方法，但可以不用关键字________修饰。');
INSERT INTO `questions` VALUES ('6', '填空题', '54', '在接口的定义中，定义的变量的修饰符是____________， 定义的方法修饰符是________________。');
INSERT INTO `questions` VALUES ('6', '填空题', '55', '接口中的成员只有静态常量和_______。');
INSERT INTO `questions` VALUES ('6', '填空题', '56', '为AB类的一个无形参数无返回值的方法method书写方法头，使得使用类名AB作为前缀就可以调用它，该方法头的形式为_____________。');
INSERT INTO `questions` VALUES ('6', '填空题', '57', '定义接口的关键字是_______，定义最终类的关键字是______，定义抽象类的关键字是__________。');
INSERT INTO `questions` VALUES ('6', '填空题', '58', '表示数据或方法可以被同一包中的任何类或它的子类访问，即使子类在不同的包中也可以的修饰符是________');
INSERT INTO `questions` VALUES ('6', '填空题', '59', '表示数据或方法只能被本类访问的修饰符是________');
INSERT INTO `questions` VALUES ('6', '填空题', '60', '接口中方法的默认可见性修饰符是________');
INSERT INTO `questions` VALUES ('6', '填空题', '61', '为了区分类中重载的同名的不同方法，要求________');
INSERT INTO `questions` VALUES ('6', '填空题', '62', '当浏览器终止Applet时，_____________函数被调用。');
INSERT INTO `questions` VALUES ('6', '填空题', '63', '有abstract 方法的类一定是_________或_________。');
INSERT INTO `questions` VALUES ('6', '填空题', '64', '带_______________的类不能继承。');
INSERT INTO `questions` VALUES ('6', '填空题', '65', '一个类中可以使用不包含在任何方法体中的静态代码块 当类被载入时 静态代码块被执行 且只被执行__________次。');
INSERT INTO `questions` VALUES ('6', '填空题', '66', '引用父类中的成员变量用____________；引用当前的类或对象用_______。');
INSERT INTO `questions` VALUES ('6', '填空题', '67', 'Vector类是JAVA中专门负责处理对象元素有序存储和任意增删的类，因此，用Vector__可以快速实现JAVA的_________类。');
INSERT INTO `questions` VALUES ('6', '填空题', '68', '栈（Stack）是限制仅在表的一端进行插入和删除运算的__________。');
INSERT INTO `questions` VALUES ('6', '填空题', '69', '_LinkedList数据结构是一种____________结构，每一个对象除了数据本身外，还有两个引用，分别指向前一个元素和后一个元素，和数组的顺序存储结构（如、ArrayList）相比，插入和删除比较方便，但速度会慢一些。');
INSERT INTO `questions` VALUES ('6', '编程题', '1', '设计一个类Triangle，从键盘里面输入三个数字作为三角形的三个边。设计相应的方法判断三角形是否成立；判断三角形的类型（等边三角形、等腰三角形和任意三角形）；与计算三角形的面积和周长。面积的计算公式为、s=(a+b+c)/2;  area=Math.sqrt(s*(s-a)*(s-b)*(s-c));\r\n设计一个主类，调用Tirangle类中相应的方法，并打印出相应的结果。');
INSERT INTO `questions` VALUES ('6', '编程题', '2', '通过一个点类(Point)，具有自己的坐标位置(x,y),和显示本类信息的show()方法；\r\n一个圆类(Circle)由点类派生，增加一个新的属性半径(rad),一个计算圆面积的area()方法，和一个同样显示本类信息的show()方法；一个圆柱体类(Cylinder)由圆类派生，增加一个属性高度(height),一个计算圆柱形体积的方法vol(),一个计算圆柱形表面积的area()方法，和一个同样显示本类信息的show()方法。建立一个主类，调用相关类的方法，并打印出相应的信息。');
INSERT INTO `questions` VALUES ('6', '编程题', '3', '定义一个名为Rectangle表示长方形的类，它包含double类型的长length和宽width两个私有成员变量，计算长方形面积的成员方法area（），分别对数据成员添加setter和getter方法，在主类RectangleDemo的main()中，通过setter和getter方法来访问Rectance类对象的数据成员');
INSERT INTO `questions` VALUES ('6', '编程题', '4', '定义一个名为hhe表示长方体的类，它包含int类型的长length和宽width和高high，计算长方体的体积的成员方法tiJi（），分别对数据成员添加setter和getter方法，在主类qiuZhi的main()中，通过setter和getter方法来访问hhe类对象的数据成员');
INSERT INTO `questions` VALUES ('6', '编程题', '5', '设计一个people类，它包含name,sex,.age,high属性，有相应的构\r\n造方法，分别对数据成员添加setter和getter方法，在主类xianShi的main()中，通过setter和getter方法来访问people类对象的数据成员');
INSERT INTO `questions` VALUES ('6', '编程题', '6', '编写一个方法，接收一个整数作为参数，此方法会找出其最大值、最小值和平均值。');
INSERT INTO `questions` VALUES ('6', '编程题', '7', '编写一个Person，该类包括属性耳朵、眼睛、鼻子、嘴巴、手和腿。包括的方法是、可以听见，可以闻见，可以咬，可以拿东西，可以走路。');
INSERT INTO `questions` VALUES ('6', '编程题', '8', '定义一个changFangTi的父类，里面有chang，kuan两个属性。和相应的构造方法和get、set方法。定义个changFangTi2的子类继承changFangti，里面有一个gao属性，有相信的get和set方法。和求体积的tiJi（）方法。在main（）方法中调用父类的方法。并求长方体的体积。');
INSERT INTO `questions` VALUES ('6', '编程题', '9', '定义一个bus类，里面有speed和number属性。以及构造方法和get、set方法。定义一个bus2的子类。并继承父类的方法。计算bus的速度和人数。');
INSERT INTO `questions` VALUES ('6', '编程题', '10', '定义一个动物类，Animal(动物类型type成员变量，一个发声的方法sound());定义一个基于动物的狗类Dog（覆盖父类的发声方法）；定义一个基于动物的猫类Cat（覆盖父类的发声方法）；定义AnimalDemo类，声明一个Animal对象，分别创建一个Dog,Cat,类的对象，然后通过访问Animal对象来访问Dog  Cat 类对象的sound() 方法。');
INSERT INTO `questions` VALUES ('6', '编程题', '11', '创建两个Student 类的对象，比较二者年龄，输出其中年龄大的学生的姓名。');
INSERT INTO `questions` VALUES ('6', '编程题', '12', '编程创建一个Person类，在其中包括域（姓名，性别，年龄） 和方法（获得姓名，性别，修改年龄）。 将Person类作为父类，创建子类Student和Teacher .编写应用程序，创建Student和Teacher对象。');
INSERT INTO `questions` VALUES ('6', '编程题', '13', '定义一个体育活动类(Sports)作为基类，它有一个进行活动的方法play。足球(Football)和篮球(Bascketball)都是体育活动类的衍生类。');
INSERT INTO `questions` VALUES ('6', '编程题', '14', '定义一个类BOX，计算长方体的体积、长、宽、高由键盘输入。');
INSERT INTO `questions` VALUES ('6', '编程题', '15', '自定义方法，求三个数的最大值（要求、从键盘上输入）');
INSERT INTO `questions` VALUES ('6', '编程题', '16', '定义一个抽象类，他的属性有length和 heigth，它的一个构造方法是设置子性质，另一个轴向方法是area()用于求面积，定义两个类分别是长方形Rect和三角形Triangle求他们的面积，设计一个主类，调用相应的方法。');
INSERT INTO `questions` VALUES ('6', '编程题', '17', '定义一个接口M，其中有两个抽象方法，max()、min()，在P类中实现和继承，同时实现抽象方法max(),min()求三个数中的最大值和最小值');
INSERT INTO `questions` VALUES ('6', '编程题', '18', '设计一个接口<interface>照顾宠物\"喂食()\"\"陪他玩()\"工人..农民....干部...来实现..');
INSERT INTO `questions` VALUES ('6', '编程题', '19', '设计一个公共汽车类bus，只要求有速度和人数两个属性，和一个不带参数的构建器，具有加速度， 减速，上人，下人，停车，启动等\r\n方法。创建一个对象，车上有35人，开始发车，中间下了13人，又上了25人，请问到站还有多少人 用程序实现.');
INSERT INTO `questions` VALUES ('6', '编程题', '20', '设计一个表示二维平面上的圆的类Circle,还包含有表示圆半径的protected类型的成员变量radius获取和设置radius直的public 方法,计算圆面积人public方法设计一个表示圆柱体的类Cylinder,它继承自类Circle,还包含有表示圆柱体高的proected类型的成员变量height,获取和设置height值的public方法,计算圆柱体体积的public方法.建立若干个Cylinder对象,输出其半径,高极其体积的值.要求: A.每个类包含无参数和有参数的构造方法.构造方法用于对成员变量初始化,');
INSERT INTO `questions` VALUES ('6', '编程题', '21', '设计一个抽象类，并比较三个数的大小。');
INSERT INTO `questions` VALUES ('6', '编程题', '22', '利用多态，设计一个程序，并计算出圆的面积、正方体体积、长方体体积、圆柱体、圆锥体体积');
INSERT INTO `questions` VALUES ('6', '编程题', '23', '定义个Compute接口，有抽象方法add()、substract()multiply()、和divide();定义实现类Computer.创建Compute对象完成加、减、乘、除方法的调用');
INSERT INTO `questions` VALUES ('6', '编程题', '24', '定义一个抽象Myintertace,其中有两个抽象方法max()、min().在Operation类中实现该抽象，同时实现抽象方法max()、min()并且要求三个数的最大最小值。');
INSERT INTO `questions` VALUES ('6', '编程题', '25', '利用外部类，求圆的面积。');
INSERT INTO `questions` VALUES ('6', '编程题', '26', '定义一个ssanjian类，用于实现扑克牌的正常发放。里面有face和suit属性。并且有构造方法和相应的get、set方法和一个toString方法。第一一个ssanjian2类作为它的子类，并继承父类的方法，并实现此方法。');
INSERT INTO `questions` VALUES ('6', '编程题', '27', '定义一个计算xn的类，然后用该类求10*10*10的值。');
INSERT INTO `questions` VALUES ('6', '编程题', '28', '设计一个Birthday类，其成员变量有、year,month,day；提供构造方法、输出Birthday对象值的方法和计算年龄的方法。编写程序测试这个类。（引入 java.util.Calendar包，取得当年份Calendar.getInstance().get(Calendar.YEAR)）');
INSERT INTO `questions` VALUES ('6', '编程题', '29', '定义一个类Rectangle代表矩形，其中包括计算面积的方法。再定义一个它的子类Square[代表正方形]，其中也包含计算面积的方法。编写一程序，测试新建子类对象的属性和方法。');
INSERT INTO `questions` VALUES ('6', '编程题', '30', ' 实作一个时间类MyTime，包含一个构建器，3个私有成员变量hour，minute，second以及它们相应的get和set方法，再加上一个转换成字符串的方法toString。');
INSERT INTO `questions` VALUES ('6', '编程题', '31', '实作一个日期类MyDate，包含一个构建器，3个私有成员变量year，month，day以及它们相应的get和set方法，再加上一个转换成字符串的方法toString。');
INSERT INTO `questions` VALUES ('6', '编程题', '32', '实作一个FullTime类，包含一个MyTime类型的是有成员变量time以及与之相对应的get与set方法，一个MyDate类型的成员变量date以及与之相对应的get与set方法，一个构建器，再加上一个转换成字\r\n符串的方法tostring。');
INSERT INTO `questions` VALUES ('6', '编程题', '33', '假设当前时间为2010年3月10日9点30分45秒，编写一个程序，用FullTime类设置时间为以上时间，并打印。');
INSERT INTO `questions` VALUES ('6', '编程题', '34', '定义一个体育活动类(Sports)作为基类，它有一个进行活动的方法play(方法名命名规范、J2EE方向、小写字母开头  . NET方向:大写字母开头)。  足球(Football)和篮球(Bascketball)都是体育活动类的衍生类。  请在测试类(Test)中编写一个方法howToPlay(Sports sp)，该方法要求传递一个Sports类型的参数。该方法的作用是、  1）、 当传入的实例类型为Football时，控制台上应打印、足球是用脚踢的！  2）、 当传入的实例类型为Bascketball时，控制台上应打印、篮球是用手打的！  在main方法中调用howToPlay()验证你的代码是对的。');
INSERT INTO `questions` VALUES ('6', '编程题', '35', '乐器（Instrument）分为、钢琴(Piano)、小提琴(Violin)\r\n * 各种乐器的弹奏（ play ）方法各不相同。 \r\n * 编写一个测试类InstrumentTest，要求、 \r\n * 编写方法testPlay，对各种乐器进行弹奏测试。要依据乐器的不同，进行相应的弹奏。 \r\n * 在main方法中进行测试');
INSERT INTO `questions` VALUES ('6', '编程题', '36', '声明一个包括各种车辆的抽象类，通过继承机制定义公共汽车和自行车两个类，构造对应的方法区分公共汽车和自行车，并统计各自的数量，完成公共汽车和自行车的实例化。');
INSERT INTO `questions` VALUES ('6', '编程题', '37', '编写学生类(class student)继承人类(class preson)的程序,要求父类的构造函数为(preson(string name),子类的构造函数要调用父类的构造函数.p()方法用于输出该对象的信息(如The person\'s name is Zhangheng),学生类有study()方法,并分别创建一个对象并调用各个方法');
INSERT INTO `questions` VALUES ('6', '编程题', '38', '设计一个学生类Student，其数据成员有name(姓名)、age(年龄)和degree(学位)。由Student类派生出本科生类Undergraduate和研究生类Graduate，本科生类Undergraduate增加成员specialty(专业)，研究生类增加成员direction(研究方向)。每个类都有show()方法，用于输出数据成员信息');
INSERT INTO `questions` VALUES ('6', '编程题', '39', '编写学生类(class student)继承人类(class preson)的程序,要求父类的构造函数为(preson(string name),子类的构造函数要调用父类的构造函数.p()方法用于输出该对象的信息(如The person\'s name is Zhangheng),学生类有study()方法,并分别创建一个对象并调用各个方法');
INSERT INTO `questions` VALUES ('6', '编程题', '40', '在父类Base和子类Sub中都定义了成员变量var及成员方法method()。在Sub类中，可通过super.var和super.method()来访问Base类的成员变量var及成员方法method()。');
INSERT INTO `questions` VALUES ('6', '编程题', '41', ' 创建一个类Queue代表队列（其特点为、先进先出），添加方法\r\nadd(Object obj)以及get()，并添加main()方法进行效果验证。（要求、使用LinkdedList实现队列、在向LinkedList中添加时，使用addLast()方法，在从LinkedList中取出时，使用removeFirst()方法)');
INSERT INTO `questions` VALUES ('6', '编程题', '42', '定义了一个学生的类 Student,包括成员变量“学号” 、 “班号” 、 “姓名” 、 “性别” 、 “年龄” ， 成员方法： “获得学号” 、 “获得班号” 、 “获得性别” 、 “获得姓名” 、 “获得年龄” 。请为 Student 类定义构造函数初始化所有的成员变量。增加一个方法 public String toString()把 Student 类对象的所有信息组合成一个字符串。');
INSERT INTO `questions` VALUES ('6', '编程题', '43', '构造函数是否可以被重载？试举例。');
INSERT INTO `questions` VALUES ('6', '编程题', '44', '构造一个类来描述屏幕上的一个点，该类的构成包括点的 x 和 y 两个坐标，以及一些对点 进行的操作，包括：取得点的坐标值，对点的坐标进行赋值，编写应用程序生成该类的对象并 对其进行操作。\r\norigin.getPoint(); } }');
INSERT INTO `questions` VALUES ('6', '编程题', '45', '编程创建一个 Box 类，在其中定义三个变量表示一个立方体的长、宽、高，再定义一个方 法 setDemo 来对这 3 个变量进行初始化，然后定义一个方法来求立方体的体积。创建一个对 象，求给定尺寸的立方体的体积。');
INSERT INTO `questions` VALUES ('6', '编程题', '46', '定义一个类实现银行帐户的概念，包括的变量有“帐号”和“存款余额” ，包括的方法有“存 款” 、 “取款”和“查询余额” 。定义主类，创建帐户类的对象，并完成相应操作。');
INSERT INTO `questions` VALUES ('6', '编程题', '47', '编写 Student 类的测试程序 程序要求实现：学生信息（学号、姓名性别、年龄、平均分、 最高分、最低分）在程序中设置，要求通过运行程序，在屏幕中输出如下的结果：例如：学号： 200501 姓名：李丽 性别：女 年龄：20 平均分：90.0 最高分：95 分 最低分:87。');
INSERT INTO `questions` VALUES ('6', '编程题', '48', '定义 Point、Circle、Cylinder 三个类，三个类都拥有 x,y 属性，而 Circle 又增加了属性 radius，Cylinder 类又增加了属性 height。都有获得 x,y 坐标，设置 x,y 坐标，求面积、体积的方法。');
INSERT INTO `questions` VALUES ('6', '编程题', '49', '请编写程序由三个类定义组成: 类 A 中只定义了一个类型为 String 的对象 x 和带有一个 参数的构造函数（用来初始化 x）；类 B 是类 A 的子类，其中定义了一个 int 类型的变量 x 和29 一个带两个参数的构造函数（用来为父类中的对象 x 和类 B 中的变量 x 做初始化），还定义了 一个方法 myPrint( )，功能为输出父类 A 中的 x 和其子类 B 中的 x 的值；测试类中定义了 B 类的对象 b，请通过创建 b 为上述两个 x 赋值(类 A 中的 x 的值为“这是父类的 x.”, 类 B 中 的 x 的值为 68，显示两个 x 的值。');
INSERT INTO `questions` VALUES ('6', '编程题', '50', '请编写程序，它由三个类定义组成，类名分别为 A、B 和 Applet1：类 A 中定义了一个类 型为 float 的属性 f 和一个类型为 byte 的私有属性 k；类 A 还定义了一个带有一个参数的构 造函数（用于初始化 f），和两个公共方法 setk( )和 getk( ), 其中 setk( ) 的功能为给私\r\n有属 性 k 赋值,getk( )的功能为返回私有属性 k 的值。类 B 是类 A 的子类，其中仅定义了一个类型 为 boolean 的属性 b 和一个带两个参数的构造函数（用来为父类中的变量 f 和本类的变量 b 做初始化）。Test 类中定义了一个初值为 123 的 int 型变量 n 和一个 B 类的对象 x，请通过 创建 x 为上述 f和 b 赋值(f 的值为 68.963,b 的值为 true); 在 paint()方法中, 给 A 类的私有 属性 k 赋值 66，然后显示 f，k，b，n 的值。');
INSERT INTO `questions` VALUES ('6', '编程题', '51', '设有 1 个 Professor 类，继承自 Human 类，该类是教师的蓝图，它除继承相应的属性和 方法外，还具有下面的成员属性： 讲授课程属性：private String course\r\n教学效果属性：private int result 该属性的取值为 0—3，1 表示效果良好，2 表示可以  \r\n接受，3 表示效果不佳，0 表示未予评价 成员方法： public String getDetails() 将姓名、性别、年龄和讲授课程属性以字符串方式返回。 public boolean set_reslut(int x) 该方法用于设置教学效果， 必须考虑设置是否合理 （若 不是 0-3 之间，则不允许设置）构造方法： 用于设置姓名，性别和年龄和讲授课程。 public Professor(String name, boolean sex, int age, String course)');
INSERT INTO `questions` VALUES ('6', '编程题', '52', '定义一个接口或多个接口，并用一个类实现。');
INSERT INTO `questions` VALUES ('6', '编程题', '53', '定义一个抽象类，并定义它的两个非抽象子类。');
INSERT INTO `questions` VALUES ('6', '编程题', '54', '定义接口 A，接口内有两个方法： method1(int x)和 method2(int x,int y)，它们的返 回值类型均为 int。请编写一个 Applet，并使其实现接口 A：令方法 method1(int x)的功能 是求 5 的 x 次方、方法 method2(int x,int y) 的功能是求两参数的最大值。在 paint（）方 法中调用这两个方法，显示 method1(2)和 method2(2,8)的结果。');
INSERT INTO `questions` VALUES ('6', '编程题', '55', '定义名为 VolumeArea 的抽象类，在其中定义圆周率的值为 3.14159，并定义两个抽象 方法 volume(double  r)和 area(double  r)，它们的返回值类型均为 float。再定义以类 VolumeArea 为父类的子类 VolumeAndArea，在该子类中实现父类中的抽象方法：方法 volume(double  r) 的功能是求半径为 r 的球的体积（公式为：4*Mth.PI*r*r*r/3）；方法 area(double r)的功能是求半径为 r 的圆的面积（公式为：r 2 ）。请编写一个 Application ，在其主类中定 义一个 VolumeAndArea 类的对象 x，通过对象 x 求半径为 r(r 的值由命令行给定)的球的体 积及该球最大切面的圆的面积，并输出计算结果。');
INSERT INTO `questions` VALUES ('6', '编程题', '56', '定义一个图形的抽象类，具有求面积和画图形的方法，再定义点、线、圆的类继承这个抽象类实现它的方法。');
INSERT INTO `questions` VALUES ('6', '编程题', '57', '请定义一个名为Card的扑克牌类，该类有两个private访问权限的字符串变量face和suit，分别描述一张牌的牌面值和花色。定义Card类中的public访问权限的构造方法，为类中的变量赋值；定义protected访问权限的方法getFace()，得到扑克牌的牌面值；定义protected访问\r\n权限的方法getSuit()，得到扑克牌的花色；定义方法toString()，返回表示扑克牌的花色和牌面值字符串。 \r\n若应用程序的main方法中，定义字符串数组f和s；分别表示扑克牌的牌面值和花色；定义52个元素的Card类型数组deck，用来存放4个花色的52张牌，如下所示、string f[]={“A”,”2”,…..’”K”} string s[]={“黑桃”,”红桃”,”梅花”,”方块”}  Card[] deck=new Card[52];    \r\n使用Card类的构造方法给deck数组的52张牌赋值，要求数组中先存放黑桃花色的A、2、3…..K；然后是红桃花色的A、2、3…..K；梅花花色的A、2、3…..K；方块花色的A、2、3…..K；把所有的牌信息打印出来。 \r\n再编写模拟洗牌的程序段，即把数组deck中的扑克牌随机打乱存放程序，分发给4人。');
INSERT INTO `questions` VALUES ('6', '编程题', '58', '在CS枪战游戏中，有Ak47和USP两种枪，每种枪弹夹的子弹数和发射子弹数都不一样。设计一个枪战游戏程序，定义一个Gun类，该类具有枪名称的属性name，子弹数量的名称num，枪手的编号id和记录当前枪手数量的属性count(静态)，具有num和name属性的getter和setter方法和发射的方法fire();一个构造方法为属性赋初始值，Gun.count++;// 计数器累加this.id = Gun.count；name = \"Gun\";num = 12;设计一个Ak47类，由Gun类继承而来，每发射一次消耗3发子弹，每装一个弹夹，上30发子弹；设计一个USP类，由Gun类继承而来，每发射一次消耗１发子弹，每装一个弹夹，上12发子弹；设计一个主类，分别创建不同的Ak47和USP对象，对象调用类里面的方法，装子弹，联系发射10次，显示枪里面还有多少子弹？');
INSERT INTO `questions` VALUES ('6', '选择题', '1', 'JAVA语言中，在类定义时使用final关键字修饰，是指这个类（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '2', '下列选项中，表示数据或方法可以被同一包中的任何类或它的子类访问，即使子类在不同的包中也可以的修饰符是（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '3', '下列选项中，表示数据或方法只能被本类访问的修饰符是（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '4', '下列选项中，接口中方法的默认可见性修饰符是(    )');
INSERT INTO `questions` VALUES ('6', '选择题', '5', '方法的重载指多个方法可以使用相同的名字，但是参数的数量或类型必须不完全相同，即方法体有所不同，它实现了java编译时的 （      ）');
INSERT INTO `questions` VALUES ('6', '选择题', '6', '在某个类中存在一个方法、void sort(int x),以下不能作为这个方法的重载的声明的是(       )。');
INSERT INTO `questions` VALUES ('6', '选择题', '7', '为了区分类中重载的同名的不同方法，要求(     )。');
INSERT INTO `questions` VALUES ('6', '选择题', '8', '在类的定义中，通过使用（   ）关键字可创建一个现有类的子类。');
INSERT INTO `questions` VALUES ('6', '选择题', '9', '为了调用超类的方法，可以使用（ ） 关键字后跟包含该超类所需参数的一对圆括号。');
INSERT INTO `questions` VALUES ('6', '选择题', '10', '关键字（    ）表示某个新类是由一个现有的类中继承的');
INSERT INTO `questions` VALUES ('6', '选择题', '11', 'JAVA 语言中的类间的继承关系是（         ）');
INSERT INTO `questions` VALUES ('6', '选择题', '12', '下列选项中，用于定义子类时声明父类名的关键字是（        ）');
INSERT INTO `questions` VALUES ('6', '选择题', '13', '下列关键字中，用于声明类实现接口的关键字是（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '14', '下列修饰符可以用于说明类的是（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '15', '用于定义类成员的访问控制权的一组关键字是（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '16', '下列哪些说法是正确的（      ）');
INSERT INTO `questions` VALUES ('6', '选择题', '17', '方法的重载是指（   ）');
INSERT INTO `questions` VALUES ('6', '选择题', '18', '下列关于类说法正确的是（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '19', '下面哪个说法确（        ）');
INSERT INTO `questions` VALUES ('6', '选择题', '20', '类的设计要求它的某个成员变量不能被外部类直接访问，应该使用下面的那些修饰符获得需要的访问控制（     ）');
INSERT INTO `questions` VALUES ('6', '选择题', '21', '指出下列哪个方法不是方法public void add(int a){}的合理的重载（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '22', '下列说法正确的是（     ）');
INSERT INTO `questions` VALUES ('6', '选择题', '23', '下列程序片断用的是什么机制？ (         )\r\nclass Student{\r\nString name;\r\nint age;\r\nStudent(){}\r\nStudent(String n, int a){name=n; age=a;}\r\nStudent(String n){name=n;}\r\n}');
INSERT INTO `questions` VALUES ('6', '选择题', '24', '关于抽象类下列哪个描述正确？ (    )');
INSERT INTO `questions` VALUES ('6', '选择题', '25', '关于被私有保护访问控制符 private protected 修饰的成员变量，以下说法正确的是（       ）');
INSERT INTO `questions` VALUES ('6', '选择题', '26', '编译并运行以下程序，以下描述哪个选项是正确的（     ）\r\n class X{\r\n protected String toString(){\r\n return super.toString();}\r\n }');
INSERT INTO `questions` VALUES ('6', '选择题', '27', '下列关于修饰符混用的说法，错误的是（      ）');
INSERT INTO `questions` VALUES ('6', '选择题', '28', '类 Test1 定义如下:\r\n public class Test1{\r\n public float aMethod （ float a ， float b ） { }\r\n}\r\n将以下哪种方法插入行 3 是不合法的。（        ）');
INSERT INTO `questions` VALUES ('6', '选择题', '29', '类 Test');
INSERT INTO `questions` VALUES ('6', '选择题', '30', '下列有关 Java 中接口的说法哪个是正确的？（      ）');
INSERT INTO `questions` VALUES ('6', '选择题', '31', '如果有一个对象 myListener ( 其中 myListener 对象实现了 ActionListener 接口 ), 下列哪条语句使得 myListener 对象能够接受处理来自于 smallButton 按钮对象的动作事件 ?（       ）');
INSERT INTO `questions` VALUES ('6', '选择题', '32', '不允许作为类及类成员的访问控制符的是(       )。');
INSERT INTO `questions` VALUES ('6', '选择题', '33', '对于构造方法，下列叙述不正确的是（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '34', '在JAVA中，一个类可以同时定义许多同名的方法，这些方法的形式参数的个数、类型、顺序各不相同，返回值也可以不相同，这种面向对象程序特征称为（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '35', 'ArrayList类的（    ）方法可用来检索ArrayList中一个特定位置上放的元素');
INSERT INTO `questions` VALUES ('6', '选择题', '36', '若已经使用A A类创建对象a和BB类创建对象b，则下面的哪一个方法调用是正确的（       ）');
INSERT INTO `questions` VALUES ('6', '选择题', '37', '若在某一个类定义中定义有如下的方法 abstract void performDial( ); 该方法属于（     ）。');
INSERT INTO `questions` VALUES ('6', '选择题', '38', '设有下面两个类的定义、   class Person {               class Student extends Person {   long id; // 身份证号          int score; // 入学总分   String name; // 姓名          int getScore(){   }                            return score;                                 }                                    }   问：类Person和类Student的关系是（        ） 。');
INSERT INTO `questions` VALUES ('6', '选择题', '39', '如果子类中的方法mymethod()覆盖了父类中的方法mymethod()，假设父类方法头部定义如下：void mymethod(int a)，则子类方法的定义不合法的是、（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '40', 'ArrayList对象的（      ）方法将返回一个可一次访问ArrayList中元素的迭代器');
INSERT INTO `questions` VALUES ('6', '选择题', '41', '为删除ArrayList中的一个特定索引所对应的元素。应使用（      ）方法');
INSERT INTO `questions` VALUES ('6', '选择题', '42', '用private声明的类成员，其最大的访问范围是(     )。');
INSERT INTO `questions` VALUES ('6', '选择题', '43', '对于任意一个类，用户所能定义的构造方法的个数至多为(      )。');
INSERT INTO `questions` VALUES ('6', '选择题', '44', '构造方法何时被调用（      ）');
INSERT INTO `questions` VALUES ('6', '选择题', '45', '如果创建的一个子类覆盖一个父类public方法，则对该方法可以使用哪些修饰符修饰？(      )');
INSERT INTO `questions` VALUES ('6', '选择题', '46', '关于被保护访问控制符protected修饰的成员变量，以下说法正确的是（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '47', '下面对java继承机制描述错误的是、（        ）');
INSERT INTO `questions` VALUES ('6', '选择题', '48', '对关键字super的用法描述正确的是、（       ）');
INSERT INTO `questions` VALUES ('6', '选择题', '49', '使用ArrayList类的（     ）方法生成一个迭代器');
INSERT INTO `questions` VALUES ('6', '选择题', '50', '当子类中的成员变量与父类中的成员变量相同时:（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '51', '类class A中方法定义为protected void f()，则该方法的访问性是(        )');
INSERT INTO `questions` VALUES ('6', '选择题', '52', '在Java中，关键字（        ）使类不能派生出子类。');
INSERT INTO `questions` VALUES ('6', '选择题', '53', '在Java中，类Worker是类Person的子类，Worker的构造方法中有一句“super()”，该语句（        ）。');
INSERT INTO `questions` VALUES ('6', '选择题', '54', '下列说法正确的是？ (        )');
INSERT INTO `questions` VALUES ('6', '选择题', '55', '已知类关系如下:\r\nclass Employee{…};\r\nclass Manager extends Employee{…};则以下有关创建对象的语句不正确的是 (      )');
INSERT INTO `questions` VALUES ('6', '选择题', '56', '在Java程序中，对象之间的相互通信通过(        )');
INSERT INTO `questions` VALUES ('6', '选择题', '57', '关于抽象类正确的是（      ）');
INSERT INTO `questions` VALUES ('6', '选择题', '58', '下面关于抽象类的描述错误的是（       ）');
INSERT INTO `questions` VALUES ('6', '选择题', '59', '下面选项正确的是（   ）');
INSERT INTO `questions` VALUES ('6', '选择题', '60', '（     ）访问修饰符可允许其他类对某个方法进行调用');
INSERT INTO `questions` VALUES ('6', '选择题', '61', '使用（   ）方法可以获取得到某个实例变量的值。');
INSERT INTO `questions` VALUES ('6', '选择题', '62', '一个private实例变量不能（       ）');
INSERT INTO `questions` VALUES ('6', '选择题', '63', '构造方法和普通方法之间的一个重要区别是（       ）');
INSERT INTO `questions` VALUES ('6', '选择题', '64', '一个类可得到许多（   ），正如一个基本类型可得到许多变量一样');
INSERT INTO `questions` VALUES ('6', '选择题', '65', 'set方法能够为开发人员（      ）、');
INSERT INTO `questions` VALUES ('6', '选择题', '66', '声明为private的实例变量不能直接（    ）访问');
INSERT INTO `questions` VALUES ('6', '选择题', '67', '下列选项中，定义最终类的关键字是(      )。');
INSERT INTO `questions` VALUES ('6', '选择题', '68', 'Java语言的类间的继承关系是(        )');
INSERT INTO `questions` VALUES ('6', '选择题', '69', '使用（    ）语句可调用超类中无参的构造方法');
INSERT INTO `questions` VALUES ('6', '选择题', '70', '当子类覆盖超类中的方法时，如果要在子类中完成对超类方法的访问，那么在调用时需要在对象的名字前添加一个（     ）关键字和一个（  ）');
INSERT INTO `questions` VALUES ('6', '选择题', '71', 'Graphics类的（   ）方法将绘制一个填充的矩形');
INSERT INTO `questions` VALUES ('6', '选择题', '72', '如果Truck类扩展Vehicle类那么，若现在希望从Truck类中调用Vehicle类的一个无参的构造方法，则需编写的代码应为（      ）');
INSERT INTO `questions` VALUES ('6', '选择题', '73', '如果Truck类扩展了Vehicle类，那么称Truck类为（      ） ，称Vehicle类为（）');
INSERT INTO `questions` VALUES ('6', '选择题', '74', '当子类覆盖其超类中的方法时，（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '75', '在（   ）关系中，子类的对象也可看作是其超类的一个对象');
INSERT INTO `questions` VALUES ('6', '选择题', '76', '在（   ）关系中，类中可包含其他类的对象的引用');
INSERT INTO `questions` VALUES ('6', '选择题', '77', '一个类在实现接口时，必须（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '78', '匿名内部类（   ）');
INSERT INTO `questions` VALUES ('6', '选择题', '79', '利用多态，使用同一个（     ）可产生不同的操作，这取决于调用方法的参数类型。');
INSERT INTO `questions` VALUES ('6', '选择题', '80', '如果MyTruck类继承MyCar类，则（     ）');
INSERT INTO `questions` VALUES ('6', '选择题', '81', '多态能够让开发人员（       ）进行编程');
INSERT INTO `questions` VALUES ('6', '选择题', '82', '对于使用多态的应用程序来说，某个对象的确切类型（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '83', '通过继承，使用（    ）类型的变量可以调用超类和子类的方法');
INSERT INTO `questions` VALUES ('6', '选择题', '84', '下面哪个语句是正确的？(      )');
INSERT INTO `questions` VALUES ('6', '选择题', '85', '指出下列程序的错误，描述正确的是：(      )\r\n  final class First {\r\n   private int a = 1;\r\n   int b = 2;\r\n  }\r\n  class Second extends First {\r\n   public void method() {\r\n    System.out.println(a + b);\r\n   }\r\n  }');
INSERT INTO `questions` VALUES ('6', '选择题', '86', '接口A的定义如下，指出下列哪些类实现了该接口？ (      )\r\n  interface A {\r\n   int method1(int i);\r\n   int method2(int j);\r\n  }');
INSERT INTO `questions` VALUES ('6', '选择题', '87', '下面的是关于类及其修饰符的一些描述，不正确的是、（      ）。');
INSERT INTO `questions` VALUES ('6', '选择题', '88', ' 对于构造函数，下列叙述不正确的是（     ）。');
INSERT INTO `questions` VALUES ('6', '选择题', '89', '下列选项中，定义抽象类的关键字是(     )。');
INSERT INTO `questions` VALUES ('6', '选择题', '90', '如果任何包中的子类都能访问超类中的成员，那么应使用哪个限定词？(    )');
INSERT INTO `questions` VALUES ('6', '选择题', '91', '下面的哪个选项是正确的？(     )\r\n  class ExSuper{\r\n   String name;\r\n   String nick_name;\r\n   public ExSuper(String s,String t){\r\n    name = s;\r\n    nick_name = t;\r\n   }\r\n    public String toString(){\r\n     return name;\r\n    }\r\n   }\r\n   public class Example extends ExSuper{\r\n    public Example(String s,String t){\r\n    super(s,t);\r\n    }\r\n    public String toString(){\r\n     return name +\"a.k.a\"+nick_name;\r\n    }\r\n    public static void main(String args[]){\r\n     ExSuper a = new ExSuper(\"First\",\"1st\");\r\n     ExSuper b = new Example(\"Second\",\"2nd\");\r\n     System.out.println(\"a is\"+a.toString());\r\n     System.out.println(\"b is\"+b.toString());\r\n    }\r\n  }');
INSERT INTO `questions` VALUES ('6', '选择题', '92', '运行下列程序的结果是哪个？(        )\r\n  abstract class MineBase {\r\n   abstract void amethod();\r\n   static int i;\r\n   }\r\n  public class Mine extends MineBase {\r\n   public static void main(String argv[]){\r\n    int[] ar = new int[5];\r\n    for(i = 0;i < ar.length;i++)\r\n    System.out.println(ar[i]);\r\n   }\r\n  }');
INSERT INTO `questions` VALUES ('6', '选择题', '93', '有关类Demo，哪句描述是正确的？(       )\r\n  public class Demo extends Base{\r\n  private int count;\r\n  public Demo(){\r\n   System.out.println(\"A Demo object has been created\");\r\n  }\r\n  protected void addOne() {count++; }\r\n  }');
INSERT INTO `questions` VALUES ('6', '选择题', '94', '在以下供选择的概念中，不属于面向对象语言概念的是 (       )');
INSERT INTO `questions` VALUES ('6', '选择题', '95', '对静态成员(用static修饰的变量或方法)的不正确描述是（      ）。');
INSERT INTO `questions` VALUES ('6', '选择题', '96', '下列说法正确的是（          ）。');
INSERT INTO `questions` VALUES ('6', '选择题', '97', '下列说法错误的是（      ）。');
INSERT INTO `questions` VALUES ('6', '选择题', '98', '创建对象的关键字是（   ）');
INSERT INTO `questions` VALUES ('6', '选择题', '99', '接口可以继承多个父类接口，父接口之间使用（     ）符号隔开。');
INSERT INTO `questions` VALUES ('6', '选择题', '100', '下列说法正确的一项是（     ）');
INSERT INTO `questions` VALUES ('6', '选择题', '101', '下列关于类、包和源文件的描述中，不正确的一项是（     ）');
INSERT INTO `questions` VALUES ('6', '选择题', '102', '下列关于类、包和源文件的说法中，错误的一项是（     ）');
INSERT INTO `questions` VALUES ('6', '选择题', '103', '下列关于java.lang包封装的基本类的说法中，不正确上网一项是（     ）');
INSERT INTO `questions` VALUES ('6', '选择题', '104', '定义类时，不可能用到的保留字是（       ）');
INSERT INTO `questions` VALUES ('6', '选择题', '105', '下列那个不是面向对象程序设计方法的特点？（     ）');
INSERT INTO `questions` VALUES ('6', '选择题', '106', '在使用interface声明一个接口时，可以使用哪一个修饰符定义该接口？（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '107', 'Java中所有的类都是通过直接或间接地继承（      ）类得到的。');
INSERT INTO `questions` VALUES ('6', '选择题', '108', '为了某个ArrayList的末尾添加一个元素，应该调用（       ）方法');
INSERT INTO `questions` VALUES ('6', '选择题', '109', '现有两个类M、N，以下描述中表示N继承自M的是(      )。');
INSERT INTO `questions` VALUES ('6', '选择题', '110', '面向对象的一个重要特征（      ）它使代码可重用，降低程序复杂性。');
INSERT INTO `questions` VALUES ('6', '选择题', '111', '使用Iterator的（     ）方法返回集合中下一个元素的引用');
INSERT INTO `questions` VALUES ('6', '选择题', '112', '利用Iterator的next 方法所返回的引用类型为（       ）');
INSERT INTO `questions` VALUES ('6', '选择题', '113', '下列选项中，用于定义接口的关键字是(         )。');
INSERT INTO `questions` VALUES ('6', '选择题', '114', '以下关于Java语言继承的说法错误的是(      )。');
INSERT INTO `questions` VALUES ('6', '选择题', '115', '下列关于构造方法的叙述中，错误的是（         ）');
INSERT INTO `questions` VALUES ('6', '选择题', '116', '在一个类中定义成员变量和成员方法时，不允许   （         ） 。');
INSERT INTO `questions` VALUES ('6', '选择题', '117', '一个子类继承父类,子类不可以继承父类中访问权限设定为 （         ） 的变量和方法.');
INSERT INTO `questions` VALUES ('6', '选择题', '118', '当子类中的成员变量或方法与继承的父类的成员变量或方法相同时，子类的对象所使用的变量是（         ）');
INSERT INTO `questions` VALUES ('6', '选择题', '119', '下列叙述正确的是 （        ）');
INSERT INTO `questions` VALUES ('6', '选择题', '120', '要想定义一个不能被实例化的抽象类，在类定义中必须加上修饰符(     )。');
INSERT INTO `questions` VALUES ('6', '选择题', '121', '有一个类A，对于其构造函数的声明正确的是（     ）');
INSERT INTO `questions` VALUES ('6', '选择题', '122', '下面是有关子类调用父类构造函数的描述正确的是（      ）');
INSERT INTO `questions` VALUES ('6', '选择题', '123', '在Java中，要定义类的保护类型元素，则必须使用的关键字是（     ）');
INSERT INTO `questions` VALUES ('6', '选择题', '124', ' 若要说明一个抽象类，使用的关键字是、（     ）');
INSERT INTO `questions` VALUES ('6', '选择题', '125', '方法（      ）能够将ArrayList转换成一个一维数组');
INSERT INTO `questions` VALUES ('6', '选择题', '126', '如果任何包中的子类都能访问超类中的成员，那么应使用哪个限定词？ (    ) A.、public       B、.private       C、protected     D、transient');
INSERT INTO `questions` VALUES ('6', '选择题', '127', 'ArrayList类位于（     ）包内');
INSERT INTO `questions` VALUES ('6', '选择题', '128', '下列关于接口和抽象类的说法不正确的是？(     )');
INSERT INTO `questions` VALUES ('6', '选择题', '129', ' 有关类的说法正确的是？ (     )');
INSERT INTO `questions` VALUES ('6', '选择题', '130', '下述哪一组方法，是一个类中方法重载的正确写法？ (     )');
INSERT INTO `questions` VALUES ('6', '选择题', '131', '下列程序的结果输出为：（    ）\r\nclass Strange{\r\nint j;\r\nStrange(){\r\nthis(4);\r\n}\r\nStrange(int j){\r\nthis.j=j;\r\n}\r\n}\r\nclass MainStrange{\r\npublic static void main(string[] args){\r\nStrange funny=new Strange();\r\nSystem.out.println(“j=“+funny.j);\r\n}\r\n}');
INSERT INTO `questions` VALUES ('6', '选择题', '132', '（     ）可专门用于存储由多个值所形成的分组');
INSERT INTO `questions` VALUES ('6', '选择题', '133', '迭代器提供了一个用以访问集合中每一个元素的（     ）');
INSERT INTO `questions` VALUES ('6', '选择题', '134', 'Java语言的类间的继承的关键字是(    )。');
INSERT INTO `questions` VALUES ('6', '选择题', '135', '访问修饰符（）用于指明其成员变量只能在该成员变量所属内部来访问（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '136', '给出下面代码   1) class Parent {    2) private String name;    3) public Parent(){}    4) }    5) public class Child extends Parent {    6) private String department;    7) public Child() {}    8) public String getValue(){ return name; }    9) public static void main(String arg[]) {    10) Parent p = new Parent();    11) }    12) }    那些行将引起错误？ （     ）');
INSERT INTO `questions` VALUES ('6', '选择题', '137', '下面关于构造方法的说法不正确的是（           ）');
INSERT INTO `questions` VALUES ('6', '选择题', '138', '下面哪个修饰符修饰的变量是所有同一个类生成的对象共享的（   ）');
INSERT INTO `questions` VALUES ('6', '选择题', '139', '下面对对象概念描述错误的是：(       )');
INSERT INTO `questions` VALUES ('6', '选择题', '140', '编译并运行下面的程序，运行结果为：(       )\r\npublic class A {\r\npublic static void main(String[] args) {\r\nA a=new A()；\r\na.method(8)；\r\n}\r\nvoid method(int i) {\r\nSystem.out.println(“int： “+i)；\r\n}\r\nvoid method(long i) {\r\nSystem.out.println(“long： “+i)；\r\n}\r\n}');
INSERT INTO `questions` VALUES ('6', '选择题', '141', '下面关于类的说法不正确的是：（     ）');
INSERT INTO `questions` VALUES ('6', '选择题', '142', '能作为类及其成员的修饰符是：（   ）');
INSERT INTO `questions` VALUES ('6', '选择题', '143', '设 x、y 均为已定义的类名，下列声明对象 x1 的语句不可能正确的是：（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '144', '面向对象程序设计技术的特点是：（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '145', '设已声明了一个类 A 的两个对象 al、 a2，为了初始化 a1 和 a2，下面语句正确的是：（      ）\r\nA、al=new();    a2=new();        B、al=A new();  a2=');
INSERT INTO `questions` VALUES ('6', '选择题', '146', '构造方法何时被调用（   ）');
INSERT INTO `questions` VALUES ('6', '选择题', '147', '下列哪个类声明是正确的是（   ）');
INSERT INTO `questions` VALUES ('6', '选择题', '148', '下列不属于面向对象程序设计的基本特征的是：（       ）');
INSERT INTO `questions` VALUES ('6', '选择题', '149', '请看下面的程序段\r\nclass Person {\r\nString name,department;\r\nint age;\r\npublic Person(String n) { name = n; }\r\npublic Person(String n,int a) { name = n; age = a; }\r\npublic Person(String n,String d,int a) {\r\n//doing the same as two arguments version of constructer\r\n//including assignment name=n,age=a\r\n}\r\n}\r\n下面那一选项可以添加到“//doing the same……”处：（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '150', '（    ）是一个特殊的方法，用于对类的实例变量进行初始化。');
INSERT INTO `questions` VALUES ('6', '选择题', '151', '关于变量和它们范围的说法，错误的是：（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '152', '请看下面的程序段\r\nclass Test{\r\n private int m;\r\npublic static void fun(){\r\n//some code…\r\n}\r\n}\r\n方法 fun()如何来访问变量 m：（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '153', '请看下面的程序段\r\npublic class Test {\r\nlong a[ ] = new long[10];\r\npublic static void main(String arg[ ]) {\r\nSystem .out .println(a[6]);\r\n}\r\n}\r\n那一个选项是正确的：（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '154', '关键字（    ）表明一个对象或变量在初始化后不能修改。');
INSERT INTO `questions` VALUES ('6', '选择题', '155', '声明为 static 的方法不能访问（     ）类成员。');
INSERT INTO `questions` VALUES ('6', '选择题', '156', '为了区分重载多态中同名的不同方法，要求：（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '157', '在某个类中定义一个方法：void  GetSort(int x)，以下关于能否作为这个方法的重载错\r\n误的是：（   ）');
INSERT INTO `questions` VALUES ('6', '选择题', '158', '下列对继承的说法，哪个是正确的：（  ）');
INSERT INTO `questions` VALUES ('6', '选择题', '159', '定义类 A 如下：\r\nclass A\r\n{  int a,b,c;\r\npublic void B(int x,int y,int z){a=x;  b=y;  c=z;  }\r\n}\r\n下面对方法 B()的重载哪些是正确的：（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '160', '下列说法正确的是：（     ）');
INSERT INTO `questions` VALUES ('6', '选择题', '161', '下列说法正确的是：（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '162', '关于构造函数的说法正确的是：（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '163', '下面是有关子类调用父类构造函数的描述正确的是：（     ）');
INSERT INTO `questions` VALUES ('6', '选择题', '164', '声明为 final 的变量不能在子类中覆盖，声明为（ ）和（ ）的方法是隐式的 final。（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '165', '继承性使▁▁成为可能，它不仅节省开发时间，而且也鼓励人们使用已经验证无误和调 试过的高质量软件。（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '166', '编译运行下面的程序，结果是（    ）。\r\nPublic class A {\r\npublic static void main(String[] args) {\r\nB b=new B();\r\nb.test();\r\n}\r\nvoid test() {\r\nSystem.out.print(“A”);\r\n}\r\n}\r\nclass B extends A {\r\nvoid test() {\r\nsuper.test();\r\nSystem.out.println(“B”);\r\n}\r\n}');
INSERT INTO `questions` VALUES ('6', '选择题', '167', '已知类关系如下：\r\nclass Employee;\r\nclass Manager extends Employeer;\r\nclass Director extends Employee;\r\n则以下语句正确的是： （    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '168', '一个（ ）类的对象可以当作相应的（  ）类对象看待。（       ）');
INSERT INTO `questions` VALUES ('6', '选择题', '169', '如果集合中仍有元素，则Iterator的（    ）方法将返回true');
INSERT INTO `questions` VALUES ('6', '选择题', '170', '被声明为 private，protected 及 public 的类成员，在类外部： （    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '171', '现有两个类 A、B，以下描述中表示 B 继承自 A 的是（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '172', '设类 B 是类 C 的父类，下列声明对象 x1 的语句中不正确的是（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '173', '下面有关接口的说法，哪个是正确的（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '174', '下列哪个不是属于接口用途的（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '175', '定义字符串 s：String s=\"Micrsoft公司\"；执行下面的语句，char c=s.charAt(9);\r\nc 的值为：（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '176', '虽然接口和抽象类不能创建对象，但它们的对象引用仍可指向该类型的对象。\r\n这种说法（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '177', '下面哪个类包括 drawImage( )方法、drawString( )方法和 setColor( )方法。 （    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '178', '接口中说明了一组公共的抽象方法，其中（    ）包含公共的静态方法');
INSERT INTO `questions` VALUES ('6', '选择题', '179', '接口是 Java 面向对象的实现机制之一，以下说法正确的是： （    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '180', '关于接口的定义和实现，以下描述正确的是： （    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '181', '下面的说法正确的是： （    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '182', '声明接口的保留字是（    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '183', '下面关于 Vector 类的说法不正确的是：（     ）');
INSERT INTO `questions` VALUES ('6', '选择题', '184', '下面的接口（类）定义正确的是：（    ）\r\nA 、public class A {\r\nprivate int x;\r\npublic getx() {  return x;  }\r\n }\r\nB、public abstract class A{ private int x;\r\npublic abstract int getx();\r\npublic int amethod()\r\n{  return 0;  }\r\n}\r\nC、public class');
INSERT INTO `questions` VALUES ('6', '选择题', '185', '接口具有下面的特性。（       ）');
INSERT INTO `questions` VALUES ('6', '选择题', '186', '定义一个包的关键字是（    ）。');
INSERT INTO `questions` VALUES ('6', '选择题', '187', '下列选项中，用于在程序开头引入包的关键字是（     ）。');
INSERT INTO `questions` VALUES ('6', '选择题', '188', '以下语句输出的结果是（     ）。\r\nSystem.out.println(Math.floor(-0.8));');
INSERT INTO `questions` VALUES ('6', '选择题', '189', '下面的程序段执行后，变量 a、b、c 的值分别是（    ）。\r\nint a,b,c;\r\na=(int)Math.round(-4.51);\r\nb=(int)Math.ceil(-4.51);\r\nc=(int)Math.floor(-4.1);');
INSERT INTO `questions` VALUES ('6', '选择题', '190', '下面说法不正确的是 （    ）');
INSERT INTO `questions` VALUES ('6', '选择题', '191', '在类定义的外部，可以被访问的成员有(        )。');
INSERT INTO `questions` VALUES ('6', '选择题', '192', '现有类A和接口B，以下描述中表示类A实现接口B的语句是(    )。');
INSERT INTO `questions` VALUES ('6', '选择题', '193', '针对Vector  MyVector = new  Vector(100,50)语句，下面语句中解释正确的是（      ）。');
INSERT INTO `questions` VALUES ('6', '选择题', '194', '在Java中，存放字符串常量的对象属于（      ）类对象。');
INSERT INTO `questions` VALUES ('7', '判断题', '1', '组件不能独立显示出来，必须将组件放在一定的容器中才可以显示出来。（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '2', 'Swing组件存放在Javax.swing包中(   )');
INSERT INTO `questions` VALUES ('7', '判断题', '3', 'Dialog是弹出式窗口用于接受用户输入。（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '4', 'Panel(面板)不是用作组织组件的。（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '5', 'Label()该方法用来创建一个没有显示内容的对象。（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '6', 'Label对象是一个在容器中放置文本的组件。（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '7', 'Label类的LEFT常量表示右对齐。（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '8', 'Button类不用于创建按钮。（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '9', 'Button()创建一个没有标题的按钮。（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '10', 'Choice类选择菜单用于显示可让用户选择的选择列表。（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '11', 'List类构造函数的第一个参数指明可见项的数目而不是列表中项数的最大值。（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '12', 'Checkboxl类用于创建标签复选框。（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '13', '容器是用来盛放其它部件的单元. （   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '14', '容器都有一定的范围（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '15', '容器有一定的位置,一般包含许多部件（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '16', '打开容器时，其内部的部件都能显示，关闭容器，其内部的部件就隐藏起来（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '17', '在容器内可以采用一定的规则来安排所包含的部件（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '18', '容器可以包含容器（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '19', '组件，其内不在包含任何其他成分（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '20', 'Checkbox是复选框（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '21', 'CheckboxGroup不是单选按钮（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '22', '每个CheckboxGroupd的对象对应着一种可能的取值情况，即对应一个选项（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '23', 'List是列表（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '24', '创建列表时要把各项内容添加进去（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '25', 'List构造函数的第一个参数表示列表高度,也表示有几项内容（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '26', '在JMenuBar类中JMenuBer()是创建菜单栏                        （   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '27', '在JMenul类中JMenu()创建菜单                                   （   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '28', 'JMenu(String str) 创建菜单栏                                    （   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '29', '在JMenul类JMenul（String str,bolean b）创建具有指定文字的菜单，通过布尔值确它是否有下拉式菜单                                               （   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '30', 'JMenuItem（）创建一个菜单栏            （   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '31', 'JMenuItem(String str ,int nmeminic)创建一个指定标签和键盘设置快捷健的菜单项。（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '32', 'JMenuItem(String str ,Icon icon)创建具有指定文字和图形的菜单项（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '33', '在Java中，当用户使用鼠标进行操作时，则会产生鼠标事件MouseEvenr（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '34', 'BorderLayout是构造新的BorderLayout布局     （   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '35', 'AWT是Java语言进行GUI程序设计的基础     （   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '36', 'Swing包是Java基础类库（Java Foundation Classes，JFC）的一部分。（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '37', 'Swing组件是Java语言提供的第二代GUI设计工具包，它以AWT为基础。（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '38', 'JOptionPane提供的对话框是模式对话框       （   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '39', '下拉式菜单包含有一个菜单条（MenuBar），在菜单条上安排有若干个菜单（Menu），每个菜单又包含若干菜单项（MenuItem），每个菜单项对应了一个命令或子菜单项。它们构成一个应用程序的菜单系统。用鼠标或键盘选择对应一个命令的菜单项与选择一个按钮类似。使用菜单系统可方便地向程序分布命令。        （   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '40', '组件（Component）是构成GUI的基本元素，如按钮、标签、画布、复选框等。（   ）');
INSERT INTO `questions` VALUES ('7', '判断题', '41', '容器（Container）组件，简称容器，是一个可以包含组件和其他容器的组件.如，JPanel,JTabbedPane、JScrollPane等。     （   ）');
INSERT INTO `questions` VALUES ('7', '填空题', '1', '在Java.awt包中共定义了5种布局类，分别是______、______、______、______和______。');
INSERT INTO `questions` VALUES ('7', '填空题', '2', 'Java.swing包中共定义了4种布局类，分别是______、______、________和__________。');
INSERT INTO `questions` VALUES ('7', '填空题', '3', 'CardLayout构造新的__________布局。4BoxLayout是__________提供的布局管理器，它有两种排序方式，一种是__________，另一种是__________。');
INSERT INTO `questions` VALUES ('7', '填空题', '5', '在Java中，当用户使用键盘进行操作时，则会出生__________事件。');
INSERT INTO `questions` VALUES ('7', '填空题', '6', '在Java中，当当用户使用鼠标进行操作时，则会产生鼠标事件MouseEvent。MouseMvent事件的响应是实现__________接口或__________接口，或者是继承__________类，来实现MouseApdapter提供的方法。');
INSERT INTO `questions` VALUES ('7', '填空题', '7', 'Mouse有关的事件可以分为两类，一类是__________接口，共提供了5种方法，主要针对鼠标的按键和位置进行检测；另一类是__________接口，共提供了两种方法，主要针对鼠标的坐标和按键进行检测。');
INSERT INTO `questions` VALUES ('7', '填空题', '8', '在Java中，一般菜单格式包含有菜单栏________类、菜单_______类和菜单项__________类对象组成。');
INSERT INTO `questions` VALUES ('7', '填空题', '9', '制作菜单的一般步骤1）、2）、3）、4）、');
INSERT INTO `questions` VALUES ('7', '填空题', '10', 'AWT中的__________和__________中的JPanel就是这样一类容器。');
INSERT INTO `questions` VALUES ('7', '填空题', '11', 'Panel和Panel的区别在于；__________支持双缓冲区功能，在处理动画时较少发生画面闪烁现象。');
INSERT INTO `questions` VALUES ('7', '填空题', '12', '对于窗口我们已经不陌生，使用__________包的JFrame类就可以创建一个窗口，实际上对话框也是一种类型的窗口。');
INSERT INTO `questions` VALUES ('7', '填空题', '13', 'JPanel是创建一个双缓冲区和__________布局的JPanel对象。');
INSERT INTO `questions` VALUES ('7', '填空题', '14', '常用的awt组件主要包括__________、__________、__________、__________、__________、__________、__________和__________。');
INSERT INTO `questions` VALUES ('7', '填空题', '15', 'Swing组件的基类是__________。');
INSERT INTO `questions` VALUES ('7', '填空题', '16', '图形用户界面（Graphics User Interface），简称');
INSERT INTO `questions` VALUES ('7', '填空题', '17', '图形用户界面的包是__________，简称抽象窗口工具包，即AWT（Abstract Window Toolkit）。概念-设计-实现字体设计-界面设计');
INSERT INTO `questions` VALUES ('7', '填空题', '18', 'Java基础类库,包含AWT和Swing组件,__________是JFC的核心.');
INSERT INTO `questions` VALUES ('7', '填空题', '19', '基于Java的图形用户界面开发工具（即组件集）最主流的有三种__________、、');
INSERT INTO `questions` VALUES ('7', '填空题', '20', 'AWT组件大致可以分为以下三类__________、__________、');
INSERT INTO `questions` VALUES ('7', '填空题', '21', '__________提供的对话框是模式对话框');
INSERT INTO `questions` VALUES ('7', '填空题', '22', '__________提供标准对话框的布局支持、图标、指定对话框的标题和文本、自定义按钮文本、允许自定义组件的对话框显示、指定对话框在屏幕上的显示位置等特性。');
INSERT INTO `questions` VALUES ('7', '填空题', '23', '__________语言提供多种对话框类来支持多种形式的对话框。');
INSERT INTO `questions` VALUES ('7', '填空题', '24', '___________类支持简单、标准的对话框。');
INSERT INTO `questions` VALUES ('7', '填空题', '25', '__________类支持定制用户自己的对话框。');
INSERT INTO `questions` VALUES ('7', '填空题', '26', '__________类支持文件打开、保存对话框。');
INSERT INTO `questions` VALUES ('7', '填空题', '27', '__________类支持操作进度条控制对话框等。');
INSERT INTO `questions` VALUES ('7', '填空题', '28', '菜单的格式分为__________和__________。');
INSERT INTO `questions` VALUES ('7', '填空题', '29', '为了简化表单填写过程，通常为用户提供多种可供选择的选项，而无需用户写出他们的响应。常用于选择性输入的组件有__________、__________、__________、');
INSERT INTO `questions` VALUES ('7', '填空题', '30', '对话框分为__________和__________两种。');
INSERT INTO `questions` VALUES ('7', '填空题', '31', '__________是指基于组件和容器的事件，当一个组件上发生事件，如、鼠标的进入，点击，拖放等，或组件的窗口开关等，触发了组件事件。');
INSERT INTO `questions` VALUES ('7', '填空题', '32', 'AWT事件共有10类，可以归为两大类__________和__________。');
INSERT INTO `questions` VALUES ('7', '填空题', '33', '__________是Abstract Window ToolKit的缩写，是抽象窗口组件工具包，是 Java语言中最早的用于编写图形界面应用程序的工具包。该工具包提供了一套与本地图形界面进行交互的接口。');
INSERT INTO `questions` VALUES ('7', '填空题', '34', '__________集遵循最大公约数原则，即AWT只拥有所有平台上都存在的组件的公有集合');
INSERT INTO `questions` VALUES ('7', '填空题', '35', '__________为了解决 AWT 存在的问题而新开发的包。Swing 是在AWT的基础上构建的一套新的图形界面系统，它提供了AWT 所能够提供的所有功能，并且用纯粹的Java代码对AWT 的功能进行了大幅度的扩充。');
INSERT INTO `questions` VALUES ('7', '填空题', '36', '__________组件包含在java.awt包里，如Button、Checkbox、Scrollbar等，都是Component类的子类。');
INSERT INTO `questions` VALUES ('7', '填空题', '37', '__________中大多数组件其名称都是在原来AWT组件名称前加上J，例如JButton、JCheckBox、JScrollbar等，都是JComponent类的子类。');
INSERT INTO `questions` VALUES ('7', '填空题', '38', '__________程序一般选择JFrame(或Frame)作为顶层容器__________，Applet程序一般选择JApplet(或Applet)作为顶层容器__________。');
INSERT INTO `questions` VALUES ('7', '填空题', '39', '布局管理就是创建这种类型的一个对象，并采用此对象来安排其它容器和基本组件。常用的四种布局管理器__________、__________、__________、');
INSERT INTO `questions` VALUES ('7', '填空题', '40', '（框架）是一种顶层容器，是用来设计类似于Windows系统中的窗口形式的应用程序。');
INSERT INTO `questions` VALUES ('7', '填空题', '41', 'Java GUI 发展的三个阶段:__________、__________、');
INSERT INTO `questions` VALUES ('7', '填空题', '42', '基本的控制组件是用来提供人机交互的基本控制界面，包括__________、__________、__________、__________、__________、__________、__________、__________、__________、__________、');
INSERT INTO `questions` VALUES ('7', '填空题', '43', '__________是由事件源产生的，事件的产生者称为事件源。例如，在Button组件上点击鼠标会产生以这个Button为源的一个事件、ActionEvent。');
INSERT INTO `questions` VALUES ('7', '填空题', '44', 'Swing组件存放在__________包中。');
INSERT INTO `questions` VALUES ('7', '填空题', '45', 'Container有几个主要的子类___________、___________、__________。');
INSERT INTO `questions` VALUES ('7', '填空题', '46', 'Frame(框架)是AWT的强大特征，我们可以用__________方法增加组件到Frame。');
INSERT INTO `questions` VALUES ('7', '填空题', '47', 'Image类___________方法返回要作用为此窗体图显示的图像');
INSERT INTO `questions` VALUES ('7', '填空题', '48', '__________方法将此窗体的标题设置为指定的字符串。');
INSERT INTO `questions` VALUES ('7', '填空题', '49', '___________方法显示窗体。');
INSERT INTO `questions` VALUES ('7', '填空题', '50', '__________方法返回此文本组件表示的组件。');
INSERT INTO `questions` VALUES ('7', '填空题', '51', '___________方法用于回显的字符。');
INSERT INTO `questions` VALUES ('7', '填空题', '52', '___________该方法用来创建一个没有显示内容的对象。');
INSERT INTO `questions` VALUES ('7', '填空题', '53', 'Label的对齐方式有___________种。');
INSERT INTO `questions` VALUES ('7', '填空题', '54', 'Label类的____________、____________和___________常量来分别表示左对齐、居中对齐和右对齐。');
INSERT INTO `questions` VALUES ('7', '填空题', '55', 'Button(String__label)创建一个__________的按钮。');
INSERT INTO `questions` VALUES ('7', '填空题', '56', '方法的定义是由__________、__________、__________、__________组成的');
INSERT INTO `questions` VALUES ('7', '填空题', '57', '利用一个__________组件可隐藏用户输入的信息；默认情况下，用户输入的每一个字符将被回显为一个星号（*）。');
INSERT INTO `questions` VALUES ('7', '填空题', '58', '列表框__________可以使用用户选择多个选择。');
INSERT INTO `questions` VALUES ('7', '填空题', '59', 'Checkbox类用于创建标签复选框,复选框有两部分 ——____________和___________。');
INSERT INTO `questions` VALUES ('7', '填空题', '60', '__________创建一个没有标签的复选框。');
INSERT INTO `questions` VALUES ('7', '填空题', '61', '__________是组成图形用户界面的最小单位之一。');
INSERT INTO `questions` VALUES ('7', '填空题', '62', '复选框有____________和____________两种状态。');
INSERT INTO `questions` VALUES ('7', '填空题', '63', '单选按钮是一组__________的集合。');
INSERT INTO `questions` VALUES ('7', '填空题', '64', 'List构造函数的第一个参数表示列表____________,也表示有几项内容');
INSERT INTO `questions` VALUES ('7', '填空题', '65', 'List构造函数的第二个参数表示列表___________。');
INSERT INTO `questions` VALUES ('7', '填空题', '66', 'List构造函数的第二个参数用__________类型表示.');
INSERT INTO `questions` VALUES ('7', '填空题', '67', '调用__________类的add()方法来增添菜单选项；');
INSERT INTO `questions` VALUES ('7', '填空题', '68', 'swing建立在__________基础之上。');
INSERT INTO `questions` VALUES ('7', '填空题', '69', 'awt包的运行速度比swing');
INSERT INTO `questions` VALUES ('7', '填空题', '70', '使用__________方法设置窗口的大小');
INSERT INTO `questions` VALUES ('7', '填空题', '71', '__________类是按钮基类');
INSERT INTO `questions` VALUES ('7', '填空题', '72', 'Icon getIcon()是获得此');
INSERT INTO `questions` VALUES ('7', '填空题', '73', '__________获得按钮上的文字');
INSERT INTO `questions` VALUES ('7', '填空题', '74', 'void___________设置按钮');
INSERT INTO `questions` VALUES ('7', '填空题', '75', 'boolean 的__________得到按钮的状态');
INSERT INTO `questions` VALUES ('7', '编程题', '1', '编写程序，包括一个标签、一个文本框和一个按钮，当单击按钮时把文本框中的内容复制到标签中显示。');
INSERT INTO `questions` VALUES ('7', '编程题', '2', '练习使用对话框。包括一个JLabel和两个JButton，按任何一个JButton都会产生一个输入对话框，按确定后将输入内容在JLabel中显示出来');
INSERT INTO `questions` VALUES ('7', '编程题', '3', '练习使用JTable。包括姓名、学号、语文成绩、数学成绩、总分共5项');
INSERT INTO `questions` VALUES ('7', '编程题', '4', '一个简单的Swing GUI应用程序。在一个框架窗口中显示两个标签和一个按钮、上面的标签显示一串固定的文字信息，选择按钮后在下面的标签上显示系统现在的时间。');
INSERT INTO `questions` VALUES ('7', '编程题', '5', '创建一个界面质量管理器，并显示课程建设、一般课程、精品课程，，并在精品课程张显示子菜单。');
INSERT INTO `questions` VALUES ('7', '编程题', '6', '使用文件打开、关闭对话框（JFileChooser）。将选  择的文件名显示到文本区域中。');
INSERT INTO `questions` VALUES ('7', '编程题', '7', '编写一个对话框程序。');
INSERT INTO `questions` VALUES ('7', '编程题', '8', '编写一个功能选择程序，方法自定。');
INSERT INTO `questions` VALUES ('7', '编程题', '9', '编辑一个登录界面，并用密码进行验证。');
INSERT INTO `questions` VALUES ('7', '编程题', '10', '工资额计算器应用程序\r\n需求分析、某公司需要一个能计算出每位员工在工作一周后的全部薪水的应用程序。\r\n每位员工的周薪是根据员工工作的小时数和每小时的工资额来计算出来的。\r\n一个标准工作周应该是40个小时，而一周以内任何超过40个小时的工作时间则被认为是属于加班时间，因而员工可获取相当于原每小时工资额的1.5倍加班费。\r\n开发一个图形界面应用程序，接收员工工作的小时数和每小时的工资额并最终计算出该员工工作一周后的工资总额。同时设计一个对文本框信息的清除按钮。\r\n并且显示工资额数目的文本框是不可编译的和以红色字体显示给用户。\r\n如果工资管理员输入任何一个文本框的数据不能参加运算时，则系统会给出一条提示错误的信息。');
INSERT INTO `questions` VALUES ('7', '选择题', '1', '利用（          ）可以指定内容面板的背景颜色');
INSERT INTO `questions` VALUES ('7', '选择题', '2', 'JComboBoxes ,JButton 和 JPanel 都属于（      ）的实例');
INSERT INTO `questions` VALUES ('7', '选择题', '3', '字体属性属于控制JLable中所显示字体的（        ）');
INSERT INTO `questions` VALUES ('7', '选择题', '4', '范围属性用来控制（      ）');
INSERT INTO `questions` VALUES ('7', '选择题', '5', '一个JLable组件通过指定（        ）现实文本');
INSERT INTO `questions` VALUES ('7', '选择题', '6', '使用（      ）可以对齐JLable中的文本');
INSERT INTO `questions` VALUES ('7', '选择题', '7', 'RGB值可用于指定（        ）');
INSERT INTO `questions` VALUES ('7', '选择题', '8', '像素是（     ）');
INSERT INTO `questions` VALUES ('7', '选择题', '9', 'JLable上的文本是通过（       ）来指定的。');
INSERT INTO `questions` VALUES ('7', '选择题', '10', 'JLable的范围和大小是通过（     ）来指定的');
INSERT INTO `questions` VALUES ('7', '选择题', '11', '使用（      ）设置JButton上的文本');
INSERT INTO `questions` VALUES ('7', '选择题', '12', '将JTextFiel的（       ）属性设置为false可防止用户对该JTextFiel进行编辑');
INSERT INTO `questions` VALUES ('7', '选择题', '13', '为对齐JTextFiel中的文本，horizontalAlignment属性设置为（      ）');
INSERT INTO `questions` VALUES ('7', '选择题', '14', '改变（      ）属性将改变JTextFiel的位置大小');
INSERT INTO `questions` VALUES ('7', '选择题', '15', '在自定义JLable时，可指定该JLable的（    ）。');
INSERT INTO `questions` VALUES ('7', '选择题', '16', '改变（      ）属性值将改变JTextField的大小和位置。');
INSERT INTO `questions` VALUES ('7', '选择题', '17', ' 可通过使用（     ）帮助用户理解某个组件的用途。');
INSERT INTO `questions` VALUES ('7', '选择题', '18', '  使用（       ）组件允许用户通过键盘输入数据。');
INSERT INTO `questions` VALUES ('7', '选择题', '19', ' 若totalJTextField是一个JTextField，可以使用(      )获取totalJTextField的文本属性值。');
INSERT INTO `questions` VALUES ('7', '选择题', '20', 'Java语言可以用javax.swing包中的类JFileChooser来实现打开和保存文件对话框。用户通过文件对话框不可能获得的信息是 (        )');
INSERT INTO `questions` VALUES ('7', '选择题', '21', '方法（     ）用于修改文本属性。');
INSERT INTO `questions` VALUES ('7', '选择题', '22', '用于完成某个特定任务并且可能会返回一个值的代码部分被认为是（     ）。');
INSERT INTO `questions` VALUES ('7', '选择题', '23', ' 在Java中，（      ）可由””来表示。');
INSERT INTO `questions` VALUES ('7', '选择题', '24', ' 在JTextField中按下某个键可以产生（       ）的事件。');
INSERT INTO `questions` VALUES ('7', '选择题', '25', '（       ）是根据所执行的操作以及这些操作的次序来解决某个问题的一个过程。');
INSERT INTO `questions` VALUES ('7', '选择题', '26', '（       ）是帮助程序员开发算法的一个人工的、非正式的语言。');
INSERT INTO `questions` VALUES ('7', '选择题', '27', 'double类型可以用做存储（      ）。');
INSERT INTO `questions` VALUES ('7', '选择题', '28', '利用一个（     ）组件可隐藏用户输入的信息；默认情况下，用户输入的每一个字符将被回显为一个星号（*）。');
INSERT INTO `questions` VALUES ('7', '选择题', '29', ' 方法的定义是由（     ）组成的。');
INSERT INTO `questions` VALUES ('7', '选择题', '30', ' 在方法调用过程中，位于方法名之后圆括号之间的变量被称为（     ）。');
INSERT INTO `questions` VALUES ('7', '选择题', '31', ' 方法调用的结果是（       ）');
INSERT INTO `questions` VALUES ('7', '选择题', '32', ' 当执行某种特定的用户操作，如点击JButton时，所产生的一个事件对象将被传递至（      ）。');
INSERT INTO `questions` VALUES ('7', '选择题', '33', ' ActionEvent的对象会被传递给（         ）事件处理程序。');
INSERT INTO `questions` VALUES ('7', '选择题', '34', '完成事件处理程序的注册，需要为其关联一个（        ）');
INSERT INTO `questions` VALUES ('7', '选择题', '35', '  实现下哪个接口可以对TextField对象的事件进行监听和处理？ (       )');
INSERT INTO `questions` VALUES ('7', '选择题', '36', ' Fram的默认布局管理器是下列哪一个？ (        )');
INSERT INTO `questions` VALUES ('7', '选择题', '37', ' 在下列事件处理机制中哪个不是机制中的角色？  (      )');
INSERT INTO `questions` VALUES ('7', '选择题', '38', '  要表示表格的数据，需要继承下列哪个类？ (        )');
INSERT INTO `questions` VALUES ('7', '选择题', '39', ' 每个使用Swing构件的程序程序必须有一个、 (         )');
INSERT INTO `questions` VALUES ('7', '选择题', '40', '构造方法何时被调用（        ）');
INSERT INTO `questions` VALUES ('7', '选择题', '41', '在定义JLable时，可指定该JLable的（         ）');
INSERT INTO `questions` VALUES ('7', '选择题', '42', 'JTextFiel中文本的位置可以通过（    ）设置');
INSERT INTO `questions` VALUES ('7', '选择题', '43', '可通过使用（           ）帮助用户理解某个组件的意图');
INSERT INTO `questions` VALUES ('7', '选择题', '44', '使用（   ）组件允许用户键盘输入数据');
INSERT INTO `questions` VALUES ('7', '选择题', '45', '起描述性作用的JLable应该使用（         ）');
INSERT INTO `questions` VALUES ('7', '选择题', '46', '通过使用（   ）可以设置JButton上的文本');
INSERT INTO `questions` VALUES ('7', '选择题', '47', '若totaTextField是一个JtextField，可以使用（     ）获取totaTextField的文本属性值');
INSERT INTO `questions` VALUES ('7', '选择题', '48', '（      ）可表示一个用户的操作，若点击一个JButton');
INSERT INTO `questions` VALUES ('7', '选择题', '49', '方法（  ）用于修改文本属性');
INSERT INTO `questions` VALUES ('7', '选择题', '50', '在JTextField中按下某个键可以产生（        ）的事件');
INSERT INTO `questions` VALUES ('7', '选择题', '51', '利用（           ）方法可以设置JCheckBox');
INSERT INTO `questions` VALUES ('7', '选择题', '52', '利用（          ）方法可以判定JCheckBox是否已被复选');
INSERT INTO `questions` VALUES ('7', '选择题', '53', '在一个GUI中，一次可以选取（      ）个JCheckBox');
INSERT INTO `questions` VALUES ('7', '选择题', '54', '与JCheckBox一同出现的文本被认为是（      ）');
INSERT INTO `questions` VALUES ('7', '选择题', '55', '传递给JOptionPane.showMessageDialog方法的第二个参数为（       ）');
INSERT INTO `questions` VALUES ('7', '选择题', '56', '（         ）常量可以用在一个消息对话框中所显示一条错误信息');
INSERT INTO `questions` VALUES ('7', '选择题', '57', '通常用于警告用户一些潜在的问题且属于JOptionPane的一个对话框图标为（    ）');
INSERT INTO `questions` VALUES ('7', '选择题', '58', '若某个JCheckBox已被选取，则他的isSelected方法将返回（    ）');
INSERT INTO `questions` VALUES ('7', '选择题', '59', '为了能以列表的形式清晰地显示出信息而在JTextArea中添加的一行文本被称为（    ）');
INSERT INTO `questions` VALUES ('7', '选择题', '60', '如果JTextArea的（    ）属性被设置为FALSE，则用户将不能对其中的文本进行编辑');
INSERT INTO `questions` VALUES ('7', '选择题', '61', '（      ）组件允许用户添加并查看多行文本');
INSERT INTO `questions` VALUES ('7', '选择题', '62', 'JTextArea的方法（    ）在利用一个空字符串作为参数来调用时，可删除JTextArea中的所有文本');
INSERT INTO `questions` VALUES ('7', '选择题', '63', 'JTextArea的方法（     ）可向JTextArea中添加文本');
INSERT INTO `questions` VALUES ('7', '选择题', '64', '调用JOptionPane的（      ）方法可显示一个输入对话框');
INSERT INTO `questions` VALUES ('7', '选择题', '65', 'JOptionPane. showInputDialog方法中的第（      ）个参数用于指定为止于输入对话框JTextField 之上的提示信息');
INSERT INTO `questions` VALUES ('7', '选择题', '66', '有方法showInputDialog所显示的输入的对话 框，含有一个向用户提供输入的（     ）组件');
INSERT INTO `questions` VALUES ('7', '选择题', '67', '可使用方法（      ）启动一个JButton');
INSERT INTO `questions` VALUES ('7', '选择题', '68', '当某个JButton拥有了应用程序的焦点时，可通过点击这个JButton或按下（     ）来执行JButton的操作');
INSERT INTO `questions` VALUES ('7', '选择题', '69', '方法showInputDialog将返回（       ）');
INSERT INTO `questions` VALUES ('7', '选择题', '70', 'JSpinner组件允许开发人员指定（           ）');
INSERT INTO `questions` VALUES ('7', '选择题', '71', 'JScrollPane是一个（     ），这意味着其他对象可被加入到其内部');
INSERT INTO `questions` VALUES ('7', '选择题', '72', '在默认情况下，当用户通过JPasswordFiled进行输入时，屏幕中将显示（     ）');
INSERT INTO `questions` VALUES ('7', '选择题', '73', '利用一个（      ）组件可影藏用户输入信息，默认情况下，用户输入的每一个字符将被回显示为一个星号（*）');
INSERT INTO `questions` VALUES ('7', '选择题', '74', '为防止用户修改JPasswordFiled中的文本，需要将其（    ）属性设置为FALSE');
INSERT INTO `questions` VALUES ('7', '选择题', '75', '（      ）方法将返回JSpinner内当前值');
INSERT INTO `questions` VALUES ('7', '选择题', '76', '利用方法（     ）能够将一个actionPerformed事件处理程序注册给其中一个组件');
INSERT INTO `questions` VALUES ('7', '选择题', '77', '改变 JSpinner中的值会产生一个（    ）事件对象');
INSERT INTO `questions` VALUES ('7', '选择题', '78', '点击JButton会产生 一个（    ）  事件对象');
INSERT INTO `questions` VALUES ('7', '选择题', '79', '等待特定的操作及输入，然后对他们进行响应的应用程序被称为（    ）的应用程序');
INSERT INTO `questions` VALUES ('7', '选择题', '80', '方法（     ）可把sateChanged事件处理程序注册给一个组件');
INSERT INTO `questions` VALUES ('7', '选择题', '81', '为一个组件（     ）事件处理程序，从而告知该组件将调用哪一个事件处理程序');
INSERT INTO `questions` VALUES ('7', '选择题', '82', '方法（     ）可为JSpinner设置一个指定值');
INSERT INTO `questions` VALUES ('7', '选择题', '83', '当某个操作发生时所调用的方法被称为(       )');
INSERT INTO `questions` VALUES ('7', '选择题', '84', '当产生ChangeEvent事件时，会调用（     ）事件处理程序');
INSERT INTO `questions` VALUES ('7', '选择题', '85', '可产生ChangeEvent事件的组件有（           ）');
INSERT INTO `questions` VALUES ('7', '选择题', '86', '当执行某种特定的用户操作，如点击Button时，所产生的一个事件对象将被传递至（     ）');
INSERT INTO `questions` VALUES ('7', '选择题', '87', 'ActionEvent的对象会被传递给（     ）事件处理程序');
INSERT INTO `questions` VALUES ('7', '选择题', '88', 'ActionEvent是一种（    ）类型');
INSERT INTO `questions` VALUES ('7', '选择题', '89', '为使JPanel中的组件能够重新显示，可调用（     ）方法');
INSERT INTO `questions` VALUES ('7', '选择题', '90', '为清除JLable中的图片，应该将其icon属性设置为（      ）');
INSERT INTO `questions` VALUES ('7', '选择题', '91', '方法（     ）用于在JLable中显示一幅图片');
INSERT INTO `questions` VALUES ('7', '选择题', '92', '可以利用（        ）方法来设置TitledBorder的标题');
INSERT INTO `questions` VALUES ('7', '选择题', '93', '（    ）方法需要接收一个代表索引值的int型参数并返回该索引位于JConboBox中的值');
INSERT INTO `questions` VALUES ('7', '选择题', '94', 'JConboBox类的（    ）方法可返回当前JConboBox中所选选项的索引值');
INSERT INTO `questions` VALUES ('7', '选择题', '95', '利用（    ）方法可以设置JConboBox下拉列表中一次可以显示的选项数');
INSERT INTO `questions` VALUES ('7', '选择题', '96', '（     ）方法用于返回 JConboBox中所选择选项的索引');
INSERT INTO `questions` VALUES ('7', '选择题', '97', '（    ）方法是用来确定JRadioButton的状态');
INSERT INTO `questions` VALUES ('7', '选择题', '98', '当某个JRadioButton被选取时，会相应的调用（     ）事件处理程序。');
INSERT INTO `questions` VALUES ('7', '选择题', '99', '一个ButtonGroup中包含（        ）JRadionButton');
INSERT INTO `questions` VALUES ('7', '选择题', '100', '当某个ButtonGroup中有一个JRadionButton被选取时，（      ）');
INSERT INTO `questions` VALUES ('7', '选择题', '101', '使用（      ）方法可对JRadionButton组件进行选取或取消');
INSERT INTO `questions` VALUES ('7', '选择题', '102', '组件（      ）是一种状态组件');
INSERT INTO `questions` VALUES ('7', '选择题', '103', 'JRadioButton是一种（      ）类型的按钮');
INSERT INTO `questions` VALUES ('7', '选择题', '104', '通过使用一个（    ）可将多个JRadioButton组织到相应的JFrame中');
INSERT INTO `questions` VALUES ('7', '选择题', '105', '通过使用（    ）方法可将一个JRadioButton添加到某个ButtonGroup组中');
INSERT INTO `questions` VALUES ('7', '选择题', '106', '当创建一个JRadioButton时，它（         ）');
INSERT INTO `questions` VALUES ('7', '选择题', '107', 'GUI组件左上角坐标为（        ）');
INSERT INTO `questions` VALUES ('7', '选择题', '108', '（       ）对象用于管理绘图环境并实现文本及多种图形的绘制');
INSERT INTO `questions` VALUES ('7', '选择题', '109', 'Rectangle类需接收4个参数，这个4个参数分别定义了（    ）');
INSERT INTO `questions` VALUES ('7', '选择题', '110', '类（     ）中定义了一些Java应用程序中用来控制颜色的方法和常量');
INSERT INTO `questions` VALUES ('7', '选择题', '111', '类(       )中定义了可用来绘制文本、直线、矩形及其他图形的一些方法');
INSERT INTO `questions` VALUES ('7', '选择题', '112', '通过调用（      ）方法，可绘制一个填充的椭圆');
INSERT INTO `questions` VALUES ('7', '选择题', '113', '（      ）的getPoint方法将返回一个Point对象，此对象拥有当前鼠标的x值和y值');
INSERT INTO `questions` VALUES ('7', '选择题', '114', '当鼠标按键被释放时，会调用（     ）事件处理程序');
INSERT INTO `questions` VALUES ('7', '选择题', '115', '当鼠标按键被按下并进行移动时会调用（      ）事件处理程序');
INSERT INTO `questions` VALUES ('7', '选择题', '116', '调用（     ）方法可对拖动的鼠标进行注册');
INSERT INTO `questions` VALUES ('7', '选择题', '117', 'MouseEvent对象的x坐标和y坐标与（    ）相关');
INSERT INTO `questions` VALUES ('7', '选择题', '118', '传递到鼠标事件处理程序的（     ）对象包含与所发生鼠标事件相关');
INSERT INTO `questions` VALUES ('7', '选择题', '119', '当按下鼠标键时，会调用（     ）事件处理程序');
INSERT INTO `questions` VALUES ('7', '选择题', '120', 'mouseMotionListener事件处理程序是在（    ）接口中被定义的');
INSERT INTO `questions` VALUES ('7', '选择题', '121', '使用（     ）方法可获去鼠标的位置');
INSERT INTO `questions` VALUES ('7', '选择题', '122', 'MouseEvent类的（        ）方法用于确定所按下的鼠标键');
INSERT INTO `questions` VALUES ('7', '选择题', '123', '（      ）事件处理程序并未定义在MouseListener接口中');
INSERT INTO `questions` VALUES ('7', '选择题', '124', '（        ）的椭圆是一个圆');
INSERT INTO `questions` VALUES ('7', '选择题', '125', '边框并未要求某个对象的（       ）');
INSERT INTO `questions` VALUES ('7', '选择题', '126', '当按下或放开键盘上的一个按键时会产生（      ）事件');
INSERT INTO `questions` VALUES ('7', '选择题', '127', '当释放一个按键时，会调用（      ）事件处理程序');
INSERT INTO `questions` VALUES ('7', '选择题', '128', 'JMenu中包含了（       ）');
INSERT INTO `questions` VALUES ('7', '选择题', '129', '子菜单是一个添加在一个（      ）组件中的JMenu');
INSERT INTO `questions` VALUES ('7', '选择题', '130', '（       ）对话框允许用户选择颜色');
INSERT INTO `questions` VALUES ('7', '选择题', '131', '使用（      ）方法可返回对应事件源');
INSERT INTO `questions` VALUES ('7', '选择题', '132', 'KeyEvent中的常量(             )代表最大的一个虚键码');
INSERT INTO `questions` VALUES ('7', '选择题', '133', '（      ）是一个菜单容器');
INSERT INTO `questions` VALUES ('7', '选择题', '134', '添加到JMenu中以创建子菜单的GUI组件作为(        )');
INSERT INTO `questions` VALUES ('7', '选择题', '135', 'assSeparator方法能够为菜单添加一个分隔（         ）');
INSERT INTO `questions` VALUES ('7', '选择题', '136', '（      ）能够分组管理应用程序中的相关命令');
INSERT INTO `questions` VALUES ('7', '选择题', '137', 'KeyEvent的（      ）方法可返回用户所按按键');
INSERT INTO `questions` VALUES ('7', '选择题', '138', '当用户按下某隔间时，会调用（     ）事件处理程序');
INSERT INTO `questions` VALUES ('7', '选择题', '139', '使用JTextArea的（      ）方法来设置JTextArea中文本的颜色');
INSERT INTO `questions` VALUES ('7', '选择题', '140', '当用户只能选择惟一的一个菜单选项时，应考虑使用（     ）');
INSERT INTO `questions` VALUES ('7', '选择题', '141', '（      ）能够绘制一条垂直直线');
INSERT INTO `questions` VALUES ('7', '选择题', '142', '下面（     ）语句可绘制一条水平直线');
INSERT INTO `questions` VALUES ('7', '选择题', '143', 'Graphics类的（       ）方法可绘制一个圆');
INSERT INTO `questions` VALUES ('7', '选择题', '144', 'drawLine, fillOval和setColor方法都属于（     ）类');
INSERT INTO `questions` VALUES ('7', '选择题', '145', '代码（      ）能绘制一个实心圆');
INSERT INTO `questions` VALUES ('7', '选择题', '146', 'drawLine方法中的第一个参数和第二个参数代表直线的（    ）坐标');
INSERT INTO `questions` VALUES ('7', '选择题', '147', '诸如drawOval和drawRect的方法定义在（    ）类中');
INSERT INTO `questions` VALUES ('7', '选择题', '148', '要为程序的子窗口设定一个由字符串s指定的名字，可以采用的代码是（    ）');
INSERT INTO `questions` VALUES ('7', '选择题', '149', '以下关于菜单的叙述中，正确的是（     ）');
INSERT INTO `questions` VALUES ('7', '选择题', '150', '以下所述内容全部是字型要素的是（       ）');
INSERT INTO `questions` VALUES ('7', '选择题', '151', '以下是关于FlowLayout布局组件排列顺序的叙述，正确的是(       )');
INSERT INTO `questions` VALUES ('7', '选择题', '152', '在Swing中，它的子类能用来创建框架窗口的类是 (       )');
INSERT INTO `questions` VALUES ('7', '选择题', '153', 'MouseListener接口不能处理的鼠标事件是 (       )');
INSERT INTO `questions` VALUES ('8', '判断题', '1', '不能在finally块中执行return,continue等语句，否则会把异常“吃掉”（      ）');
INSERT INTO `questions` VALUES ('8', '判断题', '2', 'Try语句后面可以跟多个catch语句（    ）');
INSERT INTO `questions` VALUES ('8', '判断题', '3', 'finally语句必须执行。（   ）');
INSERT INTO `questions` VALUES ('8', '判断题', '4', 'throws 和throw 功能一样。（    ）');
INSERT INTO `questions` VALUES ('8', '判断题', '5', 'try语句后面必须跟catch语句（  ）');
INSERT INTO `questions` VALUES ('8', '判断题', '6', 'try语句后面只能跟一个catch语句（   ）');
INSERT INTO `questions` VALUES ('8', '判断题', '7', '当代码出现异常时，才执行try/catch/finally语句的finally部分代码（     ）');
INSERT INTO `questions` VALUES ('8', '判断题', '8', 'Try/catch 语句不可以进行嵌套操作。（     ）');
INSERT INTO `questions` VALUES ('8', '判断题', '9', '异常就是程序运行过程中遇到的严重错误，使程序运行中止，或者即使程序能够继续运行，但得出错误的结果甚至导致严重的后果。      （     ）');
INSERT INTO `questions` VALUES ('8', '判断题', '10', '事实上，异常以及异常处理是非常简单，所以程序员选择用异常而不选择自己处理错误。  （     ）');
INSERT INTO `questions` VALUES ('8', '判断题', '11', '异常的处理分为异常抛出和异常捕获。异常抛出就是系统自动检测到特定位置出现的异常，从而可以进行实现编写好的异常处理程序。异常捕获是指用户自己抛出特定的异常来出发异常处理程序，以槛车异常处理程序是否能正常工作。（    ）');
INSERT INTO `questions` VALUES ('8', '判断题', '12', 'finally子句不一定会执行的，要根据具体的情况。（     ）');
INSERT INTO `questions` VALUES ('8', '判断题', '13', '因为java类库提供了十分丰富的异常类型，能够满足绝大多数编程需要，所以，在开发较大的程序时，不需要建立自己的异常类。（    ）');
INSERT INTO `questions` VALUES ('8', '判断题', '14', ' 程序中抛出异常时(throw …)，只能抛出自己定义的异常对象。（    ）');
INSERT INTO `questions` VALUES ('8', '判断题', '15', '一个异常处理中 finally语句块只能有一个或者可以没有。（   ） ');
INSERT INTO `questions` VALUES ('8', '判断题', '16', '程序产生的原因有程序设计本身的错误、程序运行环境改变、软硬件设置的错误 （        ）');
INSERT INTO `questions` VALUES ('8', '判断题', '17', ' finally语句块只有在try语句块中检测到异常时才会执行里面的语句 （       ）');
INSERT INTO `questions` VALUES ('8', '判断题', '18', ' 异常就是程序运行过程中遇到的严重错误，使程序运行终止，或者即使程序能够继续运行，但得出错误的结果甚至导致严重的后果  （       ）');
INSERT INTO `questions` VALUES ('8', '判断题', '19', '异常抛出就是系统自动检测到特定位置出现的异常，从而可以执行事先编写好的异常处理程序  （      ）');
INSERT INTO `questions` VALUES ('8', '判断题', '20', '为了实现异常的声明，在产生异常的方法参数列表之后、方法体之前提供一个含检查型异常的throw语句 （     ）');
INSERT INTO `questions` VALUES ('8', '判断题', '21', ' 异常处理机制允许开发人员将错误处理代码从应用程序的逻辑代码中分离出来，从而改善应用程序的清晰度和可修 (     )');
INSERT INTO `questions` VALUES ('8', '判断题', '22', ' 在Java处理机制中，try-catch-finally语句来捕获异常而用throws来抛出异常 （       ）');
INSERT INTO `questions` VALUES ('8', '判断题', '23', 'Java系统在产生异常后，从上到下依次对每个catch语句进行检测，直到找到和抛出的异常对象想匹配的异常类型为止（    ）');
INSERT INTO `questions` VALUES ('8', '判断题', '24', '利用try语句将可能跑出NumberFormatException异常的语句进行封装并使用catch语句块实现对NumberFormatException异常的处理 （       ）');
INSERT INTO `questions` VALUES ('8', '判断题', '25', ' 非运行时异常就是编译器编译的时候发现不了，只有在运行的时候才报错的异常；而运行时异常则是指编译的时候就能发现的异常 （      ）');
INSERT INTO `questions` VALUES ('8', '判断题', '26', ' Exception由程序处理的异常，分为运行时异常和非运行时异常 （      ）');
INSERT INTO `questions` VALUES ('8', '判断题', '27', '  RuntimeException异常需要区别对待并且编译器允许忽略它们的原因是，它们通常由代码中的严重错误产生 （       ）');
INSERT INTO `questions` VALUES ('8', '判断题', '28', ' CalssCastException指的是试图把一个对象进行非法的类型强制转换，即这个对象不是指定的类，也不是指定的 子类或者超类 （       ）');
INSERT INTO `questions` VALUES ('8', '判断题', '29', '  catch代码块包含的代码不是用来处理相关的try代码块中可能抛出的某种具体类型的代码 （      ）');
INSERT INTO `questions` VALUES ('8', '判断题', '30', '  try代码块只能抛出一个异常不能抛出多个异常，try后面可以跟多个cathc （        ）');
INSERT INTO `questions` VALUES ('8', '判断题', '31', '如果需要关闭一个文件，或者需要释放一项重要资源，可以把相关处理的代码放入一个finally代码中以确保完成工作 （       ） ');
INSERT INTO `questions` VALUES ('8', '判断题', '32', 'IOexception属于Exception包（   ）');
INSERT INTO `questions` VALUES ('8', '判断题', '33', '如果try语句块中未产生异常，应用程序会忽略相应catch语句块。（   ）');
INSERT INTO `questions` VALUES ('8', '判断题', '34', '程序中抛出异常时(throw …)，只能抛出自己定义的异常对象。 （      ）');
INSERT INTO `questions` VALUES ('8', '填空题', '1', '异常也称_______，是在_______过程中发生的，会打断程序_______的事件。');
INSERT INTO `questions` VALUES ('8', '填空题', '2', '抛出异常的关键字是');
INSERT INTO `questions` VALUES ('8', '填空题', '3', '异常语句有两种，分别是__________和');
INSERT INTO `questions` VALUES ('8', '填空题', '4', '不论异常是否产生，________语句总会执行');
INSERT INTO `questions` VALUES ('8', '填空题', '5', '引入________语句，当程序出现异常的时候，不会突然终止，继续执行的语句。');
INSERT INTO `questions` VALUES ('8', '填空题', '6', '__________是公共的异常类，它适用于任何异常操作。');
INSERT INTO `questions` VALUES ('8', '填空题', '7', '使用_____________来提醒类的使用者应该进行异常处理。');
INSERT INTO `questions` VALUES ('8', '填空题', '8', '如果try语句块中未产生异常，应用程序会忽略相应_____________语句块。');
INSERT INTO `questions` VALUES ('8', '填空题', '9', '生成异常对象并把它们提交给运行时系统的过程称为_____________一个异常。');
INSERT INTO `questions` VALUES ('8', '填空题', '10', '运行系统把该异常对象交给这个方法进行处理，这个过程成为____________一个异常。');
INSERT INTO `questions` VALUES ('8', '填空题', '11', '抛出Exception类常用的方法有：___________、_______________、___________。');
INSERT INTO `questions` VALUES ('8', '填空题', '12', '有时如果声明了某个类的一个对象，但没有创建 它（给它分配内存空间），将会出现___异常。');
INSERT INTO `questions` VALUES ('8', '填空题', '13', '_____________语句可以有一个或多个，而且至少有一个______语句或_______语句与try语句配对。');
INSERT INTO `questions` VALUES ('8', '填空题', '14', '异常是________类的子类的对象。');
INSERT INTO `questions` VALUES ('8', '填空题', '15', '如果一个方法抛出的异常没有被捕获，并且也不能有Error类或者RuntimeException类的子类表示，那么读者必须在方法的定义中使用一个________子句来识别异常。');
INSERT INTO `questions` VALUES ('8', '填空题', '16', '如果想要在方法中处理异常，那么必须将可能产生异常的代码放在______________代码块中。一个方法可能包含____________try代码块。');
INSERT INTO `questions` VALUES ('8', '填空题', '17', '异常处理代码位于紧跟在可能抛出异常的try代码块之后的______________代码块中。');
INSERT INTO `questions` VALUES ('8', '填空题', '18', '一个try代码块能够包含______________catch代码块，每个___________块处理一种不同类型的异常。');
INSERT INTO `questions` VALUES ('8', '填空题', '19', '______________代码块用于包含必须在try代码块执行之后运行的代码。');
INSERT INTO `questions` VALUES ('8', '填空题', '20', '不论try代码块的执行如何结束。一个________________代码块将总会在方法发运行结束前被执行。');
INSERT INTO `questions` VALUES ('8', '填空题', '21', '用户自定义的异常类应该从__________________类派生。');
INSERT INTO `questions` VALUES ('8', '填空题', '22', 'java中的异常类为Exception，它包括很多子类，用于处理各种具体的异常，如______异常，RuntimeException为___________________，“运行异常”是设计程序时异常处理的终点，RuntimeException又有他的子类，表示更具体的运行异常，常用的有_____________（空指针异常），_____________（除〇异常），_____________（类型转换异常），_____________（数组元素下表越界异常）');
INSERT INTO `questions` VALUES ('8', '填空题', '23', '“extends Exception”，它的意思是、除包括一个_______的全部含义以外，还有更多的含义。增加的代码数量非常少——实际只添加了______个构建器，对MyException的创建方式进行了定义。');
INSERT INTO `questions` VALUES ('8', '填空题', '24', '在JAVA运行时，如获得一个异常对象，它会自动寻找处理该异常的代码，它从生成异常对象的代码构件开始，沿着方法____________按层回溯寻找，直至找到处理该类异常方法为止。');
INSERT INTO `questions` VALUES ('8', '填空题', '25', '异常对象从产生和被传递交给JAVA运行系统的过程称为_____异常.');
INSERT INTO `questions` VALUES ('8', '填空题', '26', 'public Throwable(String message)构造函数包含getMessage( )方法,用来返回带参数构造函数创建异常时的_______,对无参数构造函数而言,用它返回的是______.');
INSERT INTO `questions` VALUES ('8', '填空题', '27', 'catch子句都带一个参数,该参数是某个异常的类及其变量名(该异常对象的指针),catch用该参数去与抛出异常对象的类进行_________.');
INSERT INTO `questions` VALUES ('8', '填空题', '28', 'Java虚拟机能自动处理运行______.');
INSERT INTO `questions` VALUES ('8', '填空题', '29', '在Java的异常处理机制中，使用_____________语句来捕获并处理异常。');
INSERT INTO `questions` VALUES ('8', '填空题', '30', '在try-catch-finally语句中，不管try是否抛出异常，catch是否捕获到异常_____________语句块都要执行，因为它是异常处理机制的出口。');
INSERT INTO `questions` VALUES ('8', '填空题', '31', 'throwable类是Java异常体系中的根类，它有______________类和________________类。');
INSERT INTO `questions` VALUES ('8', '填空题', '32', 'Java中的异常是当程序中出现不正常情况时生成的一个______________。');
INSERT INTO `questions` VALUES ('8', '填空题', '33', '接受异常对象作为参数的代码称为________________。');
INSERT INTO `questions` VALUES ('8', '填空题', '34', 'throw 子句用来________________异常，而throws子句用来声明异常。');
INSERT INTO `questions` VALUES ('8', '填空题', '35', '异常的处理分为_______________和_______________。');
INSERT INTO `questions` VALUES ('8', '填空题', '36', '在一个程序里，当看到一个数组的下标大于这个数组的最大下标时，这时候是属于___异常。');
INSERT INTO `questions` VALUES ('8', '填空题', '37', '只要一个方法可以抛出你的异常，__________都将检查它是否在该 方法中被捕获。');
INSERT INTO `questions` VALUES ('8', '填空题', '38', '被称为“可检测异常”或“捕获型异常”，而且该异常在编程过程中经常会遇到，它属于编译期异常，那么该异常是');
INSERT INTO `questions` VALUES ('8', '填空题', '39', 'RuntimeException一般称为运行时异常，在程序正式运行的时候会碰到的偶发型异常，这种异常因为是在运行时抛出一般情况下不需要进行捕获操作。该异常继承于________类。');
INSERT INTO `questions` VALUES ('8', '填空题', '40', '如果函数体里面存在throw语句，而且函数体本身没有进行捕捉的话，那么必须使用___在函数头里面添加对应的异常抛出语句，否则无法通过编译。');
INSERT INTO `questions` VALUES ('8', '填空题', '41', '__在Java里面，异常处理机制的编程部分需要使用到几个关键字、');
INSERT INTO `questions` VALUES ('8', '填空题', '42', '如果在finally代码块中返回一值，则这个返回值会_________________try代码块中执行的任何返回语句的值');
INSERT INTO `questions` VALUES ('8', '填空题', '43', '自定义异常必须总是以___________类作为超类，否则将不能定义异常');
INSERT INTO `questions` VALUES ('8', '填空题', '44', 'Error类代表Java应用程序中所发生的异常，该异常通常不需要在应用程序中');
INSERT INTO `questions` VALUES ('8', '填空题', '45', '当应用程序检测并抛出一个异常时，所执行的语句块位于_____________语句块内');
INSERT INTO `questions` VALUES ('8', '填空题', '46', 'Throwable类是所有_____________和_____________的超类');
INSERT INTO `questions` VALUES ('8', '填空题', '47', '通过参数可以让______________语句块与被捕获的对象之间进行交互');
INSERT INTO `questions` VALUES ('8', '填空题', '48', 'catch声明的异常类型必须和_____________里面抛出的类型相同');
INSERT INTO `questions` VALUES ('8', '填空题', '49', '通常嵌入式try代码块用于以_____________处理不同类型的错误。');
INSERT INTO `questions` VALUES ('8', '填空题', '50', 'Throwable有两个直接子类_____________和_____________。');
INSERT INTO `questions` VALUES ('8', '填空题', '51', '如果你想明确地抛出一个RuntimeException，你必须用_____________语句来声明它的类型。');
INSERT INTO `questions` VALUES ('8', '填空题', '52', '___________关键字是用在方法声明中，用来列出从方法中发出的、非起源于Error或RuntimeException中的任何异常。能够主动引发异常的方法必须用_______________来声明。');
INSERT INTO `questions` VALUES ('8', '填空题', '53', '______子句中同时可以指明多个异常，说明该方法将不对这些异常进行处理，而是声明抛弃它们。');
INSERT INTO `questions` VALUES ('8', '选择题', '1', '无论是否发生异常，都需要执行（          ）');
INSERT INTO `questions` VALUES ('8', '选择题', '2', '异常处理变量（         ）。');
INSERT INTO `questions` VALUES ('8', '选择题', '3', '通常的异常类是（      ）');
INSERT INTO `questions` VALUES ('8', '选择题', '4', '异常产生的原因很多，常见的有（       ）。');
INSERT INTO `questions` VALUES ('8', '选择题', '5', '（      ）是除0异常。');
INSERT INTO `questions` VALUES ('8', '选择题', '6', '下列描述中，对使用异常处理的原因描述错误的有（          ）');
INSERT INTO `questions` VALUES ('8', '选择题', '7', '读下面代码，哪个选项是正确的（        ）\r\nimport java.io.*;\r\npublic class Test2{\r\npublic static void main(String []args)throws IOException{\r\nif(args[0]==”hello”)\r\n       throw new IOException();\r\n}\r\n}');
INSERT INTO `questions` VALUES ('8', '选择题', '8', '当变异并且运行下面程序时会出现什么结果？（      ）\r\npublic class ThrowsDemo{\r\nstatic void throwMethod()  {\r\n         System.out.print(\"Inside throwMethod\");\r\n         throw new IOException(\"demo\");\r\n }\r\n public static void main(String [] args){\r\n try{\r\n     throwMethod();\r\n     }catch(IOException e){\r\n       System.out.println(\"Cauht\"+e);\r\n     }\r\n}\r\n}');
INSERT INTO `questions` VALUES ('8', '选择题', '9', '执行下面程序的结果是什么？其中a=4，b=0  （        ）\r\npublic static void divide(int a,int b){\r\n      try{   int  c = a / b;   }\r\n     catch(Exception e){\r\n   System.out.println(\"Exception\");}\r\n      finally{\r\n         System.out.println(\"Finally\");\r\n  }}');
INSERT INTO `questions` VALUES ('8', '选择题', '10', '假定一个方法会产生非RuntimeException异常，如果希望把异常交给调用该方法的方法处理，正确的声明方式是什么？  （        ）');
INSERT INTO `questions` VALUES ('8', '选择题', '11', '阅读下面的代码段、\r\ntry{\r\ntryThis();\r\nreturn;\r\n}catch(IOException x1){\r\n   System.out.println(“exception 1”);\r\nReturn;\r\n}catch(Exception x2){\r\nSystem.out.println(“exception 1”);\r\nReturn;\r\n}finally{\r\n   System.out.println(“finally”)\r\n}\r\n如果tryThis（）抛出一个IOException，那么屏幕的输出是什么？\r\n（      ）');
INSERT INTO `questions` VALUES ('8', '选择题', '12', '下列哪些内容不是异常的含义？（       ）');
INSERT INTO `questions` VALUES ('8', '选择题', '13', ' 自定义的异常类可从下列哪个类继承？（     ）');
INSERT INTO `questions` VALUES ('8', '选择题', '14', ' 当方法遇到异常又不知如何处理时，下列哪种做法是正确的？（        ）');
INSERT INTO `questions` VALUES ('8', '选择题', '15', ' 如要抛出异常，应用下列哪种子句？（        ）');
INSERT INTO `questions` VALUES ('8', '选择题', '16', '对于catch子句的排列，下列哪种是正确的？（         ）');
INSERT INTO `questions` VALUES ('8', '选择题', '17', '下列选项中属于异常的关键字是（         ）');
INSERT INTO `questions` VALUES ('8', '选择题', '18', '下列选项中属于Exception异常的是（       ）');
INSERT INTO `questions` VALUES ('8', '选择题', '19', '以下是异常的处理，哪个选项是正确的（      ）');
INSERT INTO `questions` VALUES ('8', '选择题', '20', '所有属于（    ）子类的异常都是非检查型异常');
INSERT INTO `questions` VALUES ('8', '选择题', '21', 'Java编译程序对于（       ）需要加强捕获或声明要求');
INSERT INTO `questions` VALUES ('8', '选择题', '22', '如果试图捕获多个错误，可在（        ）语句块的后面使用多个（）语句块');
INSERT INTO `questions` VALUES ('8', '选择题', '23', '将需要处理异常作为（      ）语句块的一个参数来进行声明');
INSERT INTO `questions` VALUES ('8', '选择题', '24', 'try语句块可以（       ）');
INSERT INTO `questions` VALUES ('8', '选择题', '25', '所有RuntimeException子类的异常都属于（         ）');
INSERT INTO `questions` VALUES ('8', '选择题', '26', '（    ）是所有Exception和Error类的共同超类');
INSERT INTO `questions` VALUES ('8', '选择题', '27', 'Error和Exception是Throwable的两个直接子类，其中下列属于Error的直接子类的是（        ）');
INSERT INTO `questions` VALUES ('8', '选择题', '28', '在try代码中声明的变量只能在该块的大括号（        ）使用');
INSERT INTO `questions` VALUES ('8', '选择题', '29', '假定一个方法可能会产生非RuntimeException异常,如果希望把异常交给调用该方法的方法处理，正确的声明方式是（       ）');
INSERT INTO `questions` VALUES ('8', '选择题', '30', ' try代码块中包含的是可能引起一个或多个异常代码,能够抛出异常的代码必须位于（     ）代码块中。');
INSERT INTO `questions` VALUES ('8', '选择题', '31', ' Java一般不会检查（      ）是否被处理，而本身在程序中也不能捕获该类型的异常，因为它一旦产生，该程序基本会处于需要终止的状态');
INSERT INTO `questions` VALUES ('8', '选择题', '32', ' 当应用程序检测到异常时，会调用（       ）');
INSERT INTO `questions` VALUES ('8', '选择题', '33', '调用方法Integer.parseInt(“123.45”)；将抛出（         ）');
INSERT INTO `questions` VALUES ('8', '选择题', '34', 'try语句块中未产生异常，应用程序会忽略相应（      ）');
INSERT INTO `questions` VALUES ('8', '选择题', '35', 'Java编译程序对于（       ）需要捕获和声明要求');
INSERT INTO `questions` VALUES ('8', '选择题', '36', '如果方法未能改正所出现的问题，则方法将（      ）异常');
INSERT INTO `questions` VALUES ('8', '选择题', '37', '如果try语句中未产生异常，应用程序会忽略相应的（     ）');
INSERT INTO `questions` VALUES ('8', '选择题', '38', '执行语句过程中对异常的处理被称为异常（         ）');
INSERT INTO `questions` VALUES ('8', '选择题', '39', '在（       ）之后总有至少一个catch语句块或一个可以选用的finally语句块');
INSERT INTO `questions` VALUES ('8', '选择题', '40', '当应用程序检测到异常时，会调用（      ）');
INSERT INTO `questions` VALUES ('8', '选择题', '41', '每个catch块都需要指定一个（      ），表示异常处理程序所能处理的异常类型');
INSERT INTO `questions` VALUES ('8', '选择题', '42', '如果try语句块中没有抛出异常，则（       ）');
INSERT INTO `questions` VALUES ('8', '选择题', '43', '  (       )类及其子类所表示的异常通常不需要捕获');
INSERT INTO `questions` VALUES ('8', '选择题', '44', '  所有RuntimeException子类的异常都属于（       ）');
INSERT INTO `questions` VALUES ('8', '选择题', '45', '在oneMethod()方法运行正常的情况下将显示什么？（      )\r\npublic void test() {\r\ntry { oneMethod();\r\nSystem.out.println(\"condition 1\");\r\n} catch (ArrayIndexOutOfBoundsException e) {\r\nSystem.out.println(\"condition 2\");\r\n} catch(Exception e) {\r\nSystem.out.println(\"condition 3\");\r\n} finally {\r\nSystem.out.println(\"finally\");\r\n}\r\n}\r\nWhich will display if oneMethod run normally?');
INSERT INTO `questions` VALUES ('8', '选择题', '46', '如果try语句块中没有跑出异常，则（     ）');
INSERT INTO `questions` VALUES ('8', '选择题', '47', '每个catch块都需要制定一个（        ），表示异常处理程序所能处理的异常类型');
INSERT INTO `questions` VALUES ('8', '选择题', '48', '给出下面代码、   public class test{     static int a[] = new a[10];     public static void main(String args[]) {      System.out.println(arr[10]);     }    }  那个选项是正确的？ （      ）');
INSERT INTO `questions` VALUES ('9', '判断题', '1', 'public boolean mkdir()的作用是根据当前对象的抽象路径生成一个目录。（  ）');
INSERT INTO `questions` VALUES ('9', '判断题', '2', 'File.delete()方法可以删除不为空的目录。（    ）');
INSERT INTO `questions` VALUES ('9', '判断题', '3', 'File.mkdirs()方法可以创建目录字符串包括的所有目录。（    ）');
INSERT INTO `questions` VALUES ('9', '判断题', '4', 'BuffereReader.readLine()方法可以读入新行字符“\n”。（     ）');
INSERT INTO `questions` VALUES ('9', '判断题', '5', 'BufferWriter.newLine()方法的作用是创建新行。（     ）');
INSERT INTO `questions` VALUES ('9', '判断题', '6', 'FileInputStream.read()方法的作用是读取一个byte字节数据。（    ）');
INSERT INTO `questions` VALUES ('9', '判断题', '7', 'public String[]list()的作用是列出路径下的文件名和生成文件。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '8', 'File类中提供了两种种用来生成文件或者目录的构造方法，分别是public File(String path)和public File(String path,String name)。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '9', 'FileOutputStream值得是文件输入流。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '10', 'public String[]list()的作用是列出路径下的文件名和目录名。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '11', '目录的删除语法如 File.delete()，删除File类的目录或者文件，返回值是boolean,且就算要删除的目录为空也能删除。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '12', 'FileReader类一般有FileReader(File file)和FileWriter(File file)两种创建语法。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '13', 'FileWriter(File file )语句的作用是根据File类创建文件读入类。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '14', 'FileReader类中的ready()方法的作用是判断文件读入类是否到达文件尾。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '15', 'FileReader类中getEncoding()方法的作用是取得文件读入类的编码机制。（    ）');
INSERT INTO `questions` VALUES ('9', '判断题', '16', 'File类的delete方法的返回值的类型是String。（    ）');
INSERT INTO `questions` VALUES ('9', '判断题', '17', 'FileReader 可以处理多个文件（      ）');
INSERT INTO `questions` VALUES ('9', '判断题', '18', '因为InputStream、OutputStream、Reader、Writer是基本输入输出流的抽象类，所以都能用于直接创建对象来完成输入输出操作（    ）');
INSERT INTO `questions` VALUES ('9', '判断题', '19', 'InputStream类是个抽象类，作为字节输出流的直接或间接的父类，它定义了许多有用的所有子类必须的方法（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '20', 'File类并没有指定信息怎样从文件读取或向文件存储，而需要由像FileInputStream与FileOutStream等这些类来实现。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '21', 'File类的常用方法public String toString()的作用是将文件对象的路径转换为字节返回。    （   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '22', 'InputStream类是个抽象类，作为字节输入流的直接或间接的父类，它定义了许多有用的、所有子类必须的方法，包括读取、移动指针、标记、复位、关闭等方法。（  ）');
INSERT INTO `questions` VALUES ('9', '判断题', '23', '由InputStream类和OutputStream类派生出来的一些常用的子类。子类中一般都重写上面说明的父类方法，并增加新的方法或实现java.io包中的某些接口，以适应读写各种不同格式数据流的需要，以提高输入输出的效率，将低层内容封装起来。（  ）');
INSERT INTO `questions` VALUES ('9', '判断题', '24', ' File类的常用方法 public String toString()是将文件对象的路径转换为字符串返回。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '25', 'File类的常用方法 public FileInputStream(String name)的作用是为参数name所指定的文件名创建一个FileInputStream对象。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '26', 'RandomAccessFile类实现随机读写，且可以在文件的任意位置执行数据读写。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '27', '类InputStream类的void close()方法的作用是条用这个函数可以关闭流并且释放流的系统资源。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '28', 'SequeceInputStream用来把两个或更多的InputStream输入流对象转换为单个InputStream输入流对象使用。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '29', '可以使用从FileInputStream对象或RandonAccessFile对象活的的FileChannel对象来写出文件。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '30', 'FileReader 可以处理多个文件（    ）');
INSERT INTO `questions` VALUES ('9', '判断题', '31', '程序员必须创建 System .in,System .out 和 System .err 对象。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '32', 'BufferedReader可以读入字符串信息（    ）');
INSERT INTO `questions` VALUES ('9', '判断题', '33', 'FileInputStream类可以读入流信息（     ）');
INSERT INTO `questions` VALUES ('9', '判断题', '34', 'FileOutputStream类可以写出流信息（     ）');
INSERT INTO `questions` VALUES ('9', '判断题', '35', '流可以理解为信息以串的形式传播，这个串的单位可以是比特，也可以是字符（实际上还是比特（   ）。');
INSERT INTO `questions` VALUES ('9', '判断题', '36', '很多输入输出类都直接过间接的从两个基类派生而来，这两个基类分别是InputStream和OutputStream两个抽象类，但有些输入输出类比较特殊，不是由这两个基类继承（  ）');
INSERT INTO `questions` VALUES ('9', '判断题', '37', '在JAVA中，InputStream定义了四种形式参数不同的read函数，分别是public int read();public int read(byte[]b);public int read(byte[]b,int len);public int read (byte[]b,int off,int len)。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '38', 'Java中，字符流不是字节流，它们之间有区别的。  （   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '39', 'Java为储存文件提供了两个类FileInputStream和FileOutputStream。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '40', 'FileInputStream类的功能在于把文件以直接的形式从磁盘读取出来，即使读的是字符流。                             （   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '41', '在Java中，提供了数据输入输出流，它们独立于机器，而且可以读取基本的数据类型（primitive），这在以前的语言机制是做不到的。         （  ）');
INSERT INTO `questions` VALUES ('9', '判断题', '42', '输入输出是指应用程序与外部设备及其他计算机进行数据交流的操作（  ）');
INSERT INTO `questions` VALUES ('9', '判断题', '43', '流式输入输出的特点是数据的获取和发送沿数据序列的顺序进行（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '44', 'Java语言中提供了比较完善的处理输入输出数据的功能，实现这些I/O操作的类和接口都在java.io包中。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '45', '因为InputStream、OutputStream、Reader、Writer是基本输入输出流的抽象类，所以都能用于直接创建对象来完成输入输出操作（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '46', 'InputStream类是个抽象类，作为字节输出流的直接或间接的父类，它定义了许多有用的、所有子类必须的方法（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '47', 'File类并没有指定信息怎样从文件读取或向文件存储，而需要由像FileInputStream与FileOutStream等这些类来实现。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '48', '由于FileInputStream和FileOutputStream直接从InputStream和OutputStream继承而来，并没有对其功能扩充，因此所有的读写操作只能以字节为单位对二进制数据进行处理。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '49', 'DataInputStream类和DataOutputStream类是从过滤流类继承过来，这两个流的对象均不能独立地实现数据的输入和输出处理，必须与其他输入流与输出流对象一起使用，才能实现不同类型数据的读写。（    ）');
INSERT INTO `questions` VALUES ('9', '判断题', '50', 'RandomAccessFile类的对象仅可以用于数据输入，不能用于数据输出。（    ）');
INSERT INTO `questions` VALUES ('9', '判断题', '51', 'Java系统事先定义的两个流对象分别与系统的标准输入和标准输出相连接。这两个流对象分别是System.in和System.out。（    ）');
INSERT INTO `questions` VALUES ('9', '判断题', '52', 'System类是java.lang包中的一个很重要的类，它的所有方法和属性都是非静态的（  ）');
INSERT INTO `questions` VALUES ('9', '判断题', '53', '与大多数输入输出方法一样，System.in.read()方法可能引发IOException异常，因此必须使用异常处理的try{…}catch(IOException e){..}语句块来捕获异常并进行异常处理。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '54', 'println()方法在向屏幕输出数据完毕时自动换行，光标停留在下一行的第一个字符位置。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '55', '流是输入/输出设备的一种抽象表示，这些设备是数据源头或是数据终点。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '56', '当向一个流中写入数据的时候，这个流就被称为输出流。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '57', '流文件读入与写出类可以操作其它格式的文件，如Word、Excel格式（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '58', 'File.delete()方法可以删除不为空的目录。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '59', 'File.mkdirs()方法可以创建目录字符串包括的所有目录。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '60', 'BufferReader.readLine()方法可以读入新行字符“\n”。（    ）');
INSERT INTO `questions` VALUES ('9', '判断题', '61', 'BufferWriter.newLine()方法的作用是创建新行。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '62', 'FileInputStream.read()方法的作用是读取一个byte字节数据。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '63', '文件流的getChannel()方法返回文件的FileChanner对象。（    ）');
INSERT INTO `questions` VALUES ('9', '判断题', '64', '缓冲区包含将要写入文件或者从文件读取的数据。而且ByteBuffer对象不能被I/O操作直接引用。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '65', '可以使用从FileInputStream对象或RandonAccessFile对象活的的FileChannel对象来写出文件。（    ）');
INSERT INTO `questions` VALUES ('9', '判断题', '66', 'PrintStream中提供了方便的格式输出方法。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '67', 'PushbackInputStream不能预读数据中开始的一个字节。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '68', 'SequeceInputStream用来把两个或更多的InputStream输入流对象转换为单个InputStream输入流对象使用。（    ）');
INSERT INTO `questions` VALUES ('9', '判断题', '69', 'int read()方法的用途是从输入流中读取下一个字符流数据，其返回值是0-255之间的一个整数。（    ）');
INSERT INTO `questions` VALUES ('9', '判断题', '70', '类InputStream类的void close()方法的作用是条用这个函数可以关闭流并且释放流的系统资源。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '71', 'RandomAccessFile类实现随机读写，且可以在文件的任意位置执行数据读写。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '72', 'InputStream、OutputStream、Reader、Writer是基本输入输出流的抽象类，可以用于直接创建对象来完成输入输出操作。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '73', 'File类的常用方法 public FileInputStream(String name)的作用是为参数name所指定的文件名创建一个FileInputStream对象。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '74', 'File类的常用方法 public String toString()是将文件对象的路径转换为字符串返回。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '75', '由InputStream类和OutputStream类派生出来的一些常用的子类。子类中一般都重写上面说明的父类方法，并增加新的方法或实现java.io包中的某些接口，以适应读写各种不同格式数据流的需要，以提高输入输出的效率，将低层内容封装起来。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '76', '. BufferedReader是Reader的一个子类，它具有缓冲的作用，避免了频繁的从物理设备中读取信息。（  ）');
INSERT INTO `questions` VALUES ('9', '判断题', '77', 'InputStream类是个抽象类，作为字节输入流的直接或间接的父类，它定义了许多有用的、所有子类必须的方法，包括读取、移动指针、标记、复位、关闭等方法。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '78', 'File类的常用方法public String toString()的作用是将文件对象的路径转换为字节返回。    （   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '79', '如果顺序文件中的文件指针不是指向文件头，那么必须先关闭文件，然后在再打开它才能从 文件头开始读。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '80', '在随机存取中查找指定记录时不必检查每一条记录。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '81', '随机存取文件中的记录必须等长。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '82', 'seek 方法必须以文件头为基准进行查找。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '83', 'Java 中的每个文件均以一个文件结束标记（EOF），或者以记录在系统管理数据结构中的 一个特殊的字节编号结束。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '84', '如果要在 Java 中进行文件处理，则必须使用 Java .swing 包。（    ）');
INSERT INTO `questions` VALUES ('9', '判断题', '85', 'InputStream 和 OutputStream 都是抽象类。（   ）');
INSERT INTO `questions` VALUES ('9', '判断题', '86', 'Java 语言中对文件没有结构要求，所以需要使用随机存取的程序必须自己建立它们。（   ）');
INSERT INTO `questions` VALUES ('9', '填空题', '1', '目录操作的类是_______，所在的类包是________.');
INSERT INTO `questions` VALUES ('9', '填空题', '2', '文件操作分为两种，分别是________和_______操作。');
INSERT INTO `questions` VALUES ('9', '填空题', '3', '读入与写出文本文件的类是___________,所在类包是__________。');
INSERT INTO `questions` VALUES ('9', '填空题', '4', '逐行读入与写出文本文件的类是___________，所在类包是__________。');
INSERT INTO `questions` VALUES ('9', '填空题', '5', '读入与写出流文件的类是____________，所在类包是___________。');
INSERT INTO `questions` VALUES ('9', '填空题', '6', 'FileReader类读入一个字节的方法是__________。');
INSERT INTO `questions` VALUES ('9', '填空题', '7', '目录的创建语法如下、 (1)、File.mkdir(),根据File类定义的目录_________创建目录，返回值是_________. (2)、File.mkdirs()，根据File类定义的目录字符串创建目录，返回值是boolean，该函数可以创建目录字符串包括的所有目录。');
INSERT INTO `questions` VALUES ('9', '填空题', '8', '目录的删除语法如下、 File.delete()，删除File类的目录或者________，返回值是_____,如果要删除的目录______不能删除。');
INSERT INTO `questions` VALUES ('9', '填空题', '9', '读入与写出文本文件的类是_______类与__________类，所在的类包是_______。');
INSERT INTO `questions` VALUES ('9', '填空题', '10', 'public boolean mkdir()的作用是根据当前对象的抽象路径生成一个____________。');
INSERT INTO `questions` VALUES ('9', '填空题', '11', 'public String[]list()的作用是列出路径下的文件名和_____________。');
INSERT INTO `questions` VALUES ('9', '填空题', '12', 'File类中提供了三种用来生成文件或者目录的构造方法。public File(String path):通过给定的路径来创建_________。public File(String path ,_________):使用父目录字符串和子抽象路径创建文件对象。public File(File dir,String name):使用_________和子抽象路径创建文件对象。');
INSERT INTO `questions` VALUES ('9', '填空题', '13', '文件的读写中两个最常用的流类是______________和___________，它们生成与文件链接的字节流。');
INSERT INTO `questions` VALUES ('9', '填空题', '14', '_要向文件中写数据，需用FileOutputStream定义的________方法。');
INSERT INTO `questions` VALUES ('9', '填空题', '15', '_文件输入/输出流采用了________读写，又是需要有选择的读写文件，例如读写一行或几行。___________可实现这种操作，它能让你从文件的不同位置读写不同长度的数据。');
INSERT INTO `questions` VALUES ('9', '填空题', '16', '_RamdonAccessFile所实现的接口是___________和');
INSERT INTO `questions` VALUES ('9', '填空题', '17', '读取和写入文件已存在的文件有两种不同的的方式，分别是________和_______，后一种方式也称为直接存取。');
INSERT INTO `questions` VALUES ('9', '填空题', '18', 'InputStream类的ublic void close( )方法作用是关闭__________，并释放流占用的系统资源。');
INSERT INTO `questions` VALUES ('9', '填空题', '19', 'DataInputStream类和______________类是从过滤流类继承过来，这两个流的对象均不能独立地实现数据的输入和输出处理，必须与其他输入流与输出流对象一起使用，才能实现不同类型数据的读写。这两个类与_____________类和FileOutputStream类相配合可以完成对格式数据的读写。');
INSERT INTO `questions` VALUES ('9', '填空题', '20', '完成随机文件读写的类与Java中大部分的输入输出流类不同，没有针对输入、输出对应出现两个相应的类，它是由___________直接继承而来的，仅使用一个____________类来完成。所以RandomAccessFile类的对象既可以用于数据输入，也可以用于___________。');
INSERT INTO `questions` VALUES ('9', '填空题', '21', 'File对象一共有四种构造方式，它们分别是：public File(File parent,String child)；从parent表示的_______名和hild表示的文件名创建对象。public File(String pathname)；将给定的路径名称字符串转换成一个抽象的路径名，构造一个新的文件对象。public File(String parent,String child)该构造函数将pathname分成两部分______和_______，参数parent表示目录或文件所在_______，参数child表示目录或文件名称。 public File(URI uri)；从一个URI创建File对象，有关URI的类容将在后面有介绍。');
INSERT INTO `questions` VALUES ('9', '填空题', '22', 'InputStreamReader是____________和_________之间的桥梁，由于System.in是字节流，需要用它来包装之后变为字符流供给___________使用。');
INSERT INTO `questions` VALUES ('9', '填空题', '23', 'File类并没有指定信息怎样从文件读取或向文件存储，而需要由像________与______等这些类来实现。');
INSERT INTO `questions` VALUES ('9', '填空题', '24', 'DataInputStream和DataOutputStream分别实现了java.io包中的_______和_______接口，能够读写Java基本数据类型的数据和Unicode编码格式的字符串。');
INSERT INTO `questions` VALUES ('9', '填空题', '25', 'System.in是_________类的对象，调用___________方法就可以实现标准输入的读操作。');
INSERT INTO `questions` VALUES ('9', '填空题', '26', 'JAVA中定义了__________和_______这两种类型的流。');
INSERT INTO `questions` VALUES ('9', '填空题', '27', 'JAVA中，控制台输入由从__________读取数据来完成。');
INSERT INTO `questions` VALUES ('9', '填空题', '28', '从BuffereReader读取字符，我们一般用_________方法。');
INSERT INTO `questions` VALUES ('9', '填空题', '29', '文件操作分为两种，分别是__________和_________操作。');
INSERT INTO `questions` VALUES ('9', '填空题', '30', '文本文件读入类的创建方法是__________________。');
INSERT INTO `questions` VALUES ('9', '填空题', '31', '在Java中，类InputStream定义了以下的函数、public__int__read();public int read(____________);public__int__read(_________,int off,____________)；这是read()函数的三种形式，第一种形式实现的是从__________读取一个字节，然后保存为一个_________类型的整数保存起来。后两种形式返回的都是读取的_________。区别是第二种方法保存在下标从_______开始的数组中，而第三种不仅规定下标从_______开始，而且规定了长度为len。');
INSERT INTO `questions` VALUES ('9', '填空题', '32', '字符流的类包括StringBufferInputStream。它和ByteArrayInputStream类几乎没有区别，只不过后者使用一个________作为缓冲。');
INSERT INTO `questions` VALUES ('9', '填空题', '33', '现在的程序都离不开文档了，各种各样的记录都保存在文档里。程序启动时读取文档，退出时也将最新记录保存在文档里，Java为储存文件提供了两个类_______和______等。');
INSERT INTO `questions` VALUES ('9', '填空题', '34', '路径分为_______路径和________路径。____路径是指一个完整的路径，系统不需要任何额外的信息都可以储存文件；______路径就不同，系统需要从其他路径中获取信息才能确定那个位置。');
INSERT INTO `questions` VALUES ('9', '填空题', '35', 'InputStreamReader是_________和_______之间的桥梁，由于System.in是字节流，需要用它来包装之后变为字符流供给___________使用。');
INSERT INTO `questions` VALUES ('9', '填空题', '36', 'Java中的流类包含了InputStream、_________、Reader、_______四类，前两者面向字节，称为________；后两者面向________，称为字符流。');
INSERT INTO `questions` VALUES ('9', '填空题', '37', 'printStream只用于输出，新增了_______和println方法，Reader和Writer类是面向字符的，优点是可以直接_________字符，而不用转换成_________。RandomAccessFile类既可以读又可以写，同时它还支持随机读写，因此是文件操作中功能最强大的类，也是首选类。');
INSERT INTO `questions` VALUES ('9', '填空题', '38', '输入输出是指应用程序与外部设备及其他计算机进行_______的操作。');
INSERT INTO `questions` VALUES ('9', '填空题', '39', 'java.io包中提供了各种各样的输入输出流类，它们都是_________的直接子类，每一个流类代表一种特定的________或_______。');
INSERT INTO `questions` VALUES ('9', '填空题', '40', '在这些类中，作为Object类的直接_________，基本输入流（InputStream）和基本输出流（OutputStream）是处理以_________为基本单位的字节流类，读写以__________为单位进行。');
INSERT INTO `questions` VALUES ('9', '填空题', '41', 'File类并没有指定信息怎样从文件读取或向文件存储，而需要由像_______与_____等这些类来实现。');
INSERT INTO `questions` VALUES ('9', '填空题', '42', 'FileInputStream和FileOutputStream直接从__________和__________继承而来');
INSERT INTO `questions` VALUES ('9', '填空题', '43', 'DataInputStream和DataOutputStream分别实现了java.io包中的_______和_____接口，能够读写Java基本数据类型的数据和Unicode编码格式的字符串。');
INSERT INTO `questions` VALUES ('9', '填空题', '44', 'Java系统事先定义的两个流对象分别与系统的标准输入和标准输出相连接。这两个流对象分别是__________和___________。');
INSERT INTO `questions` VALUES ('9', '填空题', '45', 'System.out是PrintStream类的对象，PrintStream类是_______________类的子类。');
INSERT INTO `questions` VALUES ('9', '填空题', '46', '流是输入/输出设备的一种________表示，这些设备是数据源头或是数据终点。');
INSERT INTO `questions` VALUES ('9', '填空题', '47', '当向一个流中写入数据的时候，这个流就被称为___________。');
INSERT INTO `questions` VALUES ('9', '填空题', '48', '目录操作的类是________，所在的类包是_________。');
INSERT INTO `questions` VALUES ('9', '填空题', '49', '读入与写出文本文件的类是_____________,所在类包是_____________。');
INSERT INTO `questions` VALUES ('9', '填空题', '50', '逐行读入与写出文本文件的类是____________，所在类包是__________。');
INSERT INTO `questions` VALUES ('9', '填空题', '51', '读入与写出流文件的类是___________，所在类包是_________。');
INSERT INTO `questions` VALUES ('9', '填空题', '52', 'FileReader类读入一个字节的方法是_________。');
INSERT INTO `questions` VALUES ('9', '填空题', '53', '字节流由_________类和______________类的子类来表示。');
INSERT INTO `questions` VALUES ('9', '填空题', '54', '读取和写入文件已存在的文件有两种不同的的方式，分别是___________和______，后一种方式也称为直接存取。');
INSERT INTO `questions` VALUES ('9', '填空题', '55', '在System类中有三个预先定义好的成员变量、_______,_____和_________。');
INSERT INTO `questions` VALUES ('9', '填空题', '56', 'Reader是一个抽象类，它的一个具体的子类是InputStreamReader，该子类把_____转换成_______。');
INSERT INTO `questions` VALUES ('9', '填空题', '57', '接口__________和_________提供了对对象直接读/写的一组方法，类ObjectInputStream和ObjectOutputStream分别实现了这两个接口。');
INSERT INTO `questions` VALUES ('9', '填空题', '58', 'StringBufferInputStream用来将一个或更多_______转换为_________进行读取。');
INSERT INTO `questions` VALUES ('9', '填空题', '59', 'System.in是__________类的对象，调用_________方法就可以实现标准输入的读操作。');
INSERT INTO `questions` VALUES ('9', '填空题', '60', 'System.out是__________类的对象，PrintStream类是__________类的子类，其中定义了可输出多种不同类型数据的方法print()和println()方法。');
INSERT INTO `questions` VALUES ('9', '填空题', '61', '作为Object类的直接子类，基本输入流（InputStream）和基本输出流（OutputStream）是处理以______字节为基本单位的字节流类，读写以_______为单位进行；Reader和Writer类是专门处理_________位字符流的类，读写以________（Unicode）为单位进行。');
INSERT INTO `questions` VALUES ('9', '填空题', '62', 'BufferedReader类的含义是缓冲_________。');
INSERT INTO `questions` VALUES ('9', '填空题', '63', '在java.io包中定义的大多数类是实行流式操作的，但文件操作类不是，它独立于InputStream类和OutpuStream等类，包括_____、________、_____、_________等类，它们是专门处理文件的。');
INSERT INTO `questions` VALUES ('9', '填空题', '64', 'InputStream类的ublic void close( )方法作用是关闭______，并释放流占用的系统资源。');
INSERT INTO `questions` VALUES ('9', '填空题', '65', 'DataInputStream类和_____________类是从过滤流类继承过来，这两个流的对象均不能独立地实现数据的输入和输出处理，必须与其他输入流与输出流对象一起使用，才能实现不同类型数据的读写。这两个类与_______________类和FileOutputStream类相配合可以完成对格式数据的读写。');
INSERT INTO `questions` VALUES ('9', '填空题', '66', '完成随机文件读写的类与Java中大部分的输入输出流类不同，没有针对输入、输出对应出现两个相应的类，它是由____________直接继承而来的，仅使用一个__________类来完成。所以RandomAccessFile类的对象既可以用于数据输入，也可以用于________。');
INSERT INTO `questions` VALUES ('9', '填空题', '67', 'public int read( )、该方法从输入流的当前位置读取一个_________的数据，并返回一_______型值，如果当前位置没有数据则返回-1。该方法为abstract，由子类来具体实现。');
INSERT INTO `questions` VALUES ('9', '填空题', '68', 'readInt()方法读取一个__________型数，writeInt(int v )方法______一个int型数。readUTF()和writeUTF(String str)可以按UTF-8编码读写一个_______。');
INSERT INTO `questions` VALUES ('9', '填空题', '69', 'Sun的文档对ObjectInputStream&ObjectOutputStream类有详细的阐述。可以被当作流传送的对象自身必须实现 java.io.Serializable接口或者java.io.Externalizable接口，它们被称为_________和外部化。__________(Serialization)是Java API内建的，不需要再添加什么，它的缺点是占用的空间不大。');
INSERT INTO `questions` VALUES ('9', '填空题', '70', '和其他输出流不同的是，PrintStream类有一个方法print，参数除了和OutputStream是同样的之外，多了char和________。也就是说，这个类可以直接输出字符而不用经过手动类型的转换，虽然它是通过_________间接实现的。');
INSERT INTO `questions` VALUES ('9', '编程题', '1', '编写一个应用程序，完成文件的拷贝功能，文件名从命令行得到。');
INSERT INTO `questions` VALUES ('9', '编程题', '2', '请编写用RandomAccessFile oureFile; String s=“information to Append  n mon！\n”;');
INSERT INTO `questions` VALUES ('9', '编程题', '3', '利用文件输入输出流编写一个实现文件拷贝的程序，源文件名和目标文件名通过命令行参数传入。');
INSERT INTO `questions` VALUES ('9', '编程题', '4', '编写一个程序，在当前目录下创建一个子目录test，在这个新创建的子目录下创建一个文件，并把这个文件设置成只读。');
INSERT INTO `questions` VALUES ('9', '编程题', '5', '编写一个程序，从键盘输入一串字符，从屏幕输出并将其存入a.txt文件中。');
INSERT INTO `questions` VALUES ('9', '编程题', '6', '随机读取文件中的字符信息。');
INSERT INTO `questions` VALUES ('9', '编程题', '7', '从键盘敲入一系列字母，将其存储到文件中.');
INSERT INTO `questions` VALUES ('9', '编程题', '8', '从键盘敲入一系列字母，将其存储到文件中，对其进行升序排序后，存到另一个文件中，并显示在屏幕上.');
INSERT INTO `questions` VALUES ('9', '编程题', '9', '编写一段程序， 将c:jdk1.3example\newFile.txt中保存的信息输出到屏幕上。');
INSERT INTO `questions` VALUES ('9', '编程题', '10', '编写一段程序，实现从键盘输入以“？”结束的一串字符，然后将该串中“？”前面的所有字符顺序写入磁盘文件c:jdk1.3example\newFile.txt中。');
INSERT INTO `questions` VALUES ('9', '编程题', '11', '编写程序，接收用户从键盘输入的数据，回车后保存到文件test.txt中。若用户输入符号#，则退出程序。');
INSERT INTO `questions` VALUES ('9', '编程题', '12', '某人在玩游戏的时候输入密码123456后成功进入游戏（输错3次则被强行退出），要求用程序实现密码验证的过程。');
INSERT INTO `questions` VALUES ('9', '编程题', '13', '创建一个输入“你好！”的JAVA语言程序，在屏幕上显示出来。');
INSERT INTO `questions` VALUES ('9', '编程题', '14', '编程、编写一个截取字符串的函数，输入为一个字符串和字节数，输出为按字节截取的字符串。 但是要保证汉字不被截半个，如“我ABC”4，应该截为“我AB”，输入“我ABC汉DEF”，6，应该输出为“我ABC”而不是“我ABC+汉的半个”。');
INSERT INTO `questions` VALUES ('9', '编程题', '15', '编写一段程序，要求从键盘输入123bc并显示出来。');
INSERT INTO `questions` VALUES ('9', '编程题', '16', '编写一段使用FileInputStream类与FileOutputStream类复制文件的代码。 17、编写一段代码，使其能够将读入的信息用字节数组存放，转换成字符串后再输出。');
INSERT INTO `questions` VALUES ('9', '编程题', '17', '编写一段程序， 将c:jdk1.3example\newFile.txt中保存的信息输出到屏幕上。');
INSERT INTO `questions` VALUES ('9', '编程题', '18', '编写代码实现从键盘输入整型、单精度型、布尔型数据、然后将这些数据写入磁盘。');
INSERT INTO `questions` VALUES ('9', '编程题', '19', '编写程序将磁盘文件c:jdk1.3exampledataFile.txt中保存的各类数据复制到磁盘文件c:jdk1.3exampleoutFile.txt中。');
INSERT INTO `questions` VALUES ('9', '编程题', '20', '利用文件输入输出流编写一个实现文件拷贝的程序，源文件名和目标文件名通过命令行参数传入');
INSERT INTO `questions` VALUES ('9', '编程题', '21', '编写一个程序，从键盘输入10个整数，并将这些数据排序后在标准输出上输出');
INSERT INTO `questions` VALUES ('9', '编程题', '22', '编写一个程序，从键盘输入一串字符，从屏幕输出并将其存入a.txt文件中');
INSERT INTO `questions` VALUES ('9', '编程题', '23', '编写一个程序，从键盘输入一串字符，统计这串字符中英文字母、数字、其他符号的字符数。');
INSERT INTO `questions` VALUES ('9', '编程题', '24', '编写一段代码，使其实现从键盘输入8，能得到一个值为2的作用。');
INSERT INTO `questions` VALUES ('9', '选择题', '1', '如要求读取文件中的中间一段内容，最方便的采用下列哪种流来操作？（    ）');
INSERT INTO `questions` VALUES ('9', '选择题', '2', '当检索一个压缩文件时，首先要建立压缩文件输入流对象。该对象 （   ）');
INSERT INTO `questions` VALUES ('9', '选择题', '3', '下列哪个是FileReader文件的创建语句(     )');
INSERT INTO `questions` VALUES ('9', '选择题', '4', 'File类的mkdir方法的返回值的类型是（    ）');
INSERT INTO `questions` VALUES ('9', '选择题', '5', 'FileReader类的ready方法的作用是（     ）');
INSERT INTO `questions` VALUES ('9', '选择题', '6', 'FileWriter类的getEncoding方法的作用是（     ）');
INSERT INTO `questions` VALUES ('9', '选择题', '7', 'FileReader的父类是（     ）');
INSERT INTO `questions` VALUES ('9', '选择题', '8', 'FileInputStream类的skip(long n)方法的作用是（     ）');
INSERT INTO `questions` VALUES ('9', '选择题', '9', 'File类的delete方法的返回值的类型是（     ）');
INSERT INTO `questions` VALUES ('9', '选择题', '10', 'FileWriter类的write(int c)方法的作用是（     ）');
INSERT INTO `questions` VALUES ('9', '选择题', '11', '在（    ）情况下用户能使用 File 类。');
INSERT INTO `questions` VALUES ('9', '选择题', '12', '在 FilterOutputStream 类中，下面是合法的是（    ）');
INSERT INTO `questions` VALUES ('9', '选择题', '13', 'RandomAccessFile 类的（    ）方法可用于设置文件定位指针在文件中的位置。');
INSERT INTO `questions` VALUES ('9', '选择题', '14', 'RandomAccessFile 类的（    ）方法可用于从指定流上读取字符串。');
INSERT INTO `questions` VALUES ('9', '选择题', '15', 'RandomAccessFile 类的（      ）方法可用于从指定流上读取整数');
INSERT INTO `questions` VALUES ('9', '选择题', '16', '以下哪个类没有实现FilterInputStream.(      )');
INSERT INTO `questions` VALUES ('9', '选择题', '17', '下面哪个文件操作类可以实现一次读入多个文件（       ）');
INSERT INTO `questions` VALUES ('9', '选择题', '18', '文本文件读入类的创建方法是（     ）');
INSERT INTO `questions` VALUES ('9', '选择题', '19', 'File类的public boolean delete()方法的作用是（      ）。');
INSERT INTO `questions` VALUES ('9', '选择题', '20', 'File类的public String toString()方法有什么作用。（      ）');
INSERT INTO `questions` VALUES ('9', '选择题', '21', '下面是从文件读取对象的代码，请将代码补充完整。（      ）\r\nFile theFile = new File(“MyFile”)\r\n  //Perhaps check out the file…\r\n  //Create the object output stream for the file\r\n  ObjectInputStream objectIn = null;\r\ntry{\r\nobjectIn =new ObjectInputStream(new ______________(theFile));\r\n}catch(IOException e ){\r\ne.printStackTrace(System.err);\r\nSystem.exit(1);\r\n}');
INSERT INTO `questions` VALUES ('9', '选择题', '22', ' File类中以字符串形式返回文件名称的方法是（      ）。');
INSERT INTO `questions` VALUES ('9', '选择题', '23', '下列不是InputStream子类的是（      ）');
INSERT INTO `questions` VALUES ('9', '选择题', '24', '在读字符文件Post.dat时，使用该文件作为参数的类(     )');
INSERT INTO `questions` VALUES ('9', '选择题', '25', '以下哪个是文本文件读入类（      ）');
INSERT INTO `questions` VALUES ('9', '选择题', '26', '以下哪个是FileOutputStream创建语法（      ）');
INSERT INTO `questions` VALUES ('9', '选择题', '27', '文本文件读入类的创建方法是（      ）');
INSERT INTO `questions` VALUES ('9', '选择题', '28', '（D）流类的 close 方法不可用于关闭文件。');
INSERT INTO `questions` VALUES ('9', '选择题', '29', '下面哪个不是属于读取和写入已存在的文件的方式。（      ）');
INSERT INTO `questions` VALUES ('9', '选择题', '30', '字母、数字和特殊符号称为(B )');
INSERT INTO `questions` VALUES ('9', '选择题', '31', 'File类的public File[] listFiles()方法有什么作用（      ）');
INSERT INTO `questions` VALUES ('9', '选择题', '32', 'JAVA程序是通过什么来完成输入输出的、(     )');
INSERT INTO `questions` VALUES ('9', '选择题', '33', '计算机中的流是(      )');
INSERT INTO `questions` VALUES ('9', '选择题', '34', '当输入一个字节流时，要(     )');
INSERT INTO `questions` VALUES ('9', '选择题', '35', '计算机处理的最小数据单元称为（    ）');
INSERT INTO `questions` VALUES ('9', '选择题', '36', '一组相关记录称为（   ）');
INSERT INTO `questions` VALUES ('9', '选择题', '37', ' 为读取的内容进行处理后再输出，需要使用下列哪种流？(      )');
INSERT INTO `questions` VALUES ('9', '选择题', '38', '计算机处理的数据最终分解为（    ）组合');
INSERT INTO `questions` VALUES ('9', '选择题', '39', 'FileReader的父类是（     ）');
INSERT INTO `questions` VALUES ('9', '选择题', '40', 'BufferedReader的父类是(       )');
INSERT INTO `questions` VALUES ('9', '选择题', '41', '（     ）对象可显示一个供用户从磁盘中选择某个文件的对话框');
INSERT INTO `questions` VALUES ('9', '选择题', '42', '用来检索文件或目录信息的类为（     ）');
INSERT INTO `questions` VALUES ('9', '选择题', '43', '数据流可以分为两种，它们是（      ）');
INSERT INTO `questions` VALUES ('9', '选择题', '44', 'Java流被分为字节流、字符流两大流类，两者都作为（      ）类的直接子类');
INSERT INTO `questions` VALUES ('9', '选择题', '45', '字节流继承于InputStream和OutputStream，（      ）继承于InputStreamReader和OutputStreamWriter');
INSERT INTO `questions` VALUES ('9', '选择题', '46', '属于Java输入输出流的、且处理的是char类型的类是（      ）');
INSERT INTO `questions` VALUES ('9', '选择题', '47', 'import java.io.*;\r\npublic class Test2 {\r\n     public static void main(String args[])throws Exception{\r\n      int a=4;\r\n       BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\r\n        System.out.println(\"请输入一个数字\");\r\n        String input=br.readLine();\r\n           int b=Integer.parseInt(input);\r\n                  if(b>a){\r\n                      int sum=b/a;\r\n                      System.out.println(sum);\r\n                 }else{\r\n               System.out.println(\"输入错误\");\r\n        }\r\n     }\r\n      当输入的数字是8时，那打印输出的结果是（      ）');
INSERT INTO `questions` VALUES ('9', '选择题', '48', '以下那个是java.io包中一个兼有输入输出功能的类（      ）\r\nA. Object                 B. Serializable\r\nC. RandomAccessFile       D. Java.io中不存在这样的类');
INSERT INTO `questions` VALUES ('9', '选择题', '49', '在与FileWriter类结构结合使用时，（    ）类能够将字符串和数值写入一个文件');
INSERT INTO `questions` VALUES ('9', '选择题', '50', 'Java为了提高程序员的编程效率，定义了专门的类PipedInputStream，它也像类ByteArrayInputStream一样，有一些数据成员，以下关于这些数据成员的描述，（     ）是错的。');
INSERT INTO `questions` VALUES ('9', '选择题', '51', '文件打开过程中所产生的异常类为（    ）');
INSERT INTO `questions` VALUES ('9', '选择题', '52', '为16位Unicode字符流提供读和写操作支持的类分别是（    ）');
INSERT INTO `questions` VALUES ('9', '选择题', '53', '在JAVA中会经常使用Scanner类实现从控制台读取用户输入，下面的选项正确的是（       ）');
INSERT INTO `questions` VALUES ('9', '选择题', '54', 'RandomAccessFile类指针控制方法public long getFilePointer()的作用是\r\n（       ）');
INSERT INTO `questions` VALUES ('9', '选择题', '55', '用来读取字符流的类是（     ）');
INSERT INTO `questions` VALUES ('9', '选择题', '56', 'Writer的write(int ch)的作用是（     ）');
INSERT INTO `questions` VALUES ('9', '选择题', '57', 'BufferedReader类的（        ）方法能够读取文件中的一行');
INSERT INTO `questions` VALUES ('9', '选择题', '58', '字节通常是由（     ）位组成');
INSERT INTO `questions` VALUES ('9', '选择题', '59', 'BufferedReader类的（    ）方法可关闭已经打开并进行读取操作的一个文件');
INSERT INTO `questions` VALUES ('9', '选择题', '60', '以下属性或FileReader类的常用属性或方法（       ）');
INSERT INTO `questions` VALUES ('9', '选择题', '61', '以下那个是文本文件读入类（       ）');
INSERT INTO `questions` VALUES ('9', '选择题', '62', '数字、字母、特殊字符均属于（      ）');
INSERT INTO `questions` VALUES ('9', '选择题', '63', 'ByteArrayOutputStream的含义是（        ）');
INSERT INTO `questions` VALUES ('9', '选择题', '64', '当文件内无可读取的数据时，readLine方法（    ）');
INSERT INTO `questions` VALUES ('9', '选择题', '65', '保存在文件中的数据被称为（    ）');
INSERT INTO `questions` VALUES ('9', '选择题', '66', '（  ）包提供了用来实现文件处理的类及其方法');
INSERT INTO `questions` VALUES ('9', '选择题', '67', 'System.in的作用是（      ）');
INSERT INTO `questions` VALUES ('9', '选择题', '68', 'JComboBox类的（   ）方法可删除JComboBox中的所有选项');
INSERT INTO `questions` VALUES ('9', '选择题', '69', '以下哪个流类是字符流（       ）');
INSERT INTO `questions` VALUES ('9', '选择题', '70', '为打开一个用于读取的文件，需使用一个（    ）对象');
INSERT INTO `questions` VALUES ('9', '选择题', '71', '下面程序的输出结果是：Enter a characters.     135abc ,空白处应当填（      ）。\r\n     Import java.io.*；\r\n    class BRRead{\r\npublic static void main(String[]args)throws IOException{\r\nchar c;\r\nBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\nSystem.out.println(“Enter a character”);\r\n_____________________\r\nSystem.out.println(c);\r\n   }\r\n}');
INSERT INTO `questions` VALUES ('9', '选择题', '72', 'Java将文件看做为一个字节（     ）序列');
INSERT INTO `questions` VALUES ('10', '判断题', '1', ' 在并行程序中，当两个并行的线程，在没有任何约束的情况下，访问一个共享变量或者共享对象的一个域，而且至少要有一个操作是写操作，就可能发生数据竞争错误。（   ）');
INSERT INTO `questions` VALUES ('10', '判断题', '2', '原语Compare-and-swap（CAS） 是实现无锁数据结构的通用原语。（   ）');
INSERT INTO `questions` VALUES ('10', '判断题', '3', '获得内部锁的唯一途径是、进入这个内部锁保护的同步块或方法。（    ）');
INSERT INTO `questions` VALUES ('10', '判断题', '4', 'volatile 变量具有 synchronized 的可见性特性，但是不具备原子特性。（    ）');
INSERT INTO `questions` VALUES ('10', '判断题', '5', '减小竞争发生可能性的有效方式是尽可能缩短把持锁的时间。（   ）');
INSERT INTO `questions` VALUES ('10', '判断题', '6', '一个线程对象的具体操作是由run()方法的内容确定的，但是Thread类的run方法是空的,其中没有内容;所以用户程序要么派生一个Thread的子类并在子类里重新定义run()方法,要么使一个类实现Runnable接口并书写其中run()方法的方法体实现（    ）');
INSERT INTO `questions` VALUES ('10', '判断题', '7', 'java.lang.Runnable 接口并重写 run()方法可以用来创建一个新线程。（    ）');
INSERT INTO `questions` VALUES ('10', '判断题', '8', '.线程的优先级是不能改变的。                    （    ）');
INSERT INTO `questions` VALUES ('10', '判断题', '9', '要在程序中实现线程必须导入java.io.Thread类。                       （     ）');
INSERT INTO `questions` VALUES ('10', '判断题', '10', '线程之间可以共享数据。                                   （    ）');
INSERT INTO `questions` VALUES ('10', '判断题', '11', '  启动线程时可以调用run()方法或start()方法。             （   ）');
INSERT INTO `questions` VALUES ('10', '判断题', '12', 'C 和 Java 都是多线程语言。（     ）');
INSERT INTO `questions` VALUES ('10', '判断题', '13', '如果线程死亡，它便不能运行。（    ）');
INSERT INTO `questions` VALUES ('10', '判断题', '14', '在 Java 中，高优先级的可运行线程会抢占低优先级线程。（    ）');
INSERT INTO `questions` VALUES ('10', '判断题', '15', 'Windows 和 Windows NT 的 Java 系统使用分时的方法。 因此可以使某一线程抢占具有相同优先级的线程。（    ）');
INSERT INTO `questions` VALUES ('10', '判断题', '16', '线程不是能够独立运行的程序，是某个程序内部的一个顺序执行流。（    ）');
INSERT INTO `questions` VALUES ('10', '判断题', '17', '程序开发者必须创建一个线程去管理内存的分配。（     ）');
INSERT INTO `questions` VALUES ('10', '判断题', '18', '一个线程在调用它的 start 方法，之前，该线程将一直处于出生期。（     ）');
INSERT INTO `questions` VALUES ('10', '判断题', '19', '当调用一个正在进行线程的 stop( )方法时，该线程便会进入休眠状态。（    ）');
INSERT INTO `questions` VALUES ('10', '判断题', '20', '如果线程的 run 方法执行结束或抛出一个不能捕获的例外，线程便进入等待状态。 （     ）');
INSERT INTO `questions` VALUES ('10', '填空题', '1', 'Java语言是一种简单的、面向对象的、分布的、解释的、__________、安全的、独立于平台的、可移植可扩展的、高性能的、__________的动态程序设计语言。');
INSERT INTO `questions` VALUES ('10', '填空题', '2', '线程体是指__________方法中的执行代码，该方法是程序的入口点。');
INSERT INTO `questions` VALUES ('10', '填空题', '3', '创建一个多线程程序时可以通过实现类_________，也可以通过实现接口_______。');
INSERT INTO `questions` VALUES ('10', '填空题', '4', '线程调度时要根据线程的优先级进行，线程的优先级可分为10 种，其中________代表优先级最高，_______代表优先级最低。');
INSERT INTO `questions` VALUES ('10', '填空题', '5', '在进行线程同步时常使用___________、________、___________等关键字或方法。');
INSERT INTO `questions` VALUES ('10', '填空题', '6', '每个小应用程序在运行时都会顺序地执行方法、__________、________、_________、___________和__________。');
INSERT INTO `questions` VALUES ('10', '填空题', '7', '多线程是JAVA程序的______机制，它能同步共享数据、处理不同事件。');
INSERT INTO `questions` VALUES ('10', '填空题', '8', '_________本身不能独立运行，必须在进程中执行，使用进程的地址空间。');
INSERT INTO `questions` VALUES ('10', '填空题', '9', '如果其他线程企图访问一个处于不可用状态的对象，该对象将不能正确响应从而产生无法预料的结果，这种情况就是一种_____________。');
INSERT INTO `questions` VALUES ('10', '填空题', '10', '__________指得是程序运行中，多个线程竞争共享资源时可能出现的一种系统状态，每个线程都被阻塞，都不会结束，进入一种永久等待状态。');
INSERT INTO `questions` VALUES ('10', '填空题', '11', 'ReentrantLock锁必须在___________块中释放。');
INSERT INTO `questions` VALUES ('10', '填空题', '12', '基于锁的多线程设计更可能引发________、_______、__________等情况，令一些线程无法继续其进行。');
INSERT INTO `questions` VALUES ('10', '填空题', '13', '多线程运行时分析工具（MTRAT）是由IBM开发的一个即高效又准确的动态分析工具，它可以查找出多线程程序中的潜在的____________和死锁。');
INSERT INTO `questions` VALUES ('10', '填空题', '14', '指定线程阻塞多长时间的方法是_______________。');
INSERT INTO `questions` VALUES ('10', '填空题', '15', '在Java语言中，实现线程的同步执行要用到关键字_________________。');
INSERT INTO `questions` VALUES ('10', '填空题', '16', '.Java的线程调度策略是一种基于优先级__________________。');
INSERT INTO `questions` VALUES ('10', '填空题', '17', '当使用Thread t=new Thread(r)创建一个线程时，表达式、r instanceof Thread的值是___________。');
INSERT INTO `questions` VALUES ('10', '填空题', '18', 'java中的线程由CPU，_________，________等三部分构成。');
INSERT INTO `questions` VALUES ('10', '填空题', '19', 'FileInputStream 是字节流;BufferedWriter 是字符流;ObjectOutputStream 是________。');
INSERT INTO `questions` VALUES ('10', '填空题', '20', '对Java对象读、写的过程被称为_________。');
INSERT INTO `questions` VALUES ('10', '填空题', '21', 'Swing的事件处理机制包括__________、事件和事件处理者。');
INSERT INTO `questions` VALUES ('10', '填空题', '22', '程序中实现多线程的方法有两种、继承______类和实现Runnable接口。');
INSERT INTO `questions` VALUES ('10', '填空题', '23', '在Java应用程序启动时，Java运行系统为该应用程序创建了一个称为_____的线程组。');
INSERT INTO `questions` VALUES ('10', '填空题', '24', '在程序运行阶段，要给图像框控件装载图片，应调用___________函数来完成');
INSERT INTO `questions` VALUES ('10', '填空题', '25', '如果一个线程调用____________方法，将使线程进入休眠状态。');
INSERT INTO `questions` VALUES ('10', '填空题', '26', 'Java中，可以通过建立_______________类或其子类的实例创建和控制线程。');
INSERT INTO `questions` VALUES ('10', '填空题', '27', '线程由于调用sleep()方法进入阻塞状态，当睡眠结束时，该线程将进入___________状态。');
INSERT INTO `questions` VALUES ('10', '填空题', '28', 'Java中，线程必须属于一个进程。线程是程序运行中的一个____________。');
INSERT INTO `questions` VALUES ('10', '填空题', '29', '线程的_____方法只会使具有与当前线程相同优先级的线程有运行的机会。');
INSERT INTO `questions` VALUES ('10', '填空题', '30', '当实现Runnable接口时，要实现的方法_______。');
INSERT INTO `questions` VALUES ('10', '填空题', '31', '在Java程序中，主线程一般具有________优先级。');
INSERT INTO `questions` VALUES ('10', '填空题', '32', '实现线程交互的____________和________方法在Object类中定义。');
INSERT INTO `questions` VALUES ('10', '填空题', '33', '按照Java的线程模型，代码和___________构成了线程体。');
INSERT INTO `questions` VALUES ('10', '填空题', '34', '在多线程程序设计中，如果采用继承Thread类的方法创建线程，则需要重写Thread类的______方法。');
INSERT INTO `questions` VALUES ('10', '选择题', '1', '实现线程的创建有（      ）方式。');
INSERT INTO `questions` VALUES ('10', '选择题', '2', 'Thead类定义于下列哪一个包中？（      ）');
INSERT INTO `questions` VALUES ('10', '选择题', '3', '下列那一个包给出了Runnable接口的定义？（    ）');
INSERT INTO `questions` VALUES ('10', '选择题', '4', '线程生命周期中正确的状态是（      ）');
INSERT INTO `questions` VALUES ('10', '选择题', '5', '阅读下面编程题\r\npublic class Test 2               {\r\npublic static void main(String args[]){\r\nThread t=new test2();\r\nt.start();}\r\npublic void run(){\r\nsysetem.out.println(\"How  are  you\");}\r\n}\r\n在程序下画线处填入正确选项是  （         ）');
INSERT INTO `questions` VALUES ('10', '选择题', '6', '阅读下面编程题\r\npublic class Test   implements Runnble{\r\npublic static void main(String args[]){\r\n______________________________________;\r\nt.start();\r\npublic void run(){\r\nsysetem.out.println(\"Hello\");}\r\n}\r\n在程序下画线处填入正确选项是（       ）');
INSERT INTO `questions` VALUES ('10', '选择题', '7', '下列特点中，哪个是Java 虚拟机执行的特点之一？（      ）');
INSERT INTO `questions` VALUES ('10', '选择题', '8', '当浏览器重新返回 Applet 所在页面时，将调用 Applet 类的方法是（     ）');
INSERT INTO `questions` VALUES ('10', '选择题', '9', '当使用SomeThread t=new SomeThread()创建一个线程时，下列叙述中正确的是（     ）');
INSERT INTO `questions` VALUES ('10', '选择题', '10', '下列叙述，错误的是（       ）');
INSERT INTO `questions` VALUES ('10', '选择题', '11', '如果线程正处于阻塞状态，不能够使线程直接进入可运行状态的情况是(        )');
INSERT INTO `questions` VALUES ('10', '选择题', '12', 'Java语言中，负责并发管理的机制是（    ）');
INSERT INTO `questions` VALUES ('10', '选择题', '13', '下列描述中，错误的是（   ）');
INSERT INTO `questions` VALUES ('10', '选择题', '14', 'Thread类中能运行线程体的方法是（   ）');
INSERT INTO `questions` VALUES ('10', '选择题', '15', '可以使当前同级线程重新获得运行机会的方法是（       ）');
INSERT INTO `questions` VALUES ('10', '选择题', '16', '下列关于Java语言中线程的叙述找中，正确的是和一（    ）');
INSERT INTO `questions` VALUES ('10', '选择题', '17', '阅读下面程序\r\npublic class Try extends Thread{\r\npublic static void main (String args[]){\r\nTry  t =new Try();\r\nt.start();}\r\npublic void run(int j){\r\nint i=0;\r\nwhile(i<5){\r\nsystem.out.println(\"祝你成功！\");\r\ni++;}}}\r\n该程序要求打印5行“祝你成功！”，必须改正程序中的某行代码，程序才能完成。选择正确的修改是（       ）');
INSERT INTO `questions` VALUES ('10', '选择题', '18', '线程在生命周期中要经历5种状态。如果线程当前是新建状态，则它可到达的下一个状态是（          ）');
INSERT INTO `questions` VALUES ('10', '选择题', '19', '下列关于Java多线程并发控制机制的叙述中，错误的是（      ）');
INSERT INTO `questions` VALUES ('10', '选择题', '20', 'Java程序的并发机制是（      ）');
INSERT INTO `questions` VALUES ('10', '选择题', '21', 'Java虚拟机（JVM）运行Java代码时，不会进行操作是（        ）');
INSERT INTO `questions` VALUES ('10', '选择题', '22', '使新创建的线程参与运行调度方法是（    ）');
INSERT INTO `questions` VALUES ('10', '选择题', '23', 'Java中的线程模型由三部分组成，与线程模型组成无关的是（    ）');
INSERT INTO `questions` VALUES ('10', '选择题', '24', '阅读下列代码段\r\nclass Test  implements Runnable {\r\npublic int run(){\r\nint i=0;\r\nwhile(true){\r\ni++;\r\nsystem.out.println(\"i\"+i);}}}}\r\n上述代码的编译结果是（    ）');
INSERT INTO `questions` VALUES ('10', '选择题', '25', '为实现多线程之间的通信，需要使用下列那种流才合适？（         ）');
INSERT INTO `questions` VALUES ('10', '选择题', '26', '下列方法中可以用来创建一个新线程的是（        ）');
INSERT INTO `questions` VALUES ('10', '选择题', '27', '下列关于线程优先级的说法中，正确的是（         ）\r\nA、线程的优先级是不能改变的             B、线程的优先级是在创建线程时设置的\r\nC、在创建线程后的任何时候都可以设置     D、B和C');
INSERT INTO `questions` VALUES ('10', '选择题', '28', '（     ）方法不可以用来暂时停止当前线程的运行。');
INSERT INTO `questions` VALUES ('10', '选择题', '29', '在多线程并发程序设计中，能够给对象x加锁的语句是（      ）');
INSERT INTO `questions` VALUES ('10', '选择题', '30', '下列方法能够用来实现线程之间通信的是（        ）');
INSERT INTO `questions` VALUES ('10', '选择题', '31', '下列关于线程的说法中正确的是（        ）');
INSERT INTO `questions` VALUES ('10', '选择题', '32', '下列有关线程的叙述哪个是正确的？(      )');
INSERT INTO `questions` VALUES ('10', '选择题', '33', 'resume（）方法负责恢复被哪个方法挂起的线程？(       )');
INSERT INTO `questions` VALUES ('10', '选择题', '34', '.Java虚拟机的执行过程有多个特点，下列哪个特点不属于JVM执行特点？（      ）');
INSERT INTO `questions` VALUES ('10', '选择题', '35', '下列叙述中，正确的是（       ）');
INSERT INTO `questions` VALUES ('10', '选择题', '36', '.关于下列程序的功能，说法正确的是 (      )\r\npublic class ko10_1 extends Thread {\r\nint n;\r\nko10_1(){\r\nThread td=new Thread(this);\r\ntd.start();\r\n}\r\npublic void run() {\r\nfor (n=0;n<6;n++) {\r\ntry {\r\nSystem.out.print(n);\r\nThread.sleep(500); }\r\ncatch(InterruptedException e)\r\n{ System.out.println(\"Exception\"); } }\r\n}\r\npublic static void main(String args[]) {\r\nnew ko10_1(); }\r\n}');
INSERT INTO `questions` VALUES ('10', '选择题', '37', '.一个Java application 运行后，在系统中是作为一个 (      )');
INSERT INTO `questions` VALUES ('10', '选择题', '38', '下列关于Java多线程并发控制机制的叙述中，错误的是（        ）');
INSERT INTO `questions` VALUES ('10', '选择题', '39', '关于以下程序段的执行结果，说法正确的是 (      )\r\npublic class Borley extends Thread{\r\npublic static void main(String argv[]){\r\nBorley b = new Borley();\r\nb.start();\r\n}\r\npublic void run(){\r\nSystem.out.println(\"Running\");\r\n}\r\n}');
INSERT INTO `questions` VALUES ('10', '选择题', '40', '下面不属于线程生命周期的状态的是: （          ）');
INSERT INTO `questions` VALUES ('10', '选择题', '41', '使比其自身优先级低的线程运行的Thread类的方法是、（         ）');
INSERT INTO `questions` VALUES ('10', '选择题', '42', '下面关于对象加锁的叙述错误的是、 （       ）');
INSERT INTO `questions` VALUES ('10', '选择题', '43', '为实现多线程之间的通信，需要使用下列哪种流才合适？ （       )');
INSERT INTO `questions` VALUES ('10', '选择题', '44', '下面关于线程优先级的说法中，错误的是、（         ）');
INSERT INTO `questions` VALUES ('10', '选择题', '45', '下列方法中哪个是执行线程的方法？（        ）');
INSERT INTO `questions` VALUES ('10', '选择题', '46', '使创建的线程参与运行调度的方法是（           ）');
INSERT INTO `questions` VALUES ('10', '选择题', '47', '下列方法中可用于定义线程体的是（    ）');
INSERT INTO `questions` VALUES ('10', '选择题', '48', '如果线程调用下列方法，不能保证使该线程停止运行的是（         ）');
INSERT INTO `questions` VALUES ('10', '选择题', '49', '下列方法中可以用来创建一个新线程的是（       ）。');
INSERT INTO `questions` VALUES ('10', '选择题', '50', '阅读下列程序\r\npublic class Test implements Runnable{\r\n  private int  x=0;\r\n private int  y=0;\r\n boolean flag =true;\r\npublic static void main (String args[]){\r\nTest r =new Test ();\r\nthread  t1= new  thread(r);\r\nthread  t2= new  thread(r);\r\nt1.start();\r\nt2.start();}\r\npublic void run(){\r\nwhile(flag){\r\nx++;\r\ny++；\r\nsystem.out.println(\"(\"+x_,\",\"+y+\")\"）；\r\nif（x>=10){\r\nflag=false;}}}\r\n下列对程序运行结果描述正确的是（     ）');
INSERT INTO `questions` VALUES ('10', '选择题', '51', '在一个线程中调用下列方法，不会改变线程运行状态的是（       ）');
INSERT INTO `questions` VALUES ('10', '选择题', '52', '在一个线程中使用sleep（1000）方法，将使该线程在多少时间后获得CPU控制，假设睡眠过程中不会有其他事件唤醒该线程（         ）');
INSERT INTO `questions` VALUES ('10', '选择题', '53', '为实现多线程之间的通信，需要使用下列哪种流才合适（       ）。');
INSERT INTO `questions` VALUES ('10', '选择题', '54', '以下哪个方法用于定义线程的执行体（      ）');
INSERT INTO `questions` VALUES ('10', '选择题', '55', ' 要串行化某些类的对象，这些类就必须实现 （       ）');
INSERT INTO `questions` VALUES ('10', '选择题', '56', '线程交互中不提倡使用的方法是、（       ）');
INSERT INTO `questions` VALUES ('10', '选择题', '57', ' 对象状态的持久化是通过（        ）');
INSERT INTO `questions` VALUES ('10', '选择题', '58', '在Java  applet程序中，用户自定义的Applet子类常常覆盖父类的(     )方法来完成applet界面的初始化工作。');
INSERT INTO `questions` VALUES ('10', '选择题', '59', 'main方法是Java  Application程序执行的入口点，关于main方\r\n法的方法头以下哪项是合法的（           ）。');
INSERT INTO `questions` VALUES ('10', '选择题', '60', '下面哪些不是线程的状态？（        ）');
INSERT INTO `questions` VALUES ('10', '选择题', '61', '如果当前线程需要让出CPU的使用权时，则调用方法、（         ）');
INSERT INTO `questions` VALUES ('10', '选择题', '62', '关于线程的同步，下面说法正确的是、（       ）');
INSERT INTO `questions` VALUES ('10', '选择题', '63', '关于线程的死锁，下面的说法正确的是（         ）');
INSERT INTO `questions` VALUES ('10', '选择题', '64', '在浏览器中执行applet 程序，将被最先执行的方法是（     ）。');
INSERT INTO `questions` VALUES ('10', '选择题', '65', '编译JavaApplet 源程序文件编译后产生的字节码文件扩展名为（       ）。');
INSERT INTO `questions` VALUES ('10', '选择题', '66', '在编写JavaApplet程序时，一定要引入（import）（      ）包。');
INSERT INTO `questions` VALUES ('10', '选择题', '67', '容器Panel和Applet缺省使用的布局编辑策略是（      ）。');
INSERT INTO `questions` VALUES ('10', '选择题', '68', '下列关于Java多线程并发控制机制的叙述中，错误的是（       ）');
INSERT INTO `questions` VALUES ('10', '选择题', '69', '下列程序的功能是创建了一个显示5个\"Hello!\"的线程并启动运行，请将程序补充完整。\r\npublic class ThreadTest extends Thread{\r\n    public static void main(String args[]){\r\n       ThreadTest t=new __ThreadTest()____;\r\n       t.start()；}\r\n    public void run(){int i=0;\r\n       while(true){System.out.println(\"Hello!\");\r\n          if (i++==4)  break;\r\n        }\r\n    }\r\n  下面关于Applet的说法正确的是(         )。');
INSERT INTO `questions` VALUES ('10', '选择题', '70', '要串行化某些类的对象，这些类就必须实现(       )。');
INSERT INTO `questions` VALUES ('10', '选择题', '71', '下列关于Applet的叙述中，错误的是（       ）');
INSERT INTO `questions` VALUES ('10', '选择题', '72', '调用线程的下列方法，不会改变该线程的生命周期中状态的方法是(       ) 。');
INSERT INTO `questions` VALUES ('10', '选择题', '73', '下列情况中，不会使线程返回所持有的对象锁的是（       ）。');
INSERT INTO `questions` VALUES ('10', '选择题', '74', '当输入一个字节流时，要（          ）');
INSERT INTO `questions` VALUES ('10', '选择题', '75', '在匹配器（Matcher）类中，用于输入字符串与模式串比较的方法是(         ) 。');
INSERT INTO `questions` VALUES ('10', '选择题', '76', ' 关于以下程序段的执行结果，说法正确的是（       ）\r\npublic class Borley extends Thread{\r\npublic static void main(String argv[]){\r\nBorley b = new Borley();\r\nb.start();\r\n}\r\npublic void run(){\r\nSystem.out.println(\"Running\");\r\n}\r\n}');
INSERT INTO `questions` VALUES ('10', '选择题', '77', ' 下列程序的功能是在监控台上每隔一秒钟显示一个字符串“Hello”,能够填写在程序中下划线位\r\n置，使程序完整并能正确运行的语句是（         ）\r\npublic class Test implements Runnable{\r\npublic static void main(String args[]){\r\nTest t=new Test();\r\nThread tt=new Thread(t);\r\ntt.start();\r\n}\r\npublic void run(){\r\nfor(;;){\r\ntry{\r\n;\r\n}catch( e){}\r\nSystem.put.println(\"Hello\");\r\n}   }   }');
INSERT INTO `questions` VALUES ('10', '选择题', '78', '关于下列程序的功能，说法正确的是（     ）\r\npublic class ko10_1 extends Thread {\r\nint n;\r\nko10_1() {\r\nThread td=new Thread(this);\r\ntd.start();\r\n}\r\npublic void run() {\r\nfor (n=0;n<6;n++) {\r\ntry {\r\nSystem.out.print(n);\r\nThread.sleep(500);\r\n}\r\ncatch(InterruptedException e)\r\n{ System.out.println(\"Exception\"); }\r\n}   }\r\npublic static void main(String args[]) {\r\nnew ko10_1();\r\n}   }');
INSERT INTO `questions` VALUES ('10', '选择题', '79', '在编写Java applet程序时，若需要对发生事件作出响应和处理，一般需要在程序的\r\n开头写上的语句是(            )');
INSERT INTO `questions` VALUES ('10', '选择题', '80', '写Java application程序时，若需要使用到标准输入输出语句，必须在程序的开头\r\n写上（      ）语句。');
INSERT INTO `questions` VALUES ('10', '选择题', '81', '下列不是 InputStream 子类的是（      ）。');
INSERT INTO `questions` VALUES ('10', '选择题', '82', '下列关于 Java Application 与 Applet 的说法中，正确的是（      ）。');
INSERT INTO `questions` VALUES ('10', '选择题', '83', 'Java中类ObjectOutputStream支持对象的写操作，这是一种字节流，它的直接父类是（      ）');
INSERT INTO `questions` VALUES ('10', '选择题', '84', '在下列程序的空白处，应填入的正确选项是（      ）\r\nImport java.io.*;\r\nPulilc class ObjectStreamTest{\r\nPublilc static void main(string args[]) throws IOException{\r\nObjectOutputStream oos= new ObjectOutputStream\r\n(new FileOutputStream(“serial.bin”));\r\nJava.util.Date d= new Java.util.Date();\r\nOos         (d);\r\nObjectInputStream ois=\r\nnew ObjectInputStream(new FileOutputStream(“serial.bin”));\r\ntry{\r\njava.util.date restoredDate =\r\n(Java.util.Date) ois.readObject();\r\nSystem.out.println\r\n(“read object back from serial.bin file:”\r\n+ restoredDate);\r\n}\r\nCatch (ClassNotFoundException  cnf) {\r\nSystem.out.println (“class not found”);\r\n}\r\n｝');
INSERT INTO `questions` VALUES ('10', '选择题', '85', 'Java语言具有许多优点和特点，下列选项中，哪个反映了Java程序并行机制的特点（       ）');
INSERT INTO `questions` VALUES ('10', '选择题', '86', '以下关于继承的叙述正确的是（         ）。');
INSERT INTO `questions` VALUES ('10', '选择题', '87', '下面哪些方法将会将一个正在执行的线程中断(       )');
INSERT INTO `questions` VALUES ('10', '选择题', '88', '面有关构造方法的叙述，不正确的是(        )');
INSERT INTO `questions` VALUES ('10', '选择题', '89', '有关下述关于线程的代码,说法正确的是(       )\r\n1.      class Test\r\n2.       {\r\n3.         public static void main(String [] args)\r\n4.              {\r\n5.                   printAll(args);\r\n6.              }\r\n7.        public static void printAll(String[] lines)\r\n8.            {\r\n9.                  for(int i=0;i<lines.length;i++)\r\n10.             {\r\n11.                   try\r\n12.                         {\r\n13.                              System.out.println(lines[i]);\r\n14.                              Thread.currentThread().sleep(3000);\r\n15.                         }\r\n16.                   catch(Exception e)\r\n17.                         {}\r\n18.            }\r\n19.          }\r\n20.       }');
INSERT INTO `questions` VALUES ('10', '选择题', '90', '已知有一个多线程类myThread，除run方法外还包含一个方法void disp()。以下说法正确的是(        )');
INSERT INTO `questions` VALUES ('10', '选择题', '91', '识别用线程创建apple的正确陈述。（      ）');
INSERT INTO `questions` VALUES ('10', '选择题', '92', '下面的哪个关键字通常用来对对象加锁，该标记使得对对象的访问是排他的？（     ）');
INSERT INTO `questions` VALUES ('10', '选择题', '93', '断点不能设置在（        ）中');
INSERT INTO `questions` VALUES ('10', '选择题', '94', '当应用程序在某个断点处暂停执行时，下一条即执行的语句将位于该断点所在行语句（      ）的语句');
INSERT INTO `questions` VALUES ('10', '选择题', '95', '调试程试中（     ）命令能够对应用程序的源代码中的一个可执行的代码行设置断点');
INSERT INTO `questions` VALUES ('10', '选择题', '96', '下列哪个类是由编译器自动生成对象的特殊类，是用于类操作？（      ）');
INSERT INTO `questions` VALUES ('10', '选择题', '97', '在Java语言中，下列哪个包是编译器自动导入的？（      ）');
INSERT INTO `questions` VALUES ('10', '选择题', '98', '下列容器中哪一个是从java.awt.Window继承的？（      ）');
INSERT INTO `questions` VALUES ('10', '选择题', '99', '下列描述中，错误的是（     ）。');
INSERT INTO `questions` VALUES ('10', '选择题', '100', '字符输出流类都是_ __抽象类的子类。(          )');
INSERT INTO `questions` VALUES ('10', '选择题', '101', '用Thread子类实现多线程的步骤顺序是（      ）');
INSERT INTO `questions` VALUES ('10', '选择题', '102', '在以下供选择的方法中，能让线程从阻塞状态恢复到就绪状态的方法是(        )');
INSERT INTO `questions` VALUES ('10', '选择题', '103', '在以下四个供选的整数中，能作为线程最高优先级的整数是 (         )');
INSERT INTO `questions` VALUES ('10', '选择题', '104', '异常包含下列那些内容？（       ）');
INSERT INTO `questions` VALUES ('10', '选择题', '105', 'Java语言具有许多优点和特点，下列选项中，哪个反映了Java程序并行机制的特点？（       ）');
INSERT INTO `questions` VALUES ('10', '选择题', '106', 'Java 语言中提供了一个（      ）线程，自动回收动态分配的内存。');
INSERT INTO `questions` VALUES ('10', '选择题', '107', '进程独有的内容包括（     ）');
INSERT INTO `questions` VALUES ('10', '选择题', '108', '不是导致线程不能运行的原因的是（       ）');
INSERT INTO `questions` VALUES ('10', '选择题', '109', '当（       ）方法终止时，能使线程进入死亡状态。');
INSERT INTO `questions` VALUES ('10', '选择题', '110', '用（      ）方法可以改变线程的优先级。');
INSERT INTO `questions` VALUES ('10', '选择题', '111', '线程通过（      ）方法可以使具有相同优先级线程获得处理器。');
INSERT INTO `questions` VALUES ('10', '选择题', '112', '线程通过（      ） 方法可以休眠一段时间，然后恢复运行。');
INSERT INTO `questions` VALUES ('10', '选择题', '113', '（     ）方法使对象等待队列的第一个线程进入就绪状态。');
INSERT INTO `questions` VALUES ('11', '判断题', '1', '最流行的数据库查询语言是 SQL。（    ）');
INSERT INTO `questions` VALUES ('11', '判断题', '2', 'ava 将表可以作为 connection 对象来操作。（   ）');
INSERT INTO `questions` VALUES ('11', '判断题', '3', '关键字唯一地表示表中的每个记录。（   ）');
INSERT INTO `questions` VALUES ('11', '判断题', '4', '数据库是集中控制的数据的有机集合。（    ）');
INSERT INTO `questions` VALUES ('11', '判断题', '5', 'Applet 包中含有 Java 中操作关系数据库的类和接口。（    ）');
INSERT INTO `questions` VALUES ('11', '判断题', '6', 'sun .jdbc .odbc 类代表了 JDBC 到 ODBC 数据库驱动程序。（    ）');
INSERT INTO `questions` VALUES ('11', '判断题', '7', '共享是数据库系统的一个关注焦点。（    ）');
INSERT INTO `questions` VALUES ('11', '判断题', '8', '数据库系统的主要特点之一是数据的独立性，既应用程序无需关心数据的存储和访问。（    ）');
INSERT INTO `questions` VALUES ('11', '判断题', '9', '宿主语言通常包括一种数据库子语言，用于处理数据库对象和操作的细节。（    ）');
INSERT INTO `questions` VALUES ('11', '填空题', '1', '__java在连接SqlServer数据库时，需要导入三个驱动工具包是、____________，__________，___________.。');
INSERT INTO `questions` VALUES ('11', '填空题', '2', '__在遍历数据表内容时，可以通过_________方法把当前的指针自动向下移动一位。');
INSERT INTO `questions` VALUES ('11', '填空题', '3', '__在向数据库发送sql语句时,要使用____________类声明一个发送sql语句对象。');
INSERT INTO `questions` VALUES ('11', '填空题', '4', '__连接SqlServer时，所用的协议时______________。');
INSERT INTO `questions` VALUES ('11', '填空题', '5', '__在java源文件中进行数据库操作时,在文件头要导入____________包。');
INSERT INTO `questions` VALUES ('11', '填空题', '6', '__在连接数据库的时候，为了获取本机的IP地址，常用的代码是____________或者______。');
INSERT INTO `questions` VALUES ('11', '填空题', '7', '__在获取数据表内容的时候，将指针移动到此 ResultSet 对象的指定行编号的方法是____________。');
INSERT INTO `questions` VALUES ('11', '填空题', '8', '__在获取数据表内容的时候，将指针移动到此 ResultSet 对象的第一行的方法是__________________。');
INSERT INTO `questions` VALUES ('11', '填空题', '9', '__在获取数据表内容的时候，__获取当前行编号的方法是__________。');
INSERT INTO `questions` VALUES ('11', '编程题', '1', '写一个应用程序，显示一个 test.mdb 中表 test 的字段。');
INSERT INTO `questions` VALUES ('11', '编程题', '2', '编写一个应用程序，显示一个 test.mdb 中表 test 的所有数据。');
INSERT INTO `questions` VALUES ('11', '编程题', '3', '编写一个应用程序，为 test.mdb 中表 test 添加一条记录。');
INSERT INTO `questions` VALUES ('11', '编程题', '4', '编写一个应用程序，为 test.mdb 中表 test 删除 id 为 100 的一条记录。');
INSERT INTO `questions` VALUES ('11', '编程题', '5', '编写一个应用程序，为 test.mdb 中表 test 修改 id 为 101 的一条记录的 name 值为”张 三”。');
INSERT INTO `questions` VALUES ('11', '选择题', '1', '使用Class类的（     ）方法可载入一个数据库驱动');
INSERT INTO `questions` VALUES ('11', '选择题', '2', '（      ）惟一的表示了关系型数据库中的一个值集');
INSERT INTO `questions` VALUES ('11', '选择题', '3', '数据库中的主键用于（    ）');
INSERT INTO `questions` VALUES ('11', '选择题', '4', 'Statement对象实现（       ）');
INSERT INTO `questions` VALUES ('11', '选择题', '5', 'executeQuery方法（      ）');
INSERT INTO `questions` VALUES ('11', '选择题', '6', '关系型数据库是由一个或多个（      ）组成');
INSERT INTO `questions` VALUES ('11', '选择题', '7', '是由包含惟一的（      ）来区分不同的行');
INSERT INTO `questions` VALUES ('11', '选择题', '8', '导入（     ）包能让开发人员使用针对数据库操作的类及其接口');
INSERT INTO `questions` VALUES ('11', '选择题', '9', '如果DriverManager无法实现同数据库之间的链接，那么getConnection方法会抛出一个（       ）异常');
INSERT INTO `questions` VALUES ('11', '选择题', '10', '接口Statement中的（       ）方法用于从数据库标准提取数据');
INSERT INTO `questions` VALUES ('11', '选择题', '11', 'Statement的（       ）方法用于修改数据表中的数据');
INSERT INTO `questions` VALUES ('11', '选择题', '12', '在select语句中，select关键字之后应跟（     ）');
INSERT INTO `questions` VALUES ('11', '选择题', '13', 'SQL中的（      ）语句可修改为数据库中的信息');
INSERT INTO `questions` VALUES ('11', '选择题', '14', '（      ）是一个有组织的数据集合');
INSERT INTO `questions` VALUES ('11', '选择题', '15', '一旦数据录入数据库，（     ）');
INSERT INTO `questions` VALUES ('11', '选择题', '16', '在关系型数据库中，数据组织在（      ）中');
INSERT INTO `questions` VALUES ('11', '选择题', '17', '在编写访问数据库的Java程序时，Connection对象的作用是 (        )');
INSERT INTO `questions` VALUES ('11', '选择题', '18', '在编写访问数据库的Java程序时，Statement对象的作用是 (        )');
INSERT INTO `questions` VALUES ('11', '选择题', '19', '在编写访问数据库的Java程序时，ResultSet对象的作用是 (      )');
INSERT INTO `questions` VALUES ('11', '选择题', '20', '我们在用JDBC连接SQLServer 2000数据库时，需要加载相应的驱动，以下选项中，不属于我们要加载的驱动包是（        ）');
INSERT INTO `questions` VALUES ('11', '选择题', '21', '数据库的表由（     ）组成');
INSERT INTO `questions` VALUES ('11', '选择题', '22', 'SQL 关键字（    ）的后面是在查询中选择记录的条件。');
INSERT INTO `questions` VALUES ('11', '选择题', '23', 'SQL 关键字（    ）指定记录的排序顺序。');
INSERT INTO `questions` VALUES ('11', '选择题', '24', 'SQL 关键字（    ）用于合并两个或多个表。');
INSERT INTO `questions` VALUES ('11', '选择题', '25', '（     ）同时是另一个表中的主关键字');
INSERT INTO `questions` VALUES ('11', '选择题', '26', '一个（   ）对象用于向数据库提交查询。');
INSERT INTO `questions` VALUES ('11', '选择题', '27', '不是主要数据库模型的是（    ）');
INSERT INTO `questions` VALUES ('11', '选择题', '28', '下面说服错误的是（      ）');
INSERT INTO `questions` VALUES ('11', '选择题', '29', 'Java 通过（    ）接口的方法提供事物处理');
INSERT INTO `questions` VALUES ('11', '选择题', '30', '下面语句书写有误的是（      ）');
INSERT INTO `questions` VALUES ('11', '选择题', '31', '我们在用JDBC连接SQLServer 2000数据库时，需要加载相应的驱动，以下选项中，加载驱动代码正确的是（         ）');

-- ----------------------------
-- Table structure for selectquestions
-- ----------------------------
DROP TABLE IF EXISTS `selectquestions`;
CREATE TABLE `selectquestions` (
  `CHAPTER` int(11) NOT NULL,
  `TYPE` char(20) NOT NULL,
  `NUMBER` int(11) NOT NULL,
  `sa` char(255) NOT NULL,
  `sb` char(255) NOT NULL,
  `sc` char(255) NOT NULL,
  `sd` char(255) NOT NULL,
  `answer` char(2) DEFAULT NULL,
  PRIMARY KEY (`CHAPTER`,`TYPE`,`NUMBER`),
  CONSTRAINT `selectquestions_ibfk_1` FOREIGN KEY (`CHAPTER`, `TYPE`, `NUMBER`) REFERENCES `questions` (`CHAPTER`, `TYPE`, `NUMBER`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of selectquestions
-- ----------------------------
INSERT INTO `selectquestions` VALUES ('1', '选择题', '1', 'JRE', '编译程序', '命令提示符', '应用程序', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '2', 'class', 'java', 'javac', 'source', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '3', 'Apple', 'IBM', 'Microsoft', 'Sun Microsystems', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '4', 'java', 'jre', 'exe', 'class', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '5', 'java', 'class', 'exe', 'jre', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '6', '机器', '汇编', '高级', '以上都不对', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '7', '现有库类', 'TCP', '汇编代码', '二级存储器', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '8', '调试程序', '编译程序', '转换器程序', 'JRE', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '9', '出现的行号', '可用于改正错误的正确代码', '一个简短的描述', '选择A和B', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '10', '应用程序突然中止', '缺少括号', '单词拼写错误', '选择B和C', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '11', 'build', 'java', 'javac', 'create', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '12', '可以以任意字符作为起始，但不能包含空格', '必须以数字作为起始，但不能包含空格', '不能以以数字作为起始，也不能包含空格', '不能以数字作为起始，但可以包含空格', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '13', 'Integer.valueOf', 'Integer.parseInt', 'String.parseInt', 'String.valueOf', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '14', 'Double.psrseString()', 'String.parseDouble()', 'Double.parseDouble()', 'String.parseString()', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '15', '运算符的值', '结果', '操作数', '参数', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '16', '将一个整数转换成文本', '将文本转换为一个整数', '同String.valueOf一样完成相同的任务', '以上答案都不对', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '17', '星号（*）', '正斜杠（/）字符', '分号（;）', '以上答案都不对', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '18', '注释', '文本', '二目', '以上答案均不正确', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '19', '有助于增强应用程序的可读性', '位于两个正斜杠之后', '会编译程序忽略', '以上答案均正确', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '20', '，', ';', '。', '{}', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '21', '类与方法的更新过程', '版权信息', '作者名称', '接口与类的版本', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '22', '参数说明', '还回参数的说明', '异常处理的说明', '抛出异常类的说明', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '23', 'CountCLassl', 'car', 'moon', 'demo', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '24', 'java.Lang', 'java..lang', 'Java.lang', '1java.lang', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '25', 'Min_Value', 'Min_value', 'MIN_VALUE', 'min_Value', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '26', '标识符', '由Java保留使用的', '区分大小写', 'B和C', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '27', '花括号', '分号（；）', 'end关键字', 'class 关键字', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '28', 'Integer.getInt', 'String.valueOf', 'Integer.parseInt', 'String.value', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '29', '关键字', '有效的标识符', '以上两个答案都对', '以上答案都不对', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '30', '创建', '现存', '已定义的', '基本', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '31', '空字符', '空字符串', '空值', '以上答案都不对', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '32', '复制', '替换', '将其值添加到', '移动', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '33', '使用括号', '在多行上', '以值的形式', '以上答案都不对', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '34', '前', '后', '同一时刻', '以上都不对', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '35', '注释', '可执行的代码行', '赋值语句', '算术语句', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '36', '之前', '之后', '处', '以上都不对', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '37', '必要的', '冗余的', '嵌入', '嵌套的', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '38', '/', '\\', '%', '*', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '39', '名字', '类型', '以上两个都对', '以上都不对', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '40', '括号', '变量', '调试程序', '内存', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '41', '从右到左', '从左到右', '以上两个答案都对', '以上答案都不对', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '42', 'stop', 'run', 'print', 'clear', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '43', '解释说明代码', '注销部分代码', '强调代码的重要性', 'A和B', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '44', '变量', '方法', '操作数', '标识符', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '45', 'integer', 'int', 'intVariable', 'Int', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '46', '伪代码', 'Java语言', '注释', '执行', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '47', '通常只能描述声明', '在计算机中执行', '通常只描述可执行的代码行', '通常描述声明和可执行的代码行', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '48', '*', '!=', '<>', '%', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '49', 'sizeof', 'abstract', 'NULL', 'Native', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '50', 'char  a=\'abc\';', 'long l=oxfff;', 'float f=0.23;', 'double  b=0.7E-3;', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '51', 'The String No.1 is\r\n   The String No.2 is String 2\r\n   The String No.3 is a string\r\n   The String No.4 is string\r\n   The String No.5 is a string', 'The String No.1 is\r\n   The String No.2 is String 2\r\n   The String No.3 is a string\r\n   The String No.4 is tring\r\n   The String No.5 is a string', 'The String No.1 is\r\n   The String No.2 is String 2\r\n   The String No.3 is a string\r\n   The String No.4 is strin\r\n   The String No.5 is a string', '以上都不对', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '52', 'default', 'default, zero', 'error default clause not defined', 'no output displayed', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '53', 'c=z', '_Haha', '8nd', 'Guang zhou', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '54', '0～65, 535', '(-32,768)～32,767', '(-128)～127', '(-256)～255', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '55', '变量d1,d2均初始化为4.0', '变量d2没有初始化,d1初始化为4.0', '变量d1,d2均未初始化', '变量d1没有初始化,d2初始化为4.0', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '56', 'one', 'one, default', 'one, two, default', 'default', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '57', '8', '16', '32', '64', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '58', 'severUp', '7Up', '_My Variable', 'small-pig', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '59', 'X=X*(3+2)', 'X=X*3+2', 'X=3+X*2', 'X=X*3+X*2', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '60', 'this', '2email', '_sys1_lll', 'implements', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '61', 'x<=2 并且 x>-2', 'x>2', 'x>-2', 'x<=-2', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '62', 'Agig0lInt$223', '_sdf', '$45sd', '45df', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '63', '55.6', '15', '95L', '8.6F', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '64', 'int a', 'a long', 'float a', 'long a', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '65', '6', '8', '12', '3', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '66', 'int  b=9.3', 'boolean  a=false', 'float f=23.1', 'char b=”b”;', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '67', 'java是一种网络编程语言', 'java是由sun公司发布的', 'java允许使用指针访问内存', 'java的前身是Oak', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '68', 'Aa12', 'X', 'y', '5x', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '69', '27.0', '27.5', '1.026', '1.026.5', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '70', '原因是执行的当前目录下没有找到aaa.java文件。', '原因是没有安装JDK开发环境。', '原因是java源文件名后缀一定是以.txt结尾。', '原因是JDK安装后没有正确设置环境变量PATH和Classpath。', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '71', 'double a=1.0;', 'Double a=new Double(1.0);', 'byte a = 120;', 'Byte a = 200;', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '72', 'Float是一个类', 'Float在java.lang包中', 'float a=1.0是正确的赋值方法', 'Float a= new Float(1.0)是正确的赋值方法', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '73', 'Float', 'this', 'string', 'unsigned', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '74', '0', '1', '2', '3', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '75', '面向对象', '平台无关', '安全性高', '单线程', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '76', 'System.out.println();', 'System.out.Println();', 'System.Out.print();', 'System.Out.println();', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '77', 'hello', 'void', 'num_01', 'abc', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '78', '当两个数据的类型不统一时，必须先进行数据类型的转换，再运算或赋值', 'byte类型数据可以转换为short,int,long类型数据', 'long类型数据有可能转换为byte,short,int类型数据', '在语句int  i=(int) 78.67;中，变量 i的值为79', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '79', 'String s=new “Yes!”;', 'String s=new String(“yes!”) ;', 'String s;', 'String  s=”Yes!”;', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '80', '多行注释语句的内容，从/*开始，到*/结束', '多行注释语句也可以是单行语句', '文档注释语句的内容，从/**开始，到*/结束', '单行注释语句的内容，从//开始，以分号为结尾句', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '81', '12class', '+viod', '-5', '_black', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '82', 'if', 'sizeof', 'orivate', 'null', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '83', '标识符首字符的后面可以跟数字；', '标识符不区分大小写；', '符合数据类型变量包括布尔型、字符型、浮点型；', '数组属于基本数据类型；', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '84', '变量名', '变量属性', '变量初值', '变量大小', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '85', '变量名不是标识符', '变量名是标识符', '浮点型属于复合类型', '变量属性分为基本类型和复合类型', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '86', '整数型', '数组', '字符型', '浮点型', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '87', 'boolean是JAVA特殊的内置值，或者为真或者为假', 'float是带符号的32位浮点数', 'double是带符号的64位浮点数', 'char应该上是8位的Unicode字符', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '88', '一个整型的数据达到整型能表示的最大数值后，再加1，则机器产生上溢，结果为整型的最大值', '一个整型的数据达到整型能表示的最小数值后，再减1，则机器产生下溢，结果为整型的最小值', '实型变量在运算中不会产生溢出的问题', '实型变量在运算中和整型一样会产生溢出问题', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '89', '’\r’表示换行符', '’\n’表示回车符', 'char类型在内存中占16位', '凡是在Unicode的字符都可以用单引号括起来作为char类型常量', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '90', 'byte类型范围是-128~128', 'boolean类型范围是真或者假', 'char类型范围是0~65536', 'short类型范围是-32767~32767', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '91', '$million', '$_million', '1 $_million', '$ 1_million', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '92', '一0开头的整数代表8进制常量', '以0x或者0X开头的整数代表8进制整型常量', 'boolean类型的数据作为类成员变量的时候，系统默认值初始为true', 'double类型的数据占计算机存储的32位', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '93', '在JAVA程序中要使用一个变量，必须先对其进行声明', '变量声明语句可以在程序的任何地方，只要在变量使用前就可以', '变量不可以在其作用域之外使用', '局部变量在使用之前可以不初始化，系统使用默认的初始值', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '94', 'int $ e,a,b =10;', 'char c,d = ’a’;', 'float e = 0.0d;', 'double e = 0.0f;', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '95', 'byte是0', 'int是0', 'long 是0.0l', 'float是0.0f', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '96', 'char类型数据可以自动转换为任何简单的数据类型的数据', 'char类型数据只能自动转换为int类型数据', 'char类型数据不能自动转换 boolean类型数据', 'char类型不能做自动类型转换', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '97', 'float a = 1.1f;', 'byte d =128;', 'double c =1.1/0.0;', 'char b =(char)1.1f;', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '98', '无符号整数类型；', '整型；', '联合类型；', '接口；', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '99', '034代表八进制的数1C；', '034代表八进制的数34；', '034代表十六进制的数28；', '34L代表34的64位长整数；', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '100', 'short类型的数据存储顺序先低后高', '\r\nInteger.MAX_VALUE表示整型最大值', 'Long.MIN_VALUE表示整型最大值', 'long 类型表示数据范围和int类型一样', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '101', 'int', 'float', 'double', 'void', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '102', 'javac', 'jdk', 'appletviewer', 'java', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '103', 'javac', 'jdk', 'appletviewer', 'java', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '104', '星号(*)', '正斜杠(/)', '分号(;)', '乘号(x)', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '105', 'float e =1.1f', 'char f =1.1f', 'double g =1.1f', 'byte h =1', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '106', '指针类型', '类', '数组', '浮点类型', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '107', '0XA6', '0144', '1840', '-1E3', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '108', '0652', '3.4457D', '0.298f', '0L', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '109', '0123', '1900', 'fa00', '0xa2', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '110', '\\\\', '*\\', '\\', '\\\'', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '111', 'JAVA是不区分大小写的，源文件与程序类名不允许相同', 'JAVA语言以方法为程序的基本单位', 'Applet是JAVA的一类特殊应用程序，它嵌入HTML中，随主页发布到互联网上', '以//符开始的为多行注释语句', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '112', '多线性', '动态连接', '异常处理', '异步处理', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '113', '字节编译', '内存跟踪', '语法检查', '堆栈/下溢检查', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '114', '(a+b)*h/2', '(1/2)*(a+b)*h', '(a+b)*h*1/2', 'h/2*(a+b)', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '115', '12ab', 'float', 'aw~1e', 'b6ty', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '116', '_1234_', '_1_2', 'int_2_', '2_int_', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '117', '1', '2', '3', '6', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '118', '字符型数组中可以存放字符串', '可以对字符型数组进行整体输入、输出', '可以对整型数组进行整体输入、输出', '不能在赋值语句中通过赋值运算符\"=\"对字符型数组进行整体赋值', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '119', '{;}', 'a=0,b=0,c=0;', 'if(a>0);', 'if(b==0)m=1;n=2;', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '120', '对于double类型数组,不可以直接用数组名对数组进行整体输入或输出', '数组名代表的是数组所占存储区的首地址,其值不可改变', '当程序执行中,数组元素的下标超出所定义的下标范围时,系统将给出\"下标越界\"的出错信息', '可以通过赋初值的方式确定数组元素的个数', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '121', '(x>=1)||(x<=0)', 'x>=1|x<=0', 'x>=1 OR x<=0', 'x>=1&&x<=0', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '122', '字母和数字', '带有小数点的数', '字符串', '以上答案都不对', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '123', 'fixed', 'constant', 'final', 'const', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '124', '==', '<', '<=', '以上答案都正确', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '125', 'ture   false', 'off   on', 'one   zero', 'yes   no', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '126', 'double', '常量', '标准', 'Boolean', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '127', '+', '=+', '+=', '+ =', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '128', '只需要一个操作数', '需要两个操作数', '必须使用&&', '可以没有操作数', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '129', '^', '&&', 'and', '||', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '130', '执行短路运算\r\nB、是一个比较运算', '下面对运算符&&描述正确的是（        ）\r\nA、执行短路运算\r\nB、是一个比较运算\r\nB、如果两个操作数都为真，则计算的结果为假\r\nD、以上答案都不对', '下面对运算符&&描述正确的是（        ）\r\nA、执行短路运算\r\nB、是一个比较运算\r\nB、如果两个操作数都为真，则计算的结果为假\r\nD、以上答案都不对', '以上答案都不对', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '131', 'expreaaion1为ture 并且expression2为false', 'expreaaion1为false并且expression2为true', 'expreaaion1和expression2为true', 'expreaaion1和expression2为false', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '132', 'expreaaion1为true 并且expression2为false', 'expreaaion1为false并且expression2为true', 'expreaaion1和expression2为true', 'expreaaion1和expression2为false', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '133', 'expreaaion1为ture 并且expression2为false', 'expreaaion1为false并且expression2为true', 'expreaaion1和expression2为true', 'A和B', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '134', '3，3', '2，3', '3,2', '2,2', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '135', '25', '30', '36', '以上答案都不对', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '136', 'long', 'double', 'float', '以上答案都对', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '137', '隐式转换', '造型', '赋值', '以上答案都不对', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '138', 'int', 'float', 'long', '以上答案都不对', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '139', 'int', 'double', 'long', '以上答案都不对', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '140', 'readOnly', 'final', 'constants', 'constant', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '141', 'System', 'System.out', 'System.output', '以单行答案都不对', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '142', 'java.util', 'java.io', 'java.awt', 'java.lang', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '143', '编译时将产生错误；', '编译时正确，运行时将产生错误；', '输出零；', '输出空。', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '144', 'double', 'byte', 'short', 'char', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '145', '0123', '1900', 'fa00', '0xa2', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '146', 'n/10%10', '(n-n/100*100)/100', 'n%10', 'n/10', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '147', '*', '!=', '<>', '%', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '148', 'ch=‘a+b’', 'ch=‘\0’', 'ch=‘7’+‘9’', 'ch=5+9', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '149', 'byte→int→short→long→float→double', 'byte→short→int→long→float→double', 'byte→short→int→float→long→double', 'short→byte→int→long→float→double', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '150', 'goto', 'null', 'false', 'native', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '151', '36', '36.5', '37', 'true', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '152', 'int a', 'double b=4.5', 'boolean b=true', 'float f=9.8', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '153', 'javac', 'java', 'jalap', 'javadoc', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '154', 'java虚拟机和java编译器', 'java应用程序编程接口和java虚拟机', 'java编译器和java解释器', 'java应用程序编程接口和解释器', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '155', '’’', '” ”', '{}', '[]', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '156', '\r', '\n', 'f', 'b', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '157', '35.d', '-20', '1,234', '”123”', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '158', 'TRUE', 'boolean', 'int', 'public', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '159', 'JDK中提供的文本文档生成器是（      ）\r\nA．jav.exe    B、javap.exe    C、javadoc.exe    D、javaprof.exe', 'javap.exe', 'javadoc.exe', 'javaprof.exe', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '160', '生命变量时必须指定一个类型', 'java认定变量number与Number相同', 'Java中唯一的注释方法是”//”', '源文件中public类可以有0或多个', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '161', 'String  x=”Sky”; int  y=5;x+=y;', 'String  x=”Sky”;int  y=5;if(x==y){}', 'String  x=”Sky”;int  y=5;x=x+y;', 'String  x=null;int  y=(x!=null)&&(x.length()>0)?x.length:0', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '162', 'java代码中严格区分大小写', '下面描述错误的是（       ）\r\njava中的所有字符都是英文状态下的', 'java是以类为程序的基本单位', 'java是面向过程的语言', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '163', '/*-----**/', '/*---------*/', '//', '/**--------*/', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '164', 'long 1=123L', 'long 1=3.14156L', 'int i=’K’', 'double d=1.55989E2f', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '165', 'java语言是以类为程序的基本单位的', 'java语言是不区分大小写的', '多行注释语句必须以//开始', '在java语言中、类的源文件名和该类可以不相同', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '166', '以//开始的是多行注释语句', '以/*开始，*/结束的单行注释语句', '以 /**开始，*/结束的是可以生成帮助文档的注释语句', '以/**开始，*/结束的是单行注释语句', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '167', '$1_abc是合法的java标识符', '局部变量必须先明后使用', 'void是合法的java保留字', '在java中，类不是用标识符命名的', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '168', '1_Back', '$_Money', '$-money', '2-Forward', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '169', 'int a=0;', 'int a=0', 'double i=1.3%12;', 'int a=0;\r\nBoolean   b=a!=           int b=2;                               int b=2;\r\n                         int c=12;                              int 12=7;\r\n                        A=12+b+e!=4;                        a=a+12=c+b;', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '170', '解释特性', '可移植性', '很高的通用性', '很高的安全性', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '171', 'ASCII码是16位的字符集，而Unicode码也是16位的字符集', 'ASCII码是16位的字符集，而Unicode码是8位的字符集', 'ASCII码和Unicode码都是8位，只是Java中使用Unicode码。', 'ASCII码和Unicode码都是16位，只是Java中使用Unicode码。', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '172', 'Java编程语言', '工具及工具的API', 'Java EE扩展API', 'Java平台虚拟机', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '173', 'javax.servlet.http', 'java.lang', 'java.util', 'java.sql', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '174', 'XML格式', 'HTML格式', '二进制格式', '自定义格式', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '175', 'public static void main(String[] args){}', 'public static void main(){}', 'public static main(String args[]){}', 'public void static main(String[] args){}', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '176', '一个Applet就是一段Java程序', 'Applet是一种特殊的Java程序，它需要运行在Web服务器上', 'Applet是一种特殊的Java程序，它需要运行在Web浏览器上', 'Applet是一种Java SE平台的应用程序', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '177', '20', '077', '0xABB', 'u03A6', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '178', '// 单行注释', '-- 单行注释', '/*', '/**\r\n* 单行或多行注释                  * 文档注释\r\n*/                               */', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '179', 'goto', 'instanceof', 'sizeof', 'volatile', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '180', '3.3', '3.33', '3', '3.0', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '181', '-4', '-9', '-1', '-2', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '182', 'long val=6;', 'int age = 23L;', 'short x=1,y=2,z;', 'int a= ‘A’;\r\n    z=x+y;', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '183', '求2个数的较大数', '求2个数的较小数', '把y的值赋给x', '把x的值赋给y', 'A');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '184', 'public static', 'public static final', 'final', 'public static abstract', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '185', 'public static int main (String args[ ])', 'public static void main (String args[ ])', 'public void main  (String args[ ])', 'public int main  (String args[ ])', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '186', 'java Appfirst', 'javac Appfirst.java', 'appletviewer appfirst.java', 'appletviewer appfirst.html', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '187', 'Java appfirst. java', 'Java appfirst', 'Java appfirst. class', 'Javac appfirst', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '188', '源程序无法通过编译，因为主方法的声明不正确', '源程序可以通过编译，但无法运行，因为该文件没有 public 类', '源程序可以通过编译，但在运行时会出现“程序中没有主方法的异常”', '程序能正常运行', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '189', '<applet code=”Appfirst.java”  width=300  height=60></applet>', '<applet code=”Appfirst”  width=300  height=60></applet>', '<applet code=”Appfirst.class”  width=300  height=60></applet>', '以上都不对。', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '190', 'Javaworld', 'sum', '2Java Program', '$abc', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '191', '布尔型和字符型', '整型和单精度型', '字节型和长整型', '整型和双精度型', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '192', '|、&、！;', '&、^、||;', '！、%、++;', '<、<<、++', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '193', 'char a=’abc’;', 'byte b=152;', 'float c=2.0;', 'double d=2.0;', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '194', 'False', 'FOR', 'For', 'for', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '195', 'How are you !', 'How  are  you !', 'How  are  you  !', 'How are you!', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '196', 'a 的值为 2，b 的值为 3，c 的值为 1', 'a 的值为 2，b的值为 4，c 的值为 2', 'a 的值为 2，b的值为 4，c 的值为 1', 'a 的值为 2，b 的值为 3，c 的值为 2', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '197', '++ a = =b', '++a= =b++', '(++a= =b) || flag', '(++a= =b) & flag', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '198', 'x + +', '+ + x', 'x = x + 1', 'x = + 1', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '199', 'short', 'int', 'double', 'float', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '200', 'x>y && b<a', '–z>x-y', 'y==++x', 'y+x*x++', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '201', '6', '7', '10', '25', 'B');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '202', '10', '20', '30', '40', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '203', '输出结果为 21', '输出结果为 22', '输出结果为 32', '输出结果为 33', 'D');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '204', 'a=  int(y)', 'a==1', 'a=a+1=3', '++a', 'C');
INSERT INTO `selectquestions` VALUES ('1', '选择题', '205', '程序输出结果均为布尔值', '程序中输出 3 个 true', '程序运行后，ch 的值为‘C’', '程序运行后，z 的值为 8', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '1', '一种', '两种', '三种', '四种', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '2', '控制转移', '顺序执行', '工作流程', '以上均不对', 'B');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '3', 'if语句', 'if-else语句', 'for语句', 'try-catch\r\n语句', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '4', '单向', '双向', '三向', '嵌套', 'B');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '5', '嵌套if…else语句', '堆积if…else语句', '创建顺序的if…else语句', '以上答案都不对', 'A');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '6', 'if语句', 'break语句', 'for语句', 'continue语句', 'B');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '7', '跳过循环体下面的语句，继续下次循环', '跳出循环体', '下次循环前不需要判断终止条件', '以上说法都不对', 'A');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '8', 'if(studentGrade !=90)\r\n     System.out.println(\"student received an A\")', 'if(studentGrade >90)\r\n     System.out.println(\"student received an A\")', 'if(studentGrade <=90)\r\n     System.out.println(\"student received an A\")', 'if(studentGrade >=90)\r\n     System.out.println(\"student received an A\")', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '9', '3', '4', '5', '不定', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '10', 'continue语句的作用是结束整个循环的执行', '只能在循环体内和switch语句体内使用break语句', '在循环体内使用break语句或continue语句的作用相同', '从多层循环嵌套中退出时，只能使用goto语句', 'B');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '11', '2', '3', '4', '有语法错', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '12', '1', '1', '1', '1\r\n           2           2         2\r\n                       3         3\r\n                                 4', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '13', 'for语句', 'break语句', 'while语句', 'continue语句', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '14', 'for语句可以嵌套if语句', 'if语句可以嵌套循环语句', 'while语句可以嵌套for语句', '循环语句中可以用goto语句', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '15', '顺序结构', '分支结构', '循环结构', '逻辑结构', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '16', '是死循环', '循环执行二次', '循环执行一次', '有语法错误', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '17', '输出的是1', '输出的是1和-2', '输出的是3', '是死循环', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '18', 'while循环执行10次', '循环是无限循环', '循环体语句一次也不执行', '循环体语句执行一次', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '19', '0', '1', '2', '4', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '20', '50', '55', '0', '54', 'B');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '21', '15', '50', '55', '5', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '22', '5', '20', '15', '10', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '23', '警戒条件', '控制表达式', '选择语句', 'case表达式', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '24', '控制变量的初始值', '右花括号', '左花括号', '控制变量', 'B');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '25', '循环体执行结束以后', '循环体执行以前', '当循环-继续条件为FALSE时', '当执行循环体时', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '26', '单向', '双向', '多向', '以上答案都不对', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '27', '分号', 'stop关键字', 'break语句', 'case语句结束', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '28', 'end关键字', '}字符', 'break关键字', 'default', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '29', '31', '32', '2', '33', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '30', 'switch(a+b); { ...... }', 'switch( a+b*3.0 ) { ...... }', 'switch a { ...... }', 'switch ( a%b ) { ...... }', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '31', '16', '8', '4', '2', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '32', '18', '15', '16', '17', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '33', '13', '15', '16', '18', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '34', 'switch (x + y) { ...... }', 'switch ( ch + 1 ) { ...... }', 'switch ch { ...... }', 'switch ( a + b ); { ...... }', 'B');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '35', '60', '5', '0', '54', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '36', '11', '3', '2', '9', 'B');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '37', '15', '1', '60', '0', 'A');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '38', '（）', '[]', '<>', '{}', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '39', '15', '1', '60', '32', 'B');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '40', '3', '4', '5', '6', 'B');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '41', '有语法错,不能执行', '无限次', '执行1次', '一次也不执行', 'B');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '42', '4', '5', '6', '7', 'B');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '43', '18', '15', '16', '17', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '44', '0', '1', '2', '3', 'B');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '45', '6', '4', '24', '5', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '46', '5', '6', '7', '8', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '47', '5', '6', '7', '8', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '48', '5', '6', '7', '8', 'B');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '49', '2', '4', '6', '5', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '50', '2次', '1次', '0次', '3次', 'A');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '51', '1', '5', '2', '0', 'B');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '52', '1', '5', '2', '-1', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '53', '10', '8', '6', '4', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '54', '16', '8', '4', '2', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '55', '一次也不执行', '执行1次', '无限次', '有语法错,不能执行', 'B');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '56', '0次', '1次', '2次', '3次', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '57', 'public int MAX_LENGTH=100;', 'final int MAX_LENGTH=100;', 'final public int MAX_LENGTH=100;', 'public final int MAX_LENGTH=100;', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '58', 'do关键字之后，do…while 循环体之前', 'do关键字之后，并作为循环体中的最后一条语句', 'do关键字之前', 'do关键字之后，do…while 循环体之后', 'B');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '59', '名称', '初始值', '自增或自减运算', '最终值', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '60', '计数器变量的初始值', '计数器变量的最终值', '自增运算', '语句迭代的次数', 'A');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '61', 'for语句体', 'for首部', 'for计数器', 'for表达式', 'B');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '62', '出现一个错误', '出现一个无限循环', '不执行任何语句', '首个case语句将得带执行', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '63', '一个冒号', '一个下划线', 'break关键字', '一个分号', 'A');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '64', 'double', 'int', 'short', 'char', 'A');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '65', 'int addValue( int a, int b ){// do something...}', 'public void addValue (int a, int b ){// do something...}', 'public int addValue( int a ){// do something...}', 'public int addValue( int a, int b )throws MyException {//do something...}', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '66', 'public main(String args[])', 'public static void main(String args[])', 'private static void main(String args[])', 'void main()', 'B');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '67', 'False', 'a>=5是真值', 'True', 'a>=5是假值', 'B');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '68', '1', 'a=1', 'a=1a=2', 'a=2', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '69', '16', '8', '4', '2', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '70', '18', '15', '16', '17', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '71', '0', '1', '2', '3', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '72', '0,1,2,3,4,5', '0,1,2,3,4', '0,1,2,3', '0,1,2', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '73', 'One', 'one, default', 'one, two, default', 'Default', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '74', 'Default', 'default, zero', 'error default clause not defined', 'no output displayed', 'B');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '75', 'int i=0;   if(i)   {      System.out.println(\"Hello\");   }', 'boolean b = true;    boolean b2 = true;    if(b==b2)       System.out.println(\"So true\");', 'int i=1;   int j = 2;   if(i ==1＆j==2)      System.out.println(\"OK\");', 'int i=1;   int j = 2;   if(i ==1 &| j==2)      System.out.println(\"OK\")', 'A');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '76', '什么都不会输出', '3', '34', '134', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '77', '初始化部分', '循环条件', '迭代部分', '布尔表达式', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '78', 'int i;', 'int i,j\r\nfor(i=5,int j=10;i<10;j--){}               for(i=0,j=10;i<10,j>0;i++.j--){}', 'int i,k;', 'int i,j;\r\nfor(i=0,k=0;(i<10&&k>0);i++,k--){}        for(i=0;j=10;i<10;i++;j--){}', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '79', '4', '5', '6', '7', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '80', '34', '36', '35', '40', 'B');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '81', '转换', '流动', '逻辑错误', '控制转移', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '82', '单向选择', '多向选择', '双向选择', '循环', 'A');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '83', '简化', '判定', '分支', '循环', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '84', '至少执行一次', '从不执行', '在其条件为true时执行', '在其条件为false时执行', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '85', '有限循环', '已知循环', '顺序循环', '计数器循环', 'A');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '86', 'while', 'if', 'until', 'if…else', 'A');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '87', '不确定', '未定义', '嵌套', '无限', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '88', '循环体执行完成后      B、 循环体执行完成以前\r\nC 、A和', '循环体执行完成以前', 'A和B', '以上答案都不对', 'A');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '89', '不会变为TRUE', '不会变为FALSE', '为FALSE', '被反复测试', 'B');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '90', '无限循环', '计数器控制的循环', '控制语句', '潜逃的控制语句', 'A');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '91', 'while', 'if', 'do…while', 'if…else', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '92', '无限循环', '计数器控制循环', '偏一错误', '嵌套的控制 语句', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '93', '执行器循环体知道条件为TRUE', '执行其循环体知道条件为FALSE', '不会执行', '只对循环体执行一次', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '94', 'Java', 'Language', 'Test', '编译出错', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '95', '行4与行6都将执行', '行4执行，行6不执行', '行6执行，行4不执行', '行4,行6都不执行', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '96', 's=a+b;', 's=a+c;', 's=s+c;', 's=b+c;', 'B');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '97', '123456', '123455', '123450', '编译错误', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '98', '0123', '012', '0123456789', '012456789', 'B');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '99', '顺序结构、选择结构、循环结构', '顺序结构、循环结构', '顺序结构、选择结构', '选择结构、循环结构', 'A');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '100', 'switch', 'while', 'for', 'if/else', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '101', 'a=1', 'a=3', '编译错误，没有输出', '正常运行，但没有输出', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '102', '8', '9', '10', '11', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '103', '3', '12', '15', '20', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '104', '15', '0', '2', '12', 'A');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '105', 'x < = 0', 'x < 20 && x > 0', 'x > 0', 'x >= 20', 'A');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '106', '0', '1', '2', '以上都可以', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '107', '4', '16', '32', '256', 'C');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '108', '4', '5', '6', '7', 'D');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '109', 'i=4，j=5', 'i=5，j=4', 'i=4，j=5', 'i=5，j=6', 'A');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '110', '4', '5', '6', '7', 'B');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '111', '’e’', '’d’', '’f’', '’g’', 'A');
INSERT INTO `selectquestions` VALUES ('2', '选择题', '112', '22', '23', '24', '25', 'D');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '1', '1个', '2个', '3个', '4个', 'C');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '2', 'String s1=”\n	 null”', 'String s2=’null’', 'String s3=(String) ‘abc’', 'String s4=(String) ‘uface’', 'A');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '3', 'names', 'b', 'null', '运行出现异常', 'C');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '4', '利用字符串对象的toString函数将字符串转换为数值', '利用数值类的parseInt,parseDouble等函数将字符串直接转换为数值', '利用数值类的静态函数valueOf将字符串转换为数值', '利用数值类的静态函数intValue将字符串转换为数值', 'C');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '5', 'x=0&x<=-2', 'x>0', 'x>= -2 && x!=0', 'x<= -2 && x!=0', 'C');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '6', 'String obj[50];', 'String[] obj;', 'Object obj[50];', 'Char obj[50];', 'C');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '7', 'String类', 'StringBuffer类', 'Character类', '以上都不对', 'A');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '8', 'JFrame(s)', 'window(s)', 'new JFrame(s)', 'super(s)', 'C');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '9', 'squareRoot', 'root', 'sqrt', 'square', 'C');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '10', 'power', 'exponent', 'pow', 'exp', 'C');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '11', 'intData', 'getValue', 'getData', 'intValue', 'D');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '12', 'java.awt', 'java.utility', 'java.swing', 'java.util', 'D');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '13', 'int', 'string', 'double', 'A和C', 'D');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '14', '包和类', '类和对象', '对象和方法', '方法和变量', 'A');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '15', '接受一个参数', '不带参数', '接收两个参数', 'A 和B', 'D');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '16', 'value=4+randomObject.nextInt(16)', 'value=randomObject.nextInt(21)', 'value=5+randomObject.nextInt(15)', 'value=5+randomObject.nextInt(16)', 'D');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '17', '能够产生正整数', '能够产生正的双精度数', '具有产生随机数的能力', '以上答案都对', 'D');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '18', '起始于位置3的4个连续字符', '起始于位置3终止于位置4之前的字符', '位置3和位置4上的字符', '位置3上的字符，并重复次', 'B');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '19', 'getLength', 'getLength()', 'length', 'length()', 'D');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '20', 'maxChars', 'length', 'characterCount', 'size', 'B');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '21', '数字', '小写字母', '特殊字符', '以上答案都对', 'D');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '22', 'indexOf', 'firstIndexOf', 'findFirst', 'locate', 'A');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '23', '所要查找的字符个数', '采用向前查找法开始进行查找时的起始位置处的索引', '需要定位的子字符串的长度', '采用向后查找法开始进行查找时的起始位置处的索引', 'D');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '24', '可接收一个或两个参数', '返回一个新的string对象', '通过复制现有string对象中的一部分从而创建一个新的string对象', '以上答案都对', 'D');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '25', '通过此处位置上的索引向后进行复制', '需要复制的字符串的长度', '超过最后一个所要复制的字符的下一个字符的索引', '所要复制的最后一个字符的索引', 'C');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '26', 'removeSpaces', 'squeeze', 'trim', 'truncate', 'C');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '27', 'true', 'false', '1', '子字符串的索引', 'A');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '28', 'false', '0', '－１', '以上答案都不对', 'C');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '29', '0122345', '234567892345', '012234', '23456789234', 'D');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '30', '查询字符串', '从字符串中检索字符', '确定字符串的字符个数', '以上答案都正确', 'D');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '31', 'get', 'char', 'getAt', 'charAt', 'D');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '32', 'stringCopy', 'substring', 'copyString', 'copySubString', 'B');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '33', '都拥有相同的长度', '总是彼此相等', '至少要有一个空格作为前缀', '都是不可变的', 'D');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '34', '第二个参数', '首个匹配', '该字符串中最后一个字符', '以上答案都不对', 'A');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '35', 'checkEnd', 'stringEnd', 'endsWith', 'ends', 'C');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '36', '内部', '起始位置上', '结束位置上', 'B和C', 'D');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '37', 'abs', 'absolute', 'positive', 'positiveValue', 'A');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '38', 'Calc', 'Math', 'Calculation', 'Number', 'B');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '39', '7+randomObject.nextInt(293)', '8+randomObject.nextInt(292)', '8+randomObject.nextInt(293)', '以上答案都不对', 'C');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '40', '10+randomObject.nextInt(26)', '15+randomObject.nextInt(21)', '10+randomObject.nextInt(25)', '15+randomObject.nextInt(35)', 'B');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '41', 'String []a=new String[5]; for( int i=0;i<5;a[i++]=null);', 'String a[]={\"\",\"\",\"\",\"\",\"\"};', 'String a[5];', 'String[5]a;', 'B');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '42', 'String s=new “abc@”;', 'String s=new String(“abc@”) ;', 'String s;', 'String  s=” abc@”;', 'A');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '43', 'String', 'StringBuffer', 'StringTokenizer', 'stringTokenizer', 'C');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '44', '\"bcde\"', '\"cde\"', '\"cdef\"', '\"def\"', 'B');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '45', 's .equals(t);', 't .equals(c);', 's==t;', 't==c;', 'A');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '46', 'a', 'b', 'f', 'g', 'B');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '47', 's= “student”;', 'char c = s[1];', 'int len = s .length;', 'String t = s. LowerCase( );', 'A');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '48', 'String s[ ] = String[5];', 'String s[ ]={“”, “”, “”, “”, “”};\r\nfor(int i=0;i<5;s[i++]=“”);', 'String s[5];', 'String [5]s;', 'B');
INSERT INTO `selectquestions` VALUES ('3', '选择题', '49', 'Boy and dbc', 'Boy and abc', 'Girl and dbc', 'Girl and abc', 'D');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '1', '0', '1', '2', '3', 'C');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '2', '23', '45', '657', '787', 'D');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '3', '9', '8', '7', '10', 'A');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '4', 'new', 'try', 'this', 'throws', 'A');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '5', '3', '4', '2', '1', 'C');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '6', '等于数组的长度', '等于数组的长度减一', '是随意定的', '与长度无关', 'B');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '7', '0 或null', '1', '任何值', '9', 'A');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '8', '2', '4', '3', '5', 'C');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '9', '0 0 0', '13 23 67', '13 45 67', '0 23 0', 'B');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '10', 'a[0]', 'a[1]', 'a[2]', 'a[4]', 'B');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '11', 'int', 'double', 'String', 'string', 'C');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '12', 'a[1]=34', 'a[0]=12', 'a[2]=', 'a[3]=null', 'D');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '13', 'a[0]=null', 'a[1]=””', 'a[0]=0', 'a[2]=null', 'A');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '14', '1', '2', '3', '4', 'B');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '15', 'equals()', 'length()', 'length', '没法比较', 'D');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '16', '值', '大小', '带索引的数组名', '索引', 'D');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '17', 'units[2]', 'units(2)', 'units[0,2]', 'units{2}', 'A');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '18', 'declare', 'create', 'new', 'make', 'C');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '19', '名字', '参数', '下标', '地址', 'A');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '20', '数组最后一个索引加1', '数组最后一个索引减1', '数组最后一个索引', '以上答案都不对', 'A');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '21', '创建', '排序', '声明', '初始化', 'B');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '22', 'double', 'int', 'string', '任意', 'D');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '23', '常量值', '下标', '类型', '值', 'C');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '24', 'arrayName.getUpperBound', 'arrayName.getUpperLimit', 'arrayName.length', 'arrayName.length-1', 'D');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '25', '定义了一个名为 a 的一维数组', 'a 数组有 3 个元素', 'a 数组的元素的下标为 1～3', '数组中的每个元素都是整型', 'C');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '26', '是组件', '总是一维的', '任何时候都处于已排序的状', '是对象', 'A');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '27', '单下标', '二维', '正方', '一维', 'B');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '28', 'new integer[2][5];', 'new integer[5][2];', 'new int[2][5];', 'new int[1][4];', 'C');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '29', '该数组的列数', '数组元素的总个数', '该数组的行数', '每一行元素的数目', 'C');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '30', 'myArray=new int[5][3]', 'myArray=new int[4][2]', 'myArray=new int[3][5]', 'myArray=new int[2][4]', 'A');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '31', '饼分图', '位距', '线条', '表', 'D');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '32', '数组大小不能动态的发生改变', '它们只能存储基本类型值', '不能存放字符串', '以上答案都对', 'A');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '33', 'int a[][] = new int[][];', 'int a[10][10] = new int[][];', 'int a[][] = new int[10][10];', 'int []a[] = new int[][10];', 'C');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '34', 'a[-1]', 'a[9]', 'a[10]', 'a(0)', 'B');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '35', 'int intArray [ ]； intArray=new int[5]；', 'int intArray [ ]=new int[5]；', 'int [ ] intArray ={ 1,2,3,4,5}；', 'int intArray [5]={ 1,2,3,4,5};', 'D');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '36', 'intArray [ ] a1,a2; int a3[ ]={1,2,3,4,5};', 'int [ ] a1,a2; int a3[ ]={1,2,3,4,5};', 'int a1,a2[ ]; int a3={1,2,3,4,5};', 'int [ ] a1,a2; int a3=(1,2,3,4,5);', 'B');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '37', 'int a[ ] [ ]=new  a[10][5];', 'int a[]=new int[10 ];', 'int [ ]a=new a[10 ];', 'int a[]=new a[10 ];', 'B');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '38', 'int[] a={22,23,24,25,12};', 'int a[]=new int(5);', 'int[5] array;', 'int[] arr;', 'A');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '39', 'x[24]为0', 'x[24]未定义', 'x[25]为0', 'x[0]为空', 'A');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '40', 'a0, a1, a2, a3', 'a[0], a[1], a[2], a[3]', 'a[1], a[2], a[2], a[4]', 'a[0], a[1], a[2], a[3], a[4]', 'B');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '41', 'a[0]', 'a[1]', 'a[88]', 'a[87]', 'C');
INSERT INTO `selectquestions` VALUES ('4', '选择题', '42', 'char str[]', 'char str[][]', 'String str[]', 'String str[10]', 'C');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '1', '使程序结构清晰', '功能复用', '代码简洁', '重复代码', 'D');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '2', '一定在方法内所有位置可见', '可能在方法内的局部位置可见', '在方法外可以使用', '在方法外可见', 'B');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '3', '可以没有', '至少有一个', '必须定义多个形参', '只能是简单变量', 'A');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '4', '必须是一条完整的语句', '只能是一个表达式', '可能是语句，也可能是表达式', '必须提供实际参数', 'C');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '5', '不能用来返回对象', '只可以返回数值', '方法都必须含有', '一个方法中可以有多个 return 语句', 'D');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '6', '方法体为空', '方法体没有意义', '定义方法时必须使用', '方法没有返回值', 'D');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '7', 'boolean', 'int', 'void', 'static', 'C');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '8', '有相同的名字', '参数个数必须不同', '参数类型必须不同', '返回类型必须不同', 'A');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '9', '联接关系', '包含关系', '具体与抽象的关系', '类是对象的具体化', 'B');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '10', '类体中只能有变量定义和成员方法的定义，不能有其他语句。', '构造方法是类中的特殊方法。', '类一定要声明为public的，才可以执行。', '一个java文件中可以有多个class定义。', 'C');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '11', 'public void  H1｛…｝', 'public class Move()｛…｝', 'public class void  number{}', 'public  class Car｛…｝', 'D');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '12', 'public class methodName(){}', 'public void int methodName(){}', 'public void methodName(){}', 'public void methodName{}', 'C');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '13', '实例变量是类的成员变量', '实例变量是用static关键字声明的', '方法变量在方法执行时创建', '方法变量在使用之前必须初始化', 'B');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '14', '系统提供默认的构造方法', '构造方法可以有参数，所以也可以有返回值', '构造方法可以重载', '构造方法可以设置参数', 'B');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '15', 'class', 'private', 'extends', 'public', 'B');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '16', 'public x extends y {...}', 'public class x extends y {...}', 'class x extends y implements y1 {...}', 'class x {...}', 'A');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '17', 'a;', 'public  A  a=A( );', 'A  a=new  int( );', 'static  A  a=new  A( );', 'D');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '18', 'void X(int k ){ i=k; }', 'X(int k ){ i=k; }', 'X(int m, int n ){ i=m; j=n; }', 'X( ){i=0;j=0; }', 'A');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '19', 'void A(int x){...}', 'public A(int x){...}', 'public a(int x){...}', 'static A(int x){...}', 'B');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '20', 'float x( int a,int b ) { return (a-b); }', 'int  x( int a,int b) { return a-b; }', 'int  x( int a,int b ); { return a*b; }', 'int  x(int a,int b) { return 1.2*(a+b); }', 'D');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '21', 'double  X(double k ){ i=k; return i; }', 'X( ){i=6;j=8; }', 'X(double m, double n ){ i=m; j=n; }', 'X(double k ){ i=k; }', 'A');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '22', 'ca=new ClassA( );', 'public  ClassA  ca=ClassA( );', 'ClassA  ca=new  class( );', 'ca  ClassA;', 'A');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '23', 'void A(int k ){ m=k; }', 'A(int k ){ m=k; }', 'A(int m, int n ){m=i; n=j; }', 'A( ){m=0;n=0; }', 'A');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '24', 'School ( int m){ ... }', 'void  School ( int m){ ... }', 'School ( int m, int n){ ... }', 'School ( int h,int m,int n){ ... }', 'B');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '25', 'String', 'Vector', 'Object', 'KeyEvent', 'C');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '26', 'java.lang.Object', 'java.lang.Class', '任意类', '以上答案都不对', 'A');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '27', '0个', '1个', '2个', '任意个', 'D');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '28', '类定义时', '创建对象时', '调用对象方法时', '使用对象的变量时', 'B');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '29', 'public float aMethod（float a， float b，float c）{ }', 'public float aMethod（float c，float d）{ }', 'public int aMethod（int a， int b）{ }', 'public int aMethod（int a，int b，int c）{ }', 'D');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '30', 'main', 'import', 'public class', 'class', 'B');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '31', '属性和方法', '变量和方法', '变量和数据', '对象和属性', 'A');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '32', '使用、生成和清除', '清除、使用和生成', '生成、使用和清除', '生成、清除和使用', 'C');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '33', 'new', 'double', 'class', 'int', 'C');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '34', 'DataFormat.getDataTime', 'new Data', 'DataFormat.getDataTimeInstance()', 'new CurrentData', 'C');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '35', 'Java类库', 'preExisting', 'java 代码', 'library关键字', 'A');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '36', '程序员定义的方法', '现有的方法', '程序员定义的得带以及现有的方法', '既不是程序员定义的方法也不是现有的方法', 'C');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '37', 'return', 'back', 'end', '以上答案都不对', 'A');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '38', 'max', 'maximum', 'larger', 'greater', 'A');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '39', '返回值', '返回类型', '参数表', '参数列表', 'D');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '40', '常量', '表达式', '变量', '以上答案都对', 'D');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '41', '参数表', '参数列表', '值表', '变量表', 'B');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '42', '一个方法', '一个方法体', '一对花括号', '以上答案都对', 'D');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '43', 'IntegerObject', 'Int', 'IntData', 'Integer', 'D');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '44', '变元', '参数', '语句', '声明', 'B');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '45', '0', '1', '任意数量', 'A和B', 'D');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '46', '方法体', '标题', '调用者', '方法头', 'D');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '47', '语句块', '方法', '类', '以上答案都不对', 'C');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '48', '实例变量', '局部变量', '类变量', '隐藏变量', 'B');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '49', '局部变量', '隐藏变量', '实例变量', '常量', 'C');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '50', '逻辑出错', '编译错误', '运行错误', '以上答案都不对', 'A');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '51', '是在一个类的内部声明的变量', '的作用域为整个类', '可被同一类中的任何方法所访问', '以上答案都对', 'D');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '52', '调用传递', '值传递', '引用传递', '方法传递', 'B');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '53', '局部变量', '常量', '实例变量', '以上答案都不对', 'B');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '54', 'declare', 'new', 'class', '以上答案都不对', 'C');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '55', '方括号', '花括号', '逗号', '圆括号', 'B');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '56', '是在他们声明时完成', '将被设置为默认值', '是在一个构造方法中完成的', '以上答案都对', 'D');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '57', 'number', 'set', 'setNumber', 'setValue', 'C');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '58', 'number', 'get', 'getNumber', 'getValue', 'C');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '59', 'object', 'instantiate', 'create', 'new', 'D');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '60', 'x、y和s都是成员变量', 'x是实例变量、y是类变量、s是局部变量', 'x和y是实例变量、s是参数', 'x、y和s都是实例变量', 'B');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '61', '变量属性是用来描述变量作用域的', '局部变量作用域只能是它做在的方法代码段内', '类变量能在类的方法中声明', '类变量的作用域是整个类', 'C');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '62', '方法参数的作用域是方法外部代码段', '异常处理参数的作用域是方法外部代码段', '局部变量的作用域是整个类', '类变量的作用域是类的某个方法', 'B');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '63', 'java.util', 'java.io', 'java.awt', 'java.lang', 'D');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '64', 'line 3', 'line 5', 'line 6', 'line 10', 'D');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '65', 'line 2', 'line 3', 'line 6', 'line 7', 'C');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '66', '类中的构造方法不可省', '构造方法必须与类同名，但方法不能与class同名', '类的构造方法在一个对象被创建时自动执行', '一个类只能定义一个构造方法', 'B');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '67', '构造方法的名称必须和类名相同', '构造方法没有返回值，返回类型也不能用void', '构造方法在一个类中可以多次出现', '当重写了带参数的构造方法，系统默认的不带参数的构造方法依然存在', 'D');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '68', '类体中只能有变量定义和成员方法的定义，不能有其他语句', '构造方法是类中的特殊方法', '类一定要声明为public 的，才可以执行', '一个java文件中可以有多个class定义', 'A');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '69', '封装性', '继承性', '多态性', '重载', 'D');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '70', 'java', 'C++       C 、', '', 'Smalltalk', 'C');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '71', '先声明对象，然后才能使用对象', '先声明对象，为对象分配内存空间，然后才能使用对象', '先声明对象，为对象分配内存空间，对对象初始化，然后才能使用对象', '上述说法都对', 'D');
INSERT INTO `selectquestions` VALUES ('5', '选择题', '72', '面向对象方法追求的目标是、尽可能地运用人类自然的思维方式来建立问题空间的模型，构造尽可能直观、自然的表达求解方法的软件系统。', '面向对象方法的优点有、易于维护，可重用性好，易于理解、扩充和修改。', '面向对象＝对象＋分类＋继承＋消息通信。', '面向对象的基本特征是封装性、继承性和并行性。', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '1', '不能被继承', '在子类方法中不能被调用', '能被别的程序自由调用', '不能被子类的方法覆盖', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '2', 'public', 'protected', 'private', 'final', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '3', 'public', 'protected', 'private', 'final', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '4', 'public', 'protected', 'private', 'final', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '5', '多态性', '接口', '封装性', '继承性', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '6', 'public float sort(float x)', 'int sort(int y)', 'double sort(int x,int y)', 'void sort(double y)', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '7', '采用不同的形式参数列表', '返回值类型不同', '调用时用类名或对象名做前缀', '参数名不同', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '8', 'extends', 'implements', 'inherits', 'modifies', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '9', 'superclass', 'superconstructor', 'super', '以上答案都不对', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '10', 'interits', 'extends', 'reuses', '以上答案均不对', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '11', '多重', '单重', '线程', '不能继承', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '12', 'interface', 'package', 'extends', 'class', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '13', 'implements', 'package', 'extends', 'class', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '14', 'private', 'static', 'abstract', 'protected', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '15', 'class, float,  double, public', 'float , boolean ,int , long', 'char , extends , float , double', 'public ,private ,protected', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '16', '语言只允许单继承', 'JAVA 语言中只允许实现一个接口', 'java语言不允许同时继承一个类并实现一个接口', 'JAVA 语言的单一继承使得代码更加可靠', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '17', '两个或两个以上的方法取相同的方法名，但是参数的个数或类型不同', '两个以上的方法去相同的名字和具有相同参数个数，但形参的类型可以不同', '两个以上的方法名字不同，但形参的个数或类型相同', '两个以上的方法取相同的方法名，并方法的返回值类型相同', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '18', '类是JAVA语言中的一种复合数据类型', '类是包含数据变量和方法', '类是对所有具有一定共性的对象的抽象', 'JAVA 语言的类支持多继承', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '19', '如果某公共的类被声明在一个源文件中，则该类必须与源文件具有相同的名字', 'JAVA 语言中，一个类只能是实现一个接口', '如果某源文件包含package语句，则该语句必须是第一个非空、非注释行', '接口中的方法必须是抽象的，但可以不用关键abstract修饰', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '20', 'public', '不加修饰符', 'protected', 'private', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '21', 'public int add(int a)', 'public void add(long a)', 'public void add (int a,int b)', 'public void add(float a)', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '22', '用final修饰一个类表明这个类不可以派生子类', '用final修饰一个方法表明这个方法不能被覆盖', '用final修饰一个变量会变成一个常量', '用final修饰的类可以被继承', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '23', '方法的覆盖', '构造方法重载', '多态', '这是错误的代码', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '24', '抽象类不能包含抽象方法。', '接口和抽象类是一回事。', '抽象类不能实例化，即不能生成对象。', '抽象类可以实例化对象。', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '25', '可以被三种类所引用:该类自身、与它在同一个包中的其他类、在其他包中的该类的子类', '可以被两种类访问和引用:该类本身、该类的所有子类', '只能被该类自身所访问和修改', '只能被同一个包中的类访问', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '26', '编译通过运行无异常', '编译通过但运行时出错 、', '行 2 出错，不能成功编译', '不能成功编译，行 3 出错', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '27', 'abstract 不能与 final 并列修饰同一个类', 'abstract 类中不可以有 private 的成员', 'abstract 方法必须在 abstract 类中', 'static 方法中能处理非 static 的属性', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '28', 'public float aMethod （ float a ， float b ， float c ） { }', 'public float aMethod （ float c ， float d ） { }', 'public int aMethod （ int a ， int b ） { }', 'private float aMethod （ int a ， int b ， int c ）', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '29', '类 Test', '类 Test', '类 Test', '类 Test', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '30', '接口中含有具体方法的实现代码', '若一个类要实现一个接口，则用到 “implements” 关键字', '若一个类要实现一个接口，则用到“ extends ”关键字', '接口不允许继承', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '31', 'smallButton.add(myListener);', 'smallButton.addListener(myListener);', 'smallButton.addActionListener(myListener);', 'smallButton.addItem(myListener);', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '32', 'public', 'private', 'static', 'protected', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '33', '构造方法是类的一种特殊方法，他的方法名必须与类名相同。', '构造方法的返回值类型只能是void型。', '构造方法的主要作用是完成对类的对象的初始化工作。', '一般在创建新对象时，系统会自动调节用构造方法。', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '34', '隐藏', '覆盖', '重载', 'JAVA 不支持此特性', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '35', 'get', 'insert', 'getAt', 'retrieve', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '36', 'show   D、   a.show\r\n b.show        BB.show           b.show         B', 'AA.show', 'AA.show', 'a.show\r\n b.show        BB.show           b.show         BB.show', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '37', '本地方法', '最终方法', '成员方法', '抽象方法', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '38', '包含关系', '继承关系', '关联关系', '无关系，上述类定义有语法错误', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '39', 'public void mymethod(int a)', 'protected void mymethod(int a)', 'private void mymethod(int a)', 'void mymethod(int a)', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '40', 'iterator', 'getIterator', 'returnTterator', '以上答案都不对', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '41', 'remove', 'removeAt', 'delete', 'deleteAt', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '42', '本类', '本包中的所有类', '所有包中的子类', '所有包中的全部类', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '43', '0个', '1个', '2个', '任意个', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '44', '类定义时', '创建对象时', '调用对象方法时', '使用对象的变量时', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '45', 'public', 'public 和protected', 'privite', '任意修饰符都可以，由系统随机选取', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '46', '可以被三种类所引用:该类自身、与它在同一个包中的其他类、在其他包中的该类的子类', '可以被两种类访问和引用:该类本身、该类的所有子类', '只能被该类自身所访问和修改', '只能被同一个包中的类访问', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '47', '声明子类时用extends关键字', '继承是面向对象的一个重要特征', 'java支持多重继承', '继承时子类可以添加自己的方法', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '48', '用来调用父类的构造方法', '用来调用父类中被重载的方法', '用来调用父类中隐藏的成员变量', '以上说法都正确', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '49', 'getIterator', 'makeIterator', 'iterator', 'iterate', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '50', '子类中的成员变量隐藏父类中的变量', '父类中的成员变量隐藏子类中的变量', '子类中变量无效', '该声明非法', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '51', '所有类都访问该方法', '所有子类都访问该方法', '同一目录下的类可以访问该方法，但需要用import语句装载该类', '以上均不对', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '52', 'final', 'public', 'private', 'protected', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '53', '调用类Worker中定义的super( )方法 ；', '调用类Person中定义的super( )方法；', '调用类Person的构造函数；', '调用类Worker的构造函数；', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '54', '一个子类可以有多个父类，一个父类也可以有多个子类', '一个子类可以有多个父类，但一个父类只可以有一个子类', '一个子类可以有一个父类，但一个父类可以有多个子类', '上述说法都不对', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '55', 'Employee e=new Manager();', 'Employee m=new Employee ();', 'Manager c=new Manager();', 'Manager d=new Employee();', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '56', '继承实现', '调用类的方法实现', '封装实现', '方法重载实现', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '57', '抽象类中不可以有非抽象方法。', '某个非抽象类的父类是抽象类，则这个子类必须重载父类所有的抽象方法。', '不能用抽象类去创建对象。', '接口和抽象类是同一个概念。', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '58', '继承抽象类可以创建子类', '抽象类中一定有抽象方法', '抽象类中可以有成员方法', '抽象方法只能存在抽象类或接口中', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '59', '抽象类可以有构造方法。', '接口可以有构造方法。', '可以用new操作符操作一个接口。', '可以用new操作符操作一个抽象类。', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '60', 'public', 'private', '默认', '以上答案都不对', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '61', 'get方法', 'return 语句', '值的方法', 'set方法', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '62', '在声明时被初始化', '在所声明类的外侧被初始化', '在某个构造方法之内初始化', '初始化为默认值', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '63', '构造方法不能指定返回值类型', '构造方法不能指定任何参数', '同一文件中，构造方法位于其他方法之前', '构造方法能够向实例变量赋值', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '64', '名称', '对象', '值', '类型', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '65', '提供校验的范围', '修改数据', '提供数据验证', '以上答案都正确', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '66', '在类的外侧', '由同一个类的其他方法', '由类的构造方法', '在同一个类的内部', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '67', 'interface', 'implements', 'abstract', 'final', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '68', '单继承', '多继承', '单继承和多继承', '不能继承', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '69', 'super();', 'superclass();', 'superClass();', '以上答案不对', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '70', 'super   分号（；）', 'super 逗号（，）', 'super   点（ . ）', '以上答案都不对', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '71', 'filledRect', 'rectangle', 'solidRect', 'fillRect', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '72', 'Truck()', 'superClass()', 'super()', 'noArgument()', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '73', '超类 ，子类', '子类， 超类', '超类，直接超类', '\r\n直接超类，超类', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '74', '超类的方法需要拥有和子类方法相同的方法头', '超类的方法将被子类的方法所取代', '应使用关键字super后跟一个点（.）来实现子类中超类方法的访问', '以上答案都对', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '75', 'is a', 'like a', 'has  a', '以上答案都不对', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '76', 'is a', 'like a', 'has  a', '以上答案都不对', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '77', '额外的定义一个实例变量', '实现接口中的所有方法', '扩展该接口', '以上答案都不对', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '78', '没有名字', '在另一个类的内部定义', '在定义外将创建一个实例', '以上答案都对', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '79', '方法返回类型', '实例变量', '局部变量', '方法名', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '80', 'MyTruck类的对象可以赋值给MyCar类型的变量', 'MyCar类的对象可以赋值给MyTruck类型的变量', '两个类型的对象可以相互赋值给对方类型的变量', 'A和B', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '81', '以抽象的形式', '以全局的形式', '以特定的形式', 'A和B', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '82', '执行时才可以知道', '应用程序编译时能够判断', '程序员编写程序时就已知道', '永远不会知道', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '83', '基本', '超类', '子类', '以上答案都不对', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '84', 'Panel p = new Panel();', 'Button b=new Object(\"B\");', 'Panel p = new Frame();', 'Frame f = new Panel();', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '85', 'println()参数应为字符串，因此此处不能调用该方法。', '因为变量a 是private ,所以在其他类中不能访问a。', 'Second类 能继承First类。', '关键字final不能修饰类。', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '86', '{\r\n    int method1(int i) { }\r\n    int method2(int j) { }\r\n   }\r\n  D、class', '{\r\n    int method1(int i) { }\r\n    int method2(int j) { }\r\n   }', 'class B implements A {\r\n    int method1(int i) { }\r\n    int method2(int j) { }\r\n   }', 'class B extends A {\r\n    int method1(int i) { }\r\n    int method2(int j) { }\r\n   }', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '87', 'abstract类只能用来派生子类，不能用来创建abstract类的对象。', 'final类不但可以用来派生子类，也可以用来创建final类的对象。', 'abstract不能与final同时修饰一个类。', 'abstract类定义中可以没有abstract方法。', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '88', '构造函数也允许重载。', '子类无条件地继承父类的无参构造函数。', '子类不允许调用父类的构造函数。', '在同一个类中定义的重载构造函数可以相互调用。', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '89', 'interface', 'implements', 'abstract', 'class', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '90', 'public', 'private', 'protected', 'transient', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '91', '编译时会出现例外。', '运行结果为、a is First\r\n        b is second', '运行结果为、a is First\r\n        b is Secong a.k.a 2nd', '运行结果为、a is First a.k.a 1nd\r\n        b is Second a.k.a 2nd', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '92', '打印5个0。', '编译出错，数组ar[]必须初始化。', '编译出错， Mine应声明为abstract。', '出现IndexOutOfBoundes的例外。', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '93', '当创建一个Demo类的实例对象时，count的值为0。', '当创建一个Demo类的实例对象时，count的值是不确定的。', '超类对象中可以包含改变count 值的方法。', 'Demo的子类对象可以访问count。', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '94', '消息', '模块', '继承', '多态性', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '95', '静态成员是类的共享成员；', '静态变量要在定义时就初始化；', '调用静态方法时要通过类或对象激活；', '只有静态方法可以操作静态属性；', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '96', '语句import java.applet.Applet；最后的Applet是代表类(class)。', '抽象方法必须在抽象类中，所以抽象类中的方法都必须是抽象方法。', '如果p是父类Parent的对象，而c是子类Child的对象，则语句c = p是正确的。', '使用方法length( )可以获得字符串或数组的长度。', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '97', '类及其属性、方法可以同时有一个以上的修饰符来修饰。', '接口是特殊的类，所以接口也可以继承，子接口将继承父接口的所有常量和抽象方法。', '一个类如果实现了某个接口，那么它必须重载该接口中的所有方法。', 'Java的源代码中定义几个类，编译结果就生成几个以.class为后缀的字节码文件。', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '98', 'errupt', 'set', 'new', 'create', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '99', '', '，', '；', '/', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '100', 'java、lang、Integer 是接口', 'java.lang. Runnable类可以创建对象', 'Double对象存在java.lang包中', 'Double对象在java. Lang.Object包中', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '101', '一个包可以包含多个类', '一个源文件中，可能有一个公共类', '属于同一个包的类在默认情况下可以相互访问', '系统不会为源文件创建默认的包', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '102', '一个文件可以属于一个包', '一个包可包含多个文件', '一个类可以属于一个包', '一个包只能含有一个类', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '103', 'java.lang包封装了Object、Class、System、String、Thread等基本类', 'System类提供了标准的I/O操作，可以实例化', 'Class类的对象包含所对应的类的基本信息，可以通过Class类的方法访问这些信息', 'Object类是所有类都必须继承的类', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '104', 'private', 'class', 'exends', 'implements', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '105', '抽象', '继承', '多态', '结构化', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '106', 'private', 'protected', 'private protected', 'public', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '107', 'java.lang.Object', 'java.lang.Class', '任意类', '以上答案都不对', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '108', 'add', 'addToEnd', 'append', 'insertAt', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '109', 'class  M  extends  N', 'class  N  implements  M', 'class  M  implements  N', 'class  N  extends  M', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '110', '类', '内部类', '继承性', '多态', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '111', 'next', 'getNext', 'hasNext', 'isNext', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '112', 'int', 'Object', 'ArrayList', '以上答案都不对', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '113', 'interface', 'implements', 'abstract', 'class', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '114', 'Java中的类可以有多个直接父类', '抽象类可以有子类', 'Java中的接口支持多继承', '最终类不可以作为其它类的父类', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '115', 'Java语言规定构造方法名与类名必须相同', 'Java语言规定构造方法没有返回值，但不用void声明', 'Java语言规定构造方法不可以重载', 'Java语言规定构造方法只能通过new自动调用', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '116', '两个成员变量名相同.', '成员变量与成员方法名相同.', '两个成员方法名相同', '成员方法中的参数与成员变量名相同.', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '117', 'public', 'protected', 'private', '未修饰', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '118', '是父类的变量,子类的方法', '父类中的变量或方法', '子类中的变量或方法', '子类的变量,父类的方法', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '119', '在类中的构造方法的名字与类的名字相同, 而且不能重载', '在类中的构造方法的名字与类的名字相同,但没有返回类型.', '在类中的构造方法的名字与类的名字相同,而且有返回类型.', '在类中的构造方法的名字与类的名字相同,而且不能初始化.', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '120', 'final', 'public', 'private', 'abstract', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '121', 'void A(int x){…}', 'A(int x){…}', 'A  A(int x){…}', 'int A(int x){…}', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '122', '子类定义了自己的构造函数，就不会调用父类的构造函数', '子类必须通过super关键字调用父类没有参数的构造函数', '如果子类的构造函数没有通过super调用父类构造函数，那么子类会先调用父类不含参数的构造函数，再调用子类自己的构造函数', '创建子类对象时，先调用子类自己的构造函数，然后调用父类的构造函数', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '123', 'default', 'private', 'public', 'protected', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '124', 'static', 'implements', 'extends', 'abstract', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '125', 'tolDArray', 'toOneDimensionalArray', 'fromArrayList', 'toArray', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '126', 'public', 'private', 'protected', 'transient', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '127', 'java.util', 'java.awt', 'javax.swing', 'java.awt.event', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '128', '接口也有构造方法', '实现接口时，需对接口中的所有方法都要实现', '抽象类也有构造方法', '抽象类可以派生出子类', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '129', '类具有封装性，所以类的数据是不能被访问的', '类具有封装性，但可以通过类的公共接口访问类中的数据', '声明一个类时，必须用public修饰符', '每个类中，必须有main方法，否则程序无法运行', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '130', 'int addValue( int a, int b ){return a+b;}    float addValue ( float a, float b) {return a+b;}', 'int addValue (int a, int b ){value=a+b; }    float addValue ( int a, int b) {return (float)(a+b);}', 'int addValue( int a, int b ){return a+1;}    int addValue ( int a, int b) {return a+b;}', 'int addValue( int a, int b ) {return a+b;}    int addValue ( int x, int y ) {return x+y;}', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '131', 'j=2', 'j=4', 'j=6', 'j=7', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '132', '集合', '属性', '访问器', '以上答案都不对', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '133', '计数器', '元素', '引用', '实例变量', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '134', 'implements', 'extends', 'class', 'public', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '135', 'private', 'public', 'dimensional', '以上答案都不对', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '136', '第3行', '第6行', '第7行', '第8行', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '137', '构造方法也属于类的方法，用于创建对象的时候给成员变量赋值。', '构造方法不可以重载。', '构造方法没有返回值', '构造方法一定要和类名相同。', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '138', 'public', 'private', 'static', 'final', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '139', '操作是对象的动态属性', '任何对象都必须有继承性', '对象间的通讯靠消息传递', '对象是属性和方法的封装体', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '140', '程序可以编译运行，输出结果为 int：8', '程序可以编译运行，输出结果为 long：8', '程序有编译错误，因为两个 method()方法必须定义为静态(static)的', '程序可以编译运行，但没有输出', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '141', '类是 Java 语言中的一种复合数据类型', '类中不包含数据变量和方法', '类是对所有具有一定共性的对象的抽象', 'Java 语言的类只支持单继承', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '142', 'interface', 'class', 'protected', 'public', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '143', 'public x xl=new  y();', 'public y  xl=new x();', 'x xl=new  x();', 'x xl=x();', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '144', '可重用性', '可维护性', '表示方法的一致性', '可重用性、可维护性、表示方法的一致性', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '145', 'al=new();    a2=new();', 'al=A new();  a2=A new();', 'al,a2=new A();', 'al=new A();  a2=new A();', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '146', '类定义时', '使用对象的变量时', '调用对象方法时', '创建对象时', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '147', 'public abstract class Car{…}', 'abstract private move(){…}', 'protected private number;', 'abstract final class Hl{…}', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '148', '抽象', '封装', '继承', '静态', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '149', 'Person(n,a)', 'this(Person(n,a))', 'this(n,a)', 'this(name.age)', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '150', '终止函数', '构造函数', '重载函数', '初始化函数', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '151', '实例变量是类的成员变量', '实例变量要用关键字 static 来声明', '在一个方法执行时，定义在该方法的局部变量才被创建', '局部变量必须在它们使用前初始化', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '152', '将 private int m 改成 protected int m', '将 private int m 改成 public int m', '将 private int m 改成 static int m', '将 private int m 改成 int m', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '153', '不输出任何内容', '输出 0', '当编译时有错误出现', '当运行时有错误出现', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '154', 'extends', 'final', 'this', 'finalizer', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '155', '超类', '子类', '非 static', '用户自定义类', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '156', '', '', '采用不同的形式参数列表', '选项 A B C 都对', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '157', 'void GetSort(float x){x*=x;}', 'int  GetSort(double y){  return(int)(2*y);   }', 'double GetSort(int x,int y){return x+y;  }', '都不能', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '158', '子类只能继承父类 public 方法和状态', '子类能继承父类的非私有方法和状态', '子类能继承父类的所有方法和状态', '子类只能继承父类的方法，而不继承状态', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '159', 'public void A(int xl,int yl,int z1){  a=x;  b=y;  c=z; }', 'public void B(int x1,int yl,int z1){  a=x;  b=y;  c=z;}', 'public void B(int x,int y){  a=x;  b=y;  c=0;}', 'public B(int x,int y,int z){a=x;  b=y;  c=z; }', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '160', 'Java 中允许一个子类有多个父类', '某个类是一个类的子类，它仍有可能成为另一个类的父类', '一个父类只能有一个子类', '继承关系最多不能超过 4 层', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '161', '子类只能覆盖父类的方法，而不能重载', '子类只能重载父类的方法，而不能覆盖', '子类不能定义和父类同名同形参的方法，否则，系统将不知道使用哪个方法。', '重载就是一个类中有多个同名但不同形参和方法体的方法', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '162', '一个类只能有一个构造函数', '一个类可以有多个不同名的构造函数', '构造函数与类同名', '构造函数必须自己定义，不能使用父类的所有构造函数', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '163', '子类定义了自己的构造函数，就不会调用父类的构造函数', '子类必须通过 super 关键字调用父类有参数的构造函数', '如果子类的构造没有通过 super 调用父类构造函数， 那么子类会先调用子类自己的构造函数，再调用父类不含参数的构造函数。', '创建子类的对象时，先调用子类自己的构造函数，然后调用父类的构造函数', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '164', 'public private', 'private protected', 'protected static', 'static private', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '165', '节省时间', '软件复用', '软件管理', '延长软件生命周期', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '166', '产生编译错误', '代码可以编译运行，并输出结果：AB', '代码可以编译运行，但没有输出', '编译没有错误，但会产生运行时异常', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '167', '子 系统', '用户 系统', '子 超', '超 用户', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '169', 'next', 'isNext', 'hasNext', 'iterator.next', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '170', '只能访问到声明为 public 的成员', '只可能访问到声明为 protected 和 public 的成员', '都可以访问', '都不能访问', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '171', 'implements   D、class', 'implements A', 'class A implements', 'class B extends A', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '172', 'C x1=new  B()；     B、B x1=new C()；    C、C x1=new C()；      D、', 'x1=new C()；    C、', 'x1=new C()；', 'B xl=new B()；', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '173', '接口与抽象类是相同的概念', '一个类不可实现多个接口', '接口之间不能有继承关系', '实现一个接口必须实现接口的所有方法', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '174', '通过接口可以实现不相关类的相同行为', '通过接口可以指明多个类需要实现的方法', '通过接口可以了解对象的交互界面', '通过接口可以了解对象所对应的类', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '175', 'null', '司', '产生数组下标越界异常', '公', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '176', '正确', '不正确', '不能确定', '接口和抽象类不能说明其对象引用', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '177', 'java .awt .Applet', 'java .awt .Image', 'java .awt .Graphics', 'java .util .Date', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '178', '可以', '不可以', '不能肯定', '因静态方法不能被改写，故不能出现在接口中', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '179', 'Java 支持多重继承，一个类可以实现多个接口', 'Java 只支持单重继承，一个类可以实现多个接口', 'Java 只支持单重继承，一个类只可以实现一个接口', 'Java 支持多重继承，但一个类只可以实现一个接口', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '180', '接口定义中的方法都只有定义没有实现', '接口定义中的变量都必须写明 final 和 static', '如果一个接口由多个类来实现，则这些类在实现该接口中的方法时应采用统一的代码', '如果一个类实现一个接口，则必须实现该接口中的所有方法，但方法未必声明为 public', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '181', '接口是 Java 中的一个重要特点', '在实现接口函数的时候要用关键字 public', '在继承一个类时，可以同时实现一个或者多个接口。', '接口可以内嵌在一个类中', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '182', 'interface', 'protect', 'final', 'static', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '183', '类 Vcetor 在 java.util 包中', '一个向量(Vcetor)对象存放的是一组有序的对象', '一个向量(Vcetor)对象大小可以根据存放的元素个数的增加而自动增加', '一个向量(Vcetor)对象中每个元素必须是相同类型的对象', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '184', '{\r\nprivate int x;\r\npublic getx() {  return x;  }\r\n }', 'public abstract class A{ private int x;\r\npublic abstract int getx();\r\npublic int amethod()\r\n{  return 0;  }\r\n}', 'public class A {\r\nprivate int x;\r\npublic abstract int getx();\r\n}', 'public interface Interfacea {\r\nprivate int x;\r\npublic int getx() {\r\n  return x;  }\r\n}', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '185', '多重继承', '不可继承', '抽象性', '嵌套', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '186', 'import', 'package', 'interface', 'protected', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '187', 'import', 'implements', 'integer', 'protected', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '188', '0', '-1', '-0.8', '0.8', 'B');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '189', '-5, -4, -5', '-4,-4,-5', '-5,-5,-5', '\r\n-4,-4,-4', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '190', '如果某公共的接口被声明在一个源文件中，则接口必须与源文件具有相同的名字', '如果源文件包含 import 语句，则该语句必须是除空行和注释行外的第一个语句行', '如果某源文件包含 package 语句，则该语句必须是第一个非空、非注释行', '接口中的方法不一定是抽象方法，所以可以不用关键字 abstract 修饰', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '191', '所有类成员', 'private或protected的类成员', 'public的类成员', 'public或private的类成员', 'C');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '192', 'extends  B               D、 class', 'implements  A', 'class  A  extends  B', 'class  B  extends  A', 'A');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '193', '创建一个数组类对象MyVector，有100个元素的空间，每个元素的初值为50。', '创建一个向量类对象MyVector，有100个元素的空间，每个元素的初值为50。', '创建一个数组类对象MyVector，有100个元素的空间，若空间使用完时，以50\r\n个元素空间单位递增。', '创建一个向量类对象MyVector，有100个元素的空间，若空间使用完时，以50\r\n个元素空间单位递增。', 'D');
INSERT INTO `selectquestions` VALUES ('6', '选择题', '194', 'Character', 'String', 'StringBuffer', 'Vector', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '1', 'setBackground      B、setBackColor       C、setRG', 'setBackColor', 'setRGB', 'setColor', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '2', '平台', '高级语言', '方法', 'GUI组件', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '3', '大小', '字形', '名字', '以上都正确', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '4', '文本大小', '组件位置', '组件大小', 'B和C', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '5', 'setCaption', 'setData', 'setText', 'setName', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '6', 'setAilgnment', 'setCenter', 'setRight', 'set HorizontalAlidnment', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '7', 'JLable的大小', '某个颜色组件', '窗口的大小', 'JFrame中的组件', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '8', '图像上的一个元素', '某种字体的测量法', '字体集', '决定某个组件位置的属性', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '9', 'setLable', 'changeLable', 'setText', 'changeText', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '10', 'setSizeAndLocation', 'setBounds', '以上都不对', 'A和B', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '11', 'setName', 'setText', 'setTile', 'setFace', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '12', '文本', '大小', '可编辑', 'horizontalAlignment', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '13', 'JTextFiel.Right', 'J、TextFiel.RIGHT', 'JTextFiel.right', '以上答案都对', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '14', '文本', '大小', '范围', '位置', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '15', '文本', '大小', '范围', '位置', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '17', 'JButton', 'JTextField', 'JLable', '标题栏', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '18', 'JButton', 'JTextField', 'JLable', '以上选项均不对', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '19', 'totalJTextField.gettext()', 'totalJTextField.setText()', 'totalJTextField.getText()', 'totalJTextField.settext()', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '20', '文件名称', '文件路径', '文件内容', '文件对象', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '21', 'changeText', 'getText', 'setText', 'modifyText', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '22', '变量', '方法', '操作数', '标识符', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '23', '空字符', '空字符串', '空值', '以上答案均不对', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '24', 'textTyped', 'valueChanged', 'pressedKey', 'keyPressed', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '25', '图表', '控制语句', '算法', '有序列表', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '26', '伪代码', 'Java语言', '注释', '执行', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '27', '字母和数字', '带有小数点的数', '字符串', '以上答案均不对', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '28', 'JTextField', 'JPassword', 'JMaskedField', 'JpasswordField', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '29', '一个方法头', '一个方法体', '一对花括号', '以上答案都正确', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '30', '变元', '参数', '语句', '声明', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '31', '方法运行完成以后，应用程序将继续执行该方法调用发生时所在位置之后的语句。', '方法运行完成以后，应用程序将继续执行被调用方法定义之后的语句。', '执行该方法调用之前的语句。', '应用程序中止执行。', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '32', '事件驱动程序', '操作方法', '事件处理程序', '操作驱动程序', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '33', 'addChangeListener', 'addActionListener', 'stateChanged', 'actionPerformed', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '34', 'JButton', '事件对象', '应用程序', '组件', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '35', 'ActionListener', 'FocusListener', 'MouseMotionListener', 'Windows Listener', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '36', 'FlowLayout', 'BorderLayout', 'GridLayout', 'CardLayout', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '37', '事件', '事件源', '事件接口', '事件处理者', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '38', 'AbstactTableModel', 'TableModel', 'JTable', 'TableModelable', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '39', '按钮', '标签', '菜单', '容器', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '40', '类定义时', '创建对象时', '调用对象方法时', '使用对象的变量时', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '41', '文本对齐方式', '文本', '大小', '以上答案都对', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '42', 'setAlignmentProperty', 'setAlignment', 'setHorizontalAlidnment', '以上都不对', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '43', 'JButton', 'JTextField', 'JLable', '标题栏', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '44', 'JButton', 'JTextField', 'JLable', '以上都不对', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '45', '语句大小写形式', '书名大小写形式', '一个冒号（在文本的末尾）', 'A 和C', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '46', 'setText', 'setButtonText', 'setJButtonText', 'setText', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '47', 'totaTextField.getText()', 'totaJtextField.setText()', 'totaJtextField. getText()', 'totaJtextField.text', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '48', '语句', '事件', '应用程序', '函数', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '49', 'changeText', 'getText', 'setText', 'modifyText', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '50', 'textType', 'valueChange', 'pressedaKey', 'keyPressed', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '51', 'setText', 'setValue', 'setLable', 'setChecked', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '52', 'isChecked', 'usSelectde', 'isClicked', 'getClicked', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '53', '0', '1', '4', '任意个', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '54', 'JCheckBox的值', 'JCheckBox的名字', 'JCheckBox的文本', 'JCheckBox的数据', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '55', '对话框标题栏内所显示的文本', '代表对话框中所显示的JButton的一个常量', '对话框中所显示的文本', '代表对话框中所出现的图标的一个常量', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '56', 'JOptionPane.ERROR_MESSAGE', 'JOptionPane.ERROR_ICON', 'JOptionPane.ERROR', 'JOptionPane.ERROR_IMAGE', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '57', '禁止标志', '感叹号', '字母I', '问好', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '58', 'on', 'ture', 'selected', 'checked', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '59', '标题', '启动器', '表头', '净化器', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '60', 'editable', 'isEditable', 'edit', 'canEdit', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '61', 'JMultiArea', 'JArea', 'JTextArea', 'JMultiLineArea', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '62', 'clear', 'append', 'setText', 'delete', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '63', 'include', 'append', 'add', 'insert', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '64', 'showInput', 'showMessageDialog', 'showInputDialog', '以上答案都不对', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '65', '1', '2', '3', '4', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '66', 'JTextArea', 'JTextFiled', 'JLable', '标题栏', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '67', '空格键', 'ＴAB键', 'enter键', '以上答案都不对', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '69', '对话框内  JTextFiled 里的值', 'TRUE—当输入的值>0时，否则为FALSE', '什么也没有', '0—若用户点击okJButton，否则为1', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '70', '供用户选择的最大值', '供用户选择的最小值', '提供给用户步长', '以上答案都对', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '71', '容器', '支架', '外壳', 'JFrame', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '72', '什么也没有', '星号', '所输入的文本', '其中仅有的数字', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '73', 'JtextFiled', 'JPassword', 'JMaskFiled', 'JPasswordFiled', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '74', 'masked', 'text', 'textChange', 'editable', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '75', 'intValue', 'getValue', 'getNumber', 'getCurrentValue', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '76', 'addEventHandler', 'addActionListener', 'registerEventHandler', 'registerActionListener', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '77', 'ActionEvent', 'NextEvent', 'SwitchEvent', 'ChangeEvent', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '78', 'ActionEvent', 'ClickEvent', 'KeyEvent', 'PressEvent', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '79', '面向对象', '步进', '事件驱动', '面向传送', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '80', 'addChangeListener', 'addActionListener', 'addKeyListener', 'addStateListener', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '81', '声明', '定义', '存储', '注册', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '82', 'setJSpinner', 'setText', 'setNumber', 'setValue', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '83', '事件监听器', 'JButton 方法', '事件处理程序', 'action方法', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '84', 'actionPerformed', 'valueChanged', 'stateChanged', 'changeValue', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '85', 'JTextFiled', 'JButtin', 'JTextArea', 'JSpinner', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '86', '事件驱动程序', '操作方法', '事件处理程序', '操作驱动程序', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '87', 'addChangeListener', 'addActionListener', 'stateChanged', 'actionPerformed', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '88', '事件处理程序', '事件对象', '方法', 'GUI组件', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '89', 'paint', 'update', 'repaint', 'redraw', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '90', '“”(双引号)', 'null', 'none', 'o', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '91', 'setImage', 'setIcon', 'setImageIcon', '以上的答案都不对', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '92', 'title', 'setText', 'setBorder', 'setTile', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '93', 'getValueAt', 'getSource', 'getIndexValue', 'getItemAt', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '94', 'getSelectedIndex', 'getSelectedValue', 'getSelectedSubscript', 'getSelectedItem', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '95', 'getUpprebound', 'getItemAt', 'setMaximumRowGount', 'setBounds', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '96', 'getUpprebound', 'getSelectedIndex', 'setMaximumRowGount', 'getItemAt', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '97', 'isSelected', 'getSelected', 'isChecked', 'getChecked', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '98', 'checkedChanged', 'actionPerformed', 'selectedChanged', '以上答案都不对', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '99', '两个', '不多于一个', '不多于三个', '任意数量', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '100', '还可同时选取其他的JRadionButton', '还可同时选取两个JRadionButton', '当某个ButtonGroup中有一个JRadionButton被选取时，（      ）\r\nA、还可同时选取其他的JRadionButton\r\nB、还可同时选取两个JRadionButton\r\nC、 其他所有已选取的JRadionButton将被调用', '当某个ButtonGroup中有一个JRadionButton被选取时，（      ）\r\nA、还可同时选取其他的JRadionButton\r\nB、还可同时选取两个JRadionButton\r\nC、 其他所有已选取的JRadionButton将被调用', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '101', 'setselected', 'setChecked', 'setDefault', 'setEnabled', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '102', 'JRadioButton', 'JCkeckBox', 'JButton', 'A和B', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '103', '复选', '变化', '状态', '操作', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '104', 'GroupBox', 'ButtonBox', 'ButtonGroup', '以上答案都不对', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '105', 'add', 'AddJButton', 'addJRadionButton', 'new JRadionButton', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '106', '处于已被选取状态', '处于为选去状态', '已被添加到内容面板中', '已被添加到一个默认的JRadioButton', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '107', '（500，500）', '（x,y）', '（0，0）', '以上答案都不对', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '108', 'Image', 'Coordinates', 'Graphics', '以上答案都不对', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '109', '矩形4个角的坐标对', '矩形左上角及右下角的x坐标和y坐标', '矩形右上角及左下角的x坐标和y坐标', '矩形左上角的x坐标、y坐标、矩形的宽度和高度', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '110', 'Color', 'GraphicsColor', 'Colors', 'GraphicsColors', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '111', 'Pictures', 'Drawings', 'Graphics', 'Illustrations', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '112', 'fillEllipse', 'drawOval', 'drawEllipse', 'fillOval', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '113', 'Point', 'JPanel', 'MouseEvent', 'Graphics', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '114', 'mouseReleased', 'mouseUp', 'mouseOff', 'mouseLetGo', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '115', 'mouseDragged', 'mousePositionChanged', 'mouseMoved', 'mouseChanged', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '116', 'addMouseListener', 'addMouseDraggedListener', 'addMouseMotionListener', 'addMouseMovementListener', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '117', '屏幕', '应用程序', '产生事件的ＧＵＩ组件', '以上答案都不对', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '118', 'EventHandler', 'MouseEventHander', 'MouseEvent', 'EventArgs', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '119', 'mouseDown', 'mouseClick', 'mousePressed', 'mouseButtonDown', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '120', 'MouseMotionListener', 'MouseListener', 'MouseDraggedListener', 'ActionListener', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '121', 'getPoint', 'getLocation', 'getMouse', 'getCursor', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '122', 'isPressed', 'rightButton', 'leftButton', 'isMetaDown', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '123', 'mouseEntered', 'mouseExited', 'mouseMoved', 'mouseClicked', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '124', '高度是宽度的两倍', '宽度为0', '高度是宽度的一半', '高度等于宽度', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '125', '高度', '颜色', '宽度', '位置', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '126', 'Keyboard', 'KeyPressedEvent', 'KeyChar', 'KeyReleasedEvent', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '127', 'KeyEventReleased', 'KeyUp', 'KeyReleased', '以上答案都不对', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '128', '供用户选择的命令', '子菜单', '分隔条', '以上答案都对', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '129', 'JMenu', 'JMenuBar', 'JMenuItem', 'JSparator', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '130', 'ColorChooser', 'JColorChooseer', 'ChooserColor', 'JChooserColor', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '131', 'getSource', 'getEventSource', 'evevtSource', 'source', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '132', 'ＭAＸＩＭＵＭ', 'KEY_FINAL', 'VK_MAX', 'KEY_LAST', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '133', '键盘事件', '菜单条', '分隔条', '菜单选项', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '134', 'JSubmenu', 'JMenuItem', 'JMenu', 'JMenuBar', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '135', '条', '助记符', '子菜单', '菜单选项', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '136', '分隔条', '热键', '菜单', '边界指示条', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '137', 'keys', 'KeyCode', 'add', 'getKeyCode', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '138', 'keyDown', 'keyReleased', 'keyPressed', '以上答案都不对', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '139', 'setForeground', 'setTextColor', 'setBackground', 'setColor', 'D');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '140', '子菜单', 'HRadioButtonMenuItem', 'JColorChooser', 'JCheckBoxMenuItem', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '141', 'drawLine(50,50,25,25)', 'drawLine(25,25,50,25)', 'drawLine(50,25,50,25)', 'drawLine(50,25,50,50)', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '142', 'drawLine(0,5,5,0)', 'drawLine(0,5,5,5)', 'drawLine(5,5,5,0)', 'drawLine(5,5,5,5)', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '143', 'fillOval', 'fillCircle', 'drawOval', 'drawCircle', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '144', 'Draw', 'Graphics', 'Drawing', 'Graphic', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '145', 'drawCircle(50,50,25)', 'fillOval(50,25,50,25)', 'fillOval(50,50,25,25)', 'drawCircle(50,50,50,50)', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '146', '左上角', 'x', 'y', '以上答案都不对', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '147', 'Drawing', 'Paint', 'Graphics', 'Images', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '148', 'JFrame(s)', 'window(s)', 'new JFrame(s)', 'super(s)', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '149', '菜单分三级定义，最高一级的是菜单条，菜单条中放菜单，菜单中放菜单项', '菜单分三级定义，最高一级的是菜单，菜单中放菜单条，菜单条\r\n中放菜单项', '菜单分两级定义，最高一级的是菜单，菜单中放菜单项', '菜单分两级定义，最高一级的是菜单条，菜单条中放菜单项', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '150', '字体、字形和大小', '字体、风格和字号', '字形、风格和字号', '字形、颜色和字号', 'C');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '151', '从上到下排列', '从左到右排列', '从下到上排列', '从右到左排列', 'A');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '152', 'JWindow', 'JFrame', 'JDialog', 'JApplet', 'B');
INSERT INTO `selectquestions` VALUES ('7', '选择题', '153', '按下鼠标左键', '点击鼠标右键', '鼠标进入', '鼠标移动', 'B');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '1', 'try语句块', 'catch语句块', 'finally语句块', 'return语句', 'C');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '2', '应用public关键字', '可以应用protected关键字', '可以应用private关键字', '只能在异常处理方法内使用。', 'D');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '3', 'Exception', 'exception', 'CommonException', 'ExceptionShare', 'A');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '4', '程序设计本身的错误', '程序运行环境改变', '软、硬件设置错误', '以上都是', 'A');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '5', 'RuntimeException', 'ClassCastException', 'ArihmetticException', 'ArrayIndexOutOfBoundException', 'C');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '6', '将错误处理程序与正常程序流分开，增加程序的可读性', '可以容易地指出异常在何处处理', '减轻程序员处理异常的任务', '增加语言的复杂机制', 'D');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '7', '没有错误，程序编译正确', '编译错误，不能够在main方法中抛出异常', '编译错误，IOException是一个系统异常，不能够由application程序产生', '没有输出结果', 'A');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '8', '编译错误', '运行错误', '编译成功，但不会打印出任何结果', '没有输出结果', 'A');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '9', '打印Exception finally', '打印Finally', '打印Exception', '没有输出结果', 'A');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '10', 'throw Exception', 'throws Exception', 'new Exception', '不需要指明什么', 'B');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '11', '”exception 1”后面跟着”finally”', '” exception 2”后面跟着“finally”', '”exception 1”', '”exception 2””', 'A');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '12', '程序的语法错', '程序编译或运行中所发生的异常事件', '程序预先定义好的异常事件', '程序编译错误', 'A');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '13', 'Error类', 'AWTError', 'VirtualMachineError', 'Exception及其子集', 'D');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '14', '捕获异常', '抛出异常', '声明异常', '嵌套异常', 'B');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '15', 'catch', 'throw', 'try', 'finally', 'B');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '16', '父类在先，子类在后', '子类在先，父类在后', '有继承关系的异常不能在同一个try程序段内', '先有子类，其他如何排列都无关', 'C');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '17', 'public', 'InputStream', 'Exception', 'abstract', 'D');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '18', 'ArithmeticException', 'nullPointerException', 'classcastException', '以上都是', 'A');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '19', 'book()throws exception', 'book(int a)exception', 'book()throws', 'book()throw exception', 'A');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '20', 'RuntimeException', 'Exception', 'Error', '以上答案都不对', 'D');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '21', '异常', '错误', '非检查型错误', '检查型异常', 'D');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '22', 'try catch', 'catch  try', 'finally  try', '以上答案都不对', 'B');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '23', 'try', 'catch', 'finally', '以上都不对', 'B');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '24', '拥有惟一的一个catch语句块', '多个finally语句块', '一个或多个catch语句块', '以上答案都不对', 'C');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '25', '致命错误', '逻辑错误', '检查型错误', '非检查型错误', 'D');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '26', 'Throwable', 'CheckedException', 'Catchable', 'RuntimeException', 'A');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '27', 'ThreadDeath', 'LinkageError', 'VirtualMachineError', '以上都是', 'D');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '28', '结束之前', '结束之后', '不清楚', '不用执行', 'A');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '29', 'throws  Exception', 'throw  Exception', 'new  Exception', '不需要指明什么', 'A');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '30', 'catch', 'finally', 'try', 'B和C', 'C');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '31', 'Exception', 'Errror', 'catch', 'ClassCastException', 'B');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '32', '异常代码', '异常处理器', '异常处理程序', '以上答案都不是', 'C');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '33', 'NumberFormatException', 'ParsingException', 'ArithmeticException', '以上答案都不对', 'A');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '34', 'finally语句块', 'return语句', 'catch语句块', 'A和C', 'C');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '35', '错误', '异常', '非检查异常', '检查异常', 'D');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '36', '抛出', '捕获', '返回', '以上答案都不对', 'A');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '37', 'finally语句块', 'return语句', 'catch语句块', '以上答案都不对', 'C');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '38', '检测', '处理', '解决', '调试', 'B');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '39', 'if语句', 'throws语句块', 'try语句块', '以上答案都不对', 'C');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '40', '异常代码', '异常处理器', '异常处理程序', '以上答案都不对', 'C');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '41', '参数', 'try语句块', '错误处理程序', '抛出程序', 'A');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '42', '跳过所有catch语句块', '执行所有catch语句块', '产生一个错误', '抛出默认的异常', 'A');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '43', 'NumberFormatException', 'Exception', 'Error', 'RuntimeException', 'C');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '44', '致命错误', '逻辑错误', '检查型异常', '非检查型异常', 'D');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '45', 'condition 1', 'condition 2', 'condition 3', 'condition 1  finally', 'D');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '46', '跳过所有的catch语句块', '执行所有的catch语句块', '产生一个错误', '跑出默认的异常', 'B');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '47', 'try语句块', '参数', '错误处理程序', '抛出程序', 'A');
INSERT INTO `selectquestions` VALUES ('8', '选择题', '48', '编译时将产生错误；', '编译时正确，运行时将产生错误；', '输出零；', '输出空。', 'A');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '1', 'File stream', 'Piep stream', 'Random stream', 'Filter stream', 'C');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '2', '以选中的压缩文件为参数', '以FileInputStream对象为参数', '以InputStreamReader为参数', '以BufferedReader对象为参数', 'B');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '3', 'FileReader(File file)', 'read()', 'FileWreter(File file)', 'ready()', 'A');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '4', 'boolean', 'int', 'String', 'Integer', 'A');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '5', '读入一个字节', '读入一行字节', '判断文件读入类是否到达文件尾', '判断文件读入类是否到达文件头', 'C');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '6', '取得文件读入类', '取得文件读入类的字符串', '取得文件读入类的编码机制', '设置文件读入类的编码机制', 'C');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '7', 'BufferedReader', 'LineReader', 'FilterReader', 'Reader', 'D');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '8', '向上跳过流文件的n长度数据', '跳过流文件的全部数据', '向上跳过流文件的全部数据', '跳过流文件的n长度数据', 'D');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '9', 'boolean', 'int', 'String', 'Integer', 'A');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '10', '写入一个字符', '写入一个字符串', '写入一个整形数据', '写出一个字符串', 'A');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '11', '改变当前的目录', '返回根目录名', '删除一个文件', '查找一个文件是否包含文本或二进制信息', 'B');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '12', 'File', 'InputStream', 'OutputStream', 'FileOutputStream', 'C');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '13', 'readInt', 'readLIne', 'seek', 'close', 'C');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '14', 'readInt', 'readLIne', 'seek', 'close', 'B');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '15', 'readInt', 'readLIne', 'seek', 'close', 'A');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '16', 'BufferedInputStream', 'LineNumberInputStream', 'BufferedOutputStream', 'DataInputStream', 'C');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '17', 'FileReader', 'BufferedReader', 'FileInputStream', 'SequenceInputStream', 'D');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '18', 'new BufferedReader(File)', 'new FileOutputStream(File)', 'FileInputStream(File)', 'new FileReader(File)', 'D');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '19', '从文件系统内删除该文件。', '程序顺利结束时从系统中删除文件。', '判断文件是否存在。', '当文件不存在时创建文件。', 'A');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '20', '将文件设置为只读。', '将文件对象的路径转换为字符串返回。', '返回文件和目录清单。（字符串对象）', '判断该File对象所对应的是否是文件。', 'B');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '21', 'FileOutputStream', 'DataInputStream', 'DataOutputStream', 'FileInputStream', 'D');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '22', 'public String getPath()', 'public String getParent()', 'public String getName()', 'public boolea isFile()', 'C');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '23', 'FileInputStream', 'ObjectInputStream', 'CharInputStream', 'ZipInputStream', 'C');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '24', 'BufferedReader', 'DataInputStream', 'DataOutputStream', 'FileInputStream', 'A');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '25', 'FileReader', 'FileWriter', 'BufferReader', 'BufferWriter', 'A');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '26', 'close()', 'FileOutputStream(File file)', 'FileInputStream(File file)', 'write(int b)', 'B');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '27', 'new BufferedReader(File)', 'new FileOutputStream(File)', 'FileInputStream(File)', 'new FileReader(File)', 'D');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '28', 'FileOutStream', 'FileInputStream', 'RandomAccessFile', 'FileWrite', 'D');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '29', '顺序存取', '随机存取', '直接存取', '间接存取', 'D');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '30', '位', '字节', '兆', '文件', 'B');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '31', '返回文件和目录清单。（File对象）', '返回文件和目录清单。（字符串对象）', '在当前目录下生成指定的目录。', '判断该File对象所对应的是否是文件。', 'A');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '32', '流', '类', 'main方法', '键盘接收', 'A');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '33', '流动的字节', '流动的对象', '流动的文件', '流动的数据缓冲区', 'D');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '34', '实现DataInput接口', '实现ObjectInput接口', 'Serializable接口', '继承Reader抽象类', 'A');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '35', '位', '字节', '兆', '文件', 'A');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '36', '位', '字节', '字符', '数据库', 'D');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '37', 'File stream', 'Piep stream', 'Random stream', 'Filter stream', 'D');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '38', '0和1', '数据包', '字母', '2', 'A');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '39', 'BuffereReader', 'LineReader', 'FilterReader', 'Reader', 'D');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '40', 'FileReader', 'Reader', 'PipedReader', 'InputStreamReader', 'B');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '41', 'JFileDialog', 'JFileChooser', 'JFileOption', 'JOptionPane', 'B');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '42', 'File', 'FileDirectory', 'FileInformation', 'DirectoryInformationmation', 'A');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '43', '输入流       B、  输出流      C、  A和', '输出流', 'A和B', '不知道', 'C');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '44', 'Exception', 'Object', 'throwble', '以上都不是', 'B');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '45', '数据流', '字符流', '输入流', '输出流', 'B');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '46', 'Reader类', 'InputStream类', 'OutputStream类', 'File类', 'A');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '47', '4', '2', '6', '8', 'B');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '48', 'Object', 'Serializable', 'RandomAccessFile', 'Java.io中不存在这样的类', 'C');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '49', 'OutputFile', 'StreamWriter', 'PrintWriter', 'BuffereReader', 'C');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '50', 'buffer(类型为byte[])用来储存将要读取的字符', 'in(类型为int)表示从自身读取的下一个字节在buffer中的位置', 'out（类型为int）表示当从一个OutputStream读取下一个字节时，这个字节在buffer中存放的位置', 'PIPE_SIZE(类型为static int )表示缓冲大小', 'A');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '51', 'IOException', 'OpenException', 'FileException', 'InputOutputException', 'B');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '52', 'FileInputStream类和FileOutputStream类', 'InputStream类和OutputStream类', 'FileReader类和FileWriter类', 'File_Reader类和File_Writer类', 'B');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '53', 'Scanner in = new Scanner(System.in);\r\n    int x = in.nextlnt()', 'Scanner in = Scanner(System.in);\r\nint x = in.getInt()', 'Scanner in = new Scanner(System.in);\r\nint str = in.next()', 'Scanner in  = new Scanner(System.in);\r\nint x = in.nextline()', 'B');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '54', '获取当前指针指向文件的位置。', '将指针移动到参数指定的位置。。', '指针从当前位置向后移动n个字节位置，并返回指针实际移动的字节数。', '关闭输入输出流。', 'A');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '55', 'InputSream', 'OutputStream', 'Reader', 'Writers', 'C');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '56', '将相应于整型实参ch的2个低位字节的字符写入', '写入字符串ch', '将字符数组ch的内容写入', '这是一个抽象方法，从ch开始将方法中的length个字符写入', 'A');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '57', 'readLine', 'read', 'line', 'close', 'A');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '58', '4', '8', '1', '2', 'B');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '59', 'flush', 'closeBufferedReader', 'closeFile', 'close', 'D');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '60', 'getEncoding()', 'close()', 'write(int c)', 'readLine()', 'A');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '61', 'FileReader', 'FileWriter', 'BufferReader', 'BufferWriter', 'A');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '62', '常量', '整数', '字符串', '字符', 'D');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '63', '从字节数组读取的输入流', '向字节数组写入的输出流', '写文件的输出流', '缓冲输出流', 'B');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '64', '返回0', '抛出EndOfFileException异常', '返回null', '以上答案都不对', 'C');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '65', '永久数据', '位', '二级数据', '数据库', 'A');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '66', 'java.io', 'java.files', 'java.stream', '以上答案都不对', 'A');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '67', '控制台输入数据的读取', '控制带输出的数据读取', '磁盘文件的顺序读写', '对文件的随机访问', 'A');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '68', 'clear', 'removeAll', 'clearAll', 'removeAllItems', 'D');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '69', 'InputStream', 'OutputStream', 'Writer', 'BufferdReader', 'C');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '70', 'InputFile', 'StreamReader', 'BufferedResder', 'FileReader', 'D');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '71', 'c = (char)br.read();', 'c=br.read();', 'c =(char)br.readLine()', 'c = br.readLine()', 'A');
INSERT INTO `selectquestions` VALUES ('9', '选择题', '72', '流', '循环', '字符串', '记录', 'A');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '1', '一种', '两种', '三种', '四种', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '2', 'Java.io', 'java.lang', 'java.util', 'java.awt', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '3', 'java.util', 'java.io', 'java.lang', 'java.sql', 'C');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '4', '新建状态、运行状态和终止状态', '新建状态、运行状态、阻塞状态和终止状态', '新建状态、可运行状态、运行状态、阻塞状态和终止状态', '新建状态、可运行状态、运行状态、恢复状态和终止', 'C');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '5', 'implements  Thread', 'extends  Runnable', 'implements  Runnable', 'extends   Thread', 'D');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '6', 'Test t=new Test()', 'Thread t=new Thread()', 'Thread t=new Thread(new Test() )', 'Test t=new Thread()', 'C');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '7', '字节代码', '多进程', '静态连接', '编译', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '8', 'start()', 'init()', 'stop()', 'destroy()', 'D');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '9', 'SomeThread类是包含run()方法的任意java类', 'SomeThread类一定要实现Runnable接口', 'SomeThread类是Thread类的子类', 'SomeThread类是Thread类的子类并且要实现Runnable接口', 'A');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '10', 'Java提供了丰富的类库', 'Java最大极限地利用网络资料', 'Java支持多线程', 'Java不支持TCP/IP协议', 'D');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '11', 'sleep()方法的时间到', '获得了对象的锁', '线程在调用t.join()方法后，线程t结束', 'wait()方法结束', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '12', '垃圾回收', '虚拟机', '代码安全', '多线程', 'D');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '13', 'Java要求编程者管理内存', 'Java的安全性体现在多个层次上', 'Applet要求在支持Java的浏览器上运行', 'Java有多线程机制', 'A');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '14', 'start()', 'resume()', 'init()', 'run()', 'A');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '15', 'sleep（）', 'Join（）', 'yield（）', 'interrupt（）', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '16', '线程是由代码，数据，内核状态和一组寄存器组成', '线程间的数据是不共享', '用户只能通过创建Thread类的实例建立和控制自己的线程', '因多线程并发执行而引起的执行顺序的不确定性可能造成执行结果不确定', 'C');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '17', '将第一行的extends Thread改为implements Runnable', '将第三行的new Try()改为new Thread ()', '将第四行t.start()改为start(t)', '将第七行public void run(int j)改为public void run()', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '18', '运行状态', '阻塞状态', '可运行状态', '终止状态', 'C');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '19', 'Java中对共享数据操作的并发控制是采用加锁技术', '线程之间的交互，提倡采用suspend( )/resume( )方法', '共享数据的访问权限都必须定义为private', 'Java中没有提供检测与避免死锁的专门机制，但应用程序员可以采用某些策略防止死锁的发生', 'C');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '20', '多线程', '多接口', '多平台', '多动态', 'A');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '21', '加载代码', '校验代码', '编译代码', '执行代码', 'C');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '22', 'run（）', 'start （）', 'init （）', 'resume（）', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '23', '虚拟的CPU', '程序代码', '操作系统的内核状态', '数据', 'A');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '24', '程序通过编译并且run()方法可以正常输入递增的i的值', '程序通过编译，调用run()方法将不显示任何输入', '程序不能通过编译，while的循环控制条件不能为“true\"', '程序不能通过编译,因为run()方法的返回值类型不是void', 'D');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '25', 'Filter stream', 'File stream', 'Random access stream', 'Pipde stream', 'D');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '26', '实现java.lang.Runnable接口并重写start()方法', '实现java.lang.Runnable接口并重写run()方法', '实现java.lang.Thread类并重写run()方法', '实现java.lang.Thread类并重写start()方法', 'C');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '27', 'stop( )', 'sleep( )', 'wait( )', 'suspend( )', 'C');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '29', 'x.wait()', 'synchronized(x)', 'x.nosity()', 'x.synchronized()', 'A');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '30', 'notify（）', 'run（）', 'sleep（）', 'Join（）', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '31', '一个线程一旦被创建，就立即开始运行', '使用start（）方法可以使一个线程成为可运行的，但是它不一定立即开始运行', '当运行状态的线程因为调用了yield（）方法而停止运行，它一定被放在可运行的线程队列的前面', '挡因等待对象锁而被阻塞的线程获得锁后，将直接进入运行状态', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '32', '一旦一个线程被创建，它就立即开始运行', '调用start（）方法可以使一个线程成为可运行的，但是它不一定立即开始运行', '主线程不具有默认优先级', 'Java中线程的优先级从低到高以整数0～9表示', 'D');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '33', 'stop（）', 'sleep（）', 'wait（）', 'suspend（）', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '34', '多线程', '动态连接', '异常处理', '异步处理', 'D');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '35', '线程与进程在概念上不相关的', '一个进程可包含多个进程', '一个线程可包含多个线程', 'Java中线程没有优先级', 'D');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '36', '这段程序的功能是、每隔500秒打印012345', '这段程序的功能是、每隔1秒打印012345', '这段程序的功能是、每隔半秒打印012345', '这段程序的功能是、每隔半分钟打印012345', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '37', '线程', '进程', '进程或线程', '不可预知', 'C');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '38', 'Java中对共享数据操作的并发控制是采用加锁技术', '线程之间的交互，提倡采用suspend( )/resume( )方法', '共享数据的访问权限都必须定义为private', 'Java中没有提供检测与避免死锁的专门机制，但应用程序员可以采用某些策略防止死锁的发生', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '39', '编译通过并执行，但无输出', '编译通过并执行，输出、Running', '产生错误，没有Thread类对象', '产生错误，没有通道到达Thread包', 'C');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '40', '新建状态', '可运行状态', '运行状态', '等待状态', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '41', 'sleep()', 'yiele()', 'join()', 'interrupt()', 'D');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '42', '当一个线程获得了对象的锁后，其他任何线程不能对该对象进行任何操作', '对象锁的使用保证了共享数据的一致性', 'Java中的对象锁是共享锁', '对象锁只对临界区操作才有意义', 'A');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '43', 'Filter stream', 'File stream', 'Random access stream', 'Piped stream', 'C');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '44', 'Java中的线程的优先级有三个静态常量', '新建线程的优先级默认为最低', '优先级高的线程优先被执行', '一个线程运行时，有可能被比它高优先级的线程抢占运行', 'D');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '45', 'run（）', 'start（）', 'sleep（）', 'suspend（）', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '46', 'run()', 'start()', 'init()', 'resume()', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '47', 'start（）', 'init（）', 'run()', 'main（）', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '48', 'sleep ()', 'stop ()', 'yield ()', 'wait ()', 'D');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '49', '实现java.lang.Runnable 接口并重写 start()方法', '实现java.lang.Runnable 接口并重写 run()方法', '继承java.lang.Thread 类并重写 run()方法', '实现java.lang.Thread 类并实现 start()方法', 'A');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '50', '每行的（x,y)中，可能有x≠y，每一对（x,y)值都出现两次', '每行的（x,y)中，可能有x≠y，每一对（x,y)值都出现一次', '每行的（x,y)中，可能有x=y，每一对（x,y)值都出现两次', '每行的（x,y)中，可能有x=y，每一对（x,y)值都出现一次', 'C');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '51', 'yield（）', '另一个线程的join方法', 'sleep（）', '一个对象的notify方法', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '52', '正好1000豪秒', '1000豪秒不到', '>=1000ms', '不一定，可能>1000ms，可能<1000ms', 'D');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '53', 'Filter stream', 'File stream', 'Random  access  stream', 'Pipde  stream', 'C');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '54', 'start()', 'init()', 'run()', 'main()     E、synchronized()', 'D');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '55', 'Serializable接口', 'java.io.Externalizable接口', 'java.io.DataInput接口', 'DataOutput接口', 'C');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '56', 'wait( )', 'notify( )', 'stop ( )', 'notfyAll( )', 'A');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '57', '文件', '管道', '串化行', '过滤器', 'C');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '58', 'start( )', 'stop( )', 'init( )', 'paint( )', 'C');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '59', 'public  static  void  main()', 'public  static  void   main(String[ ]  args)', 'public static int  main(String[ ]  args)', 'public  void  main(String  arg[ ])', 'C');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '60', 'ready', 'dead', 'running', 'nonRunnable', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '61', 'wait()', 'notify()', 'yield()', 'sleep()', 'D');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '62', '线程的同步完全由系统来实现，用户不需要定义线程间的同步', '在对共享资源以互斥的方式访问时，需要用户定义线程间的同步', '线程的同步与线程的优先级有关', '线程的同步就是线程的调度', 'C');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '63', '若程序中存在线程的死锁问题，编译时不能通过', '线程的死锁是一种逻辑运行错误，编译器无法检测', '实现多线程时死锁不可避免', '为了避免死锁，应解除对资源以互斥的方式进行访问', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '64', 'init()', 'start()', 'destroy()', 'stop()', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '65', 'class', 'java', 'html', 'exe', 'A');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '66', 'java.awt.*', 'java.applet.*', 'java.io.*', 'java.awt.event.*', 'A');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '67', 'FlowLayout', 'BorderLayout', 'GridLayout', 'CardLayout', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '68', 'Java中对共享数据操作的并发控制是采用加锁技术', '线程之间的交互，提倡采用suspend()/resume()方法', '共享数据的访问权限都必须定义为private', 'Java中没有提供检测与避免死锁的专门机制，但应用程序员可以采用某些策略防止死锁的', 'A');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '69', 'Applet也需要main方法', 'Applet继承自java.awt.Applet或javax.swing.JApplet', 'Applet能访问本地文件', 'Applet程序不需要编译', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '70', 'Serializable接口', 'java.io.Externalizable接口', 'java.io.DataInput接口', 'DataOutput接口', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '71', 'Applet是Java类，所以可以由JDK中的解释器java.exe直接解释运行', 'Applet应该定义为java.applet.Applet类或javax.swing.JApplet类的子类', 'Applet与Application的主要区别在执行方式上', '通过在HTML文件中采用标记可以向Applet传递参数', 'A');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '72', 'yield()', 'wait()', 'sleep()', 'isAlive()', 'A');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '73', '当synchronized()语句块执行完毕', '当调用了线程的suspend()方法', '当在synchronized()语句块中出现异常(exception)', '当持有锁的线程调用该对象的wait()方法', 'D');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '74', '实现DataInput接口', '实现ObjectInput接口', 'Serializable接口', '继承Reader抽象类', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '75', 'static boolean matches()', 'boolean matcher.find()', 'int matcher.start()', 'int matcher.end()', 'A');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '76', '编译通过并执行，但无输出', '编译通过并执行，输出、Running', '产生错误，没有Thread类对象', '产生错误，没有通道到达Thread包', 'A');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '77', 'sleep(1000)', 'sleep(1000)\r\nInterruptedException                    InterruptedException', 'Thread.sleep(1000)', 'Thread.sleep(1000)\r\nRuntimeException                     InterruptedException', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '78', '这段程序的功能是、每隔500秒打印012345', '这段程序的功能是、每隔1秒打印012345', '这段程序的功能是、每隔半秒打印012345 32.', '这段程序的功能是、每隔半分钟打印012345', 'C');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '79', 'import java.awt.*;', 'import java.applet.*;', 'import java.io.*;', 'import java.awt.event.*;', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '80', 'import java.awt.*;', 'import java.applet.applet;', 'import java.io.*;', 'import java.awt.Graphics;', 'D');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '81', '文件输入流 FileInputStream', '对象输入流 ObjectInputStream', '字符输入流 CharInputStream', '压缩文件输入流 ZipInputStream', 'D');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '82', '都包含 main() 方法', '都通过“appletviewer”命令执行', '都通过“javac”命令编译', '都嵌入在 HTML 文件中执行', 'C');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '83', 'Writer', 'DataOutput', 'OutputStream', 'ObjectOutput', 'C');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '84', 'WriterObject', 'writer', 'BufferedWriter', 'writerObject', 'C');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '85', '安全性', '多线性', '跨平台', '可移植', 'D');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '86', '在Java中类不允许多继承', '在Java中一个类只能实现一个接口', '在Java中一个类不能同时继承一个类和实现一个接口', '在Java中接口只允许单一继承', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '87', 'wait()', 'notify()', 'yield()', 'suspend()', 'A');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '88', '类必须含有构造方法，其名字与类名相同，若没有，系统会自动加载，但其参数表为空', '父类的构造方法不能被子类继承，若想调用，将super()放在子类构造方法的第一条语句', '构造方法的主要功能是初始化类中的数据成员', '在线程编程中，构造方法可以被同步，也就是说可以被synchronized关键字修饰', 'A');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '89', '从键盘读入的字符都被打印,时间间隔为3秒', '从键盘读入的字符都被打印,但是没有时间间隔', '程序将会编译出错,在第14行', '去掉异常处理语句try和catch,程序才会正常编译', 'D');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '90', 'myThread mt=new myThread(); mt.start();mt.disp();运行完线程体run方法后再运行disp()方法', 'myThread mt=new myThread();mt.disp();mt.start();运行完disp()后才能启动线程体run', 'myThread mt=new myThread();mt.start();mt.disp();线程体run一定会在disp结束前结束。', 'myThread mt=new myThread();mt.start();mt.disp();mt.start()和mt.disp()两条命令，哪条放在前面哪条放在后面运行结果一样。', 'A');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '91', '扩展 JApplet 和 Thread', '扩展JApplet 和重设Thread 类的run()方法。', '扩展 JApplet 和实现 Runnable。', '扩展 JApplet 和创建 Thread 类的实例。', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '92', 'lock', 'synchronized', 'synclock', 'belocka', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '93', '注释', '可执行的代码行', '赋值语句', '算数语句', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '94', '之前', '之后', '处', '以上答案均不对', 'A');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '95', 'stop', 'run', 'print', 'clear', 'C');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '96', 'Class类', 'Thread类', 'System类', 'Object类', 'A');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '97', 'java.applet', 'java.lang', 'java.io', 'java.awt', 'A');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '98', 'Frame', 'Panel', 'Container', 'Applet', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '99', 'Java要求编程者管理内存。', 'Java的安全性体现在多个层次上。', 'Applet要求在支持Java的浏览器上运行。', 'Java内含多线程机制。', 'A');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '100', 'FilterWriter', 'FileWrite', 'Writer', 'OutputStreamWrite', 'A');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '101', '声明Thread类的子类，创建Thread子类的实例，让线程调用start()方法', '声明Thread类的子类，在子类中重新定义run()方法，创建Thread子类的实例', '创建Thread子类的实例，让线程调用start()方法', '声明Thread类的子类，在子类中重新定义run()方法，创建Thread子类的实例，让线程调用start()方法', 'C');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '102', 'start()', 'init()', 'resume()', 'run()', 'D');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '103', '0', '1', '10', '11', 'C');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '104', '程序中的语法错误', '程序的编译错误', '程序执行过程中遇到的事先没有预料到的情况', '程序事先定义好的可能出现的意外情况', 'C');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '105', '安全性', '多线性', '跨平台', '可移植', 'D');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '106', '异步', '消费者', '守护', '垃圾收集', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '107', '数据', '系统栈', '寄存器', '代码', 'D');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '108', '等待', '阻塞', '休眠', '挂起及由于 I/O 操作而阻塞', 'A');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '109', 'run', 'setPrority', 'yield', 'sleep', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '110', 'run', 'setPrority', 'yield', 'sleep', 'A');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '111', 'run', 'setPrority', 'yield', 'sleep', 'B');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '112', 'run', 'setPrority', 'yield', 'sleep', 'C');
INSERT INTO `selectquestions` VALUES ('10', '选择题', '113', 'run', 'setPrority', 'yield', 'sleep', 'D');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '1', 'getClass', 'getName', 'forClass', 'forName', 'D');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '2', '记录', '域', '行', '主键', 'C');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '3', '创建数据库中的行', '标识数据库中的列', '区分表中的不同行', '以上答案都不对', 'B');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '4', '数据库的连接', '载入一个数据库驱动程序', '执行检索或修改数据库内数据的SQL', '以上答案都不对', 'C');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '5', '检索数据库中的信息', '修改数据库中的信息', '建立同数据库之间的连接', '关闭同数据库之间的连接', 'A');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '6', '图', '关系', '表', '以上答案都不对', 'C');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '7', '主键', 'SQL', '查询', '以上答案都不对', 'A');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '8', 'java.text', 'java.db', 'java.sql', '以上答案都不对', 'C');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '9', 'SQLException', 'ClassNotFoundException', 'DatebaseNotFoundException', '以上答案都不对', 'A');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '10', 'executeQuery', 'select', 'executeUpdate', '以上答案都不对', 'A');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '11', 'executeQuery', 'modifyTable', 'executeUpdate', '以上答案都不对', 'C');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '12', '表名', '列名或*', '数据库名', '行所满足的标准', 'B');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '13', 'select', 'modify', 'change', 'update', 'D');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '14', '行', '数据库', '主键', '以上答案都不对', 'B');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '15', '拥有适当权限的用户和应用程序可以进行访问', '用户必须等待系统重新启动才能访问数据', '使用数据库的应用程序必须手动更新', '以上答案都不对', 'A');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '16', '类', '表', '结果集', '以上答案都不对', 'B');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '17', '用来表示与数据库的连接', '存储查询结果', '在指定的连接中处理SQL语句', '建立与数据库连接', 'B');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '18', '加载连接数据库的驱动', '存储查询结果', '在指定的连接中处理SQL语句', '建立与数据库连接', 'D');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '19', '加载连接数据库的驱动', '存储查询结果', '在指定的连接中处理SQL语句', '建立与数据库连接', 'C');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '20', 'msbase.jar', 'mssqlserver.jar', 'msutil.jar', 'tools.jar', 'B');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '21', '数组', '数据', '行和列', '方法', 'D');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '22', 'WHERE', 'ORDER BY', 'NNER JOIN', 'ON', 'C');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '23', 'WHERE', 'ORDER BY', 'INNER JOIN', 'ON', 'A');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '24', 'WHERE', 'ORDER BY', 'INNER JOIN', 'ON', 'B');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '25', 'HERE', 'ORDER BY', 'INNER JOIN', '外关键字', 'C');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '26', 'ResultSet', 'Connection', 'Statement', 'Applet', 'D');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '27', '层次模型', '网状模型', '关系模型', '结构模型', 'C');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '28', '当某个字段被指定为主关键字字段时，不对这个字段赋值将违反实现完整性规则，是错误的。', '当某个字段被指定为主关键字时，都个记录在这个字段使用相同的值是错误的。', '在不区分大小写的系统上，SQL 关键字按惯例全部使用大写字母。', '使用选择标准减少从数据库返回的记录数不能提高性能', 'D');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '29', 'SELECT * FROM 表名 WHERE 标准', 'SELECT * FROM 表名 ORDER BY 字段 ASC', 'SELECT * FROM 表名 WHERE 标准 ORDER BY 字段 ASC', 'SELECT * FROM 表 1 INNER JOIN 表 2', 'D');
INSERT INTO `selectquestions` VALUES ('11', '选择题', '31', 'class.forName(\"com.microsoft.jdbc.sqlserver.SQLServerDriver\")', 'Class.forName(\"com.microsoft.jdbc.sqlserver.SQLServerDriver\")', 'class.forName(\"com.microsoft.jdbc.sqlserver.sqlserverDriver\")', 'Class.forName(\"com.microsoft.jdbc.sqlserver.sqlserverDriver\")', 'C');

-- ----------------------------
-- Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users` (
  `USERNAME` char(10) NOT NULL,
  `USERPASSWORD` char(20) NOT NULL,
  PRIMARY KEY (`USERNAME`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of users
-- ----------------------------
INSERT INTO `users` VALUES ('wst', '123456');
